// Code generated by MockGen. DO NOT EDIT.
// Source: standard_searchable_listable.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_external_api_client.go -package=mocks -source=standard_searchable_listable.go ExternalAPIClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"github.com/overmindtech/cli/sources/example"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExternalAPIClient is a mock of ExternalAPIClient interface.
type MockExternalAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockExternalAPIClientMockRecorder
	isgomock struct{}
}

// MockExternalAPIClientMockRecorder is the mock recorder for MockExternalAPIClient.
type MockExternalAPIClientMockRecorder struct {
	mock *MockExternalAPIClient
}

// NewMockExternalAPIClient creates a new mock instance.
func NewMockExternalAPIClient(ctrl *gomock.Controller) *MockExternalAPIClient {
	mock := &MockExternalAPIClient{ctrl: ctrl}
	mock.recorder = &MockExternalAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalAPIClient) EXPECT() *MockExternalAPIClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockExternalAPIClient) Get(ctx context.Context, query string) (*example.ExternalType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, query)
	ret0, _ := ret[0].(*example.ExternalType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExternalAPIClientMockRecorder) Get(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExternalAPIClient)(nil).Get), ctx, query)
}

// List mocks base method.
func (m *MockExternalAPIClient) List(ctx context.Context) ([]*example.ExternalType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*example.ExternalType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExternalAPIClientMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExternalAPIClient)(nil).List), ctx)
}

// Search mocks base method.
func (m *MockExternalAPIClient) Search(ctx context.Context, query ...string) ([]*example.ExternalType, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range query {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].([]*example.ExternalType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockExternalAPIClientMockRecorder) Search(ctx any, query ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, query...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockExternalAPIClient)(nil).Search), varargs...)
}
