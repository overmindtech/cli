// Code generated by MockGen. DO NOT EDIT.
// Source: kms-clients.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_kms_clients.go -package=mocks -source=kms-clients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kmspb "cloud.google.com/go/kms/apiv1/kmspb"
	gax "github.com/googleapis/gax-go/v2"
	shared "github.com/overmindtech/cli/sources/gcp/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudKMSKeyRingIterator is a mock of CloudKMSKeyRingIterator interface.
type MockCloudKMSKeyRingIterator struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSKeyRingIteratorMockRecorder
	isgomock struct{}
}

// MockCloudKMSKeyRingIteratorMockRecorder is the mock recorder for MockCloudKMSKeyRingIterator.
type MockCloudKMSKeyRingIteratorMockRecorder struct {
	mock *MockCloudKMSKeyRingIterator
}

// NewMockCloudKMSKeyRingIterator creates a new mock instance.
func NewMockCloudKMSKeyRingIterator(ctrl *gomock.Controller) *MockCloudKMSKeyRingIterator {
	mock := &MockCloudKMSKeyRingIterator{ctrl: ctrl}
	mock.recorder = &MockCloudKMSKeyRingIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSKeyRingIterator) EXPECT() *MockCloudKMSKeyRingIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockCloudKMSKeyRingIterator) Next() (*kmspb.KeyRing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*kmspb.KeyRing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockCloudKMSKeyRingIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCloudKMSKeyRingIterator)(nil).Next))
}

// MockCloudKMSKeyRingClient is a mock of CloudKMSKeyRingClient interface.
type MockCloudKMSKeyRingClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSKeyRingClientMockRecorder
	isgomock struct{}
}

// MockCloudKMSKeyRingClientMockRecorder is the mock recorder for MockCloudKMSKeyRingClient.
type MockCloudKMSKeyRingClientMockRecorder struct {
	mock *MockCloudKMSKeyRingClient
}

// NewMockCloudKMSKeyRingClient creates a new mock instance.
func NewMockCloudKMSKeyRingClient(ctrl *gomock.Controller) *MockCloudKMSKeyRingClient {
	mock := &MockCloudKMSKeyRingClient{ctrl: ctrl}
	mock.recorder = &MockCloudKMSKeyRingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSKeyRingClient) EXPECT() *MockCloudKMSKeyRingClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCloudKMSKeyRingClient) Get(ctx context.Context, req *kmspb.GetKeyRingRequest, opts ...gax.CallOption) (*kmspb.KeyRing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*kmspb.KeyRing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudKMSKeyRingClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudKMSKeyRingClient)(nil).Get), varargs...)
}

// Search mocks base method.
func (m *MockCloudKMSKeyRingClient) Search(ctx context.Context, req *kmspb.ListKeyRingsRequest, opts ...gax.CallOption) shared.CloudKMSKeyRingIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(shared.CloudKMSKeyRingIterator)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockCloudKMSKeyRingClientMockRecorder) Search(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCloudKMSKeyRingClient)(nil).Search), varargs...)
}

// MockCloudKMSCryptoKeyVersionIterator is a mock of CloudKMSCryptoKeyVersionIterator interface.
type MockCloudKMSCryptoKeyVersionIterator struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSCryptoKeyVersionIteratorMockRecorder
	isgomock struct{}
}

// MockCloudKMSCryptoKeyVersionIteratorMockRecorder is the mock recorder for MockCloudKMSCryptoKeyVersionIterator.
type MockCloudKMSCryptoKeyVersionIteratorMockRecorder struct {
	mock *MockCloudKMSCryptoKeyVersionIterator
}

// NewMockCloudKMSCryptoKeyVersionIterator creates a new mock instance.
func NewMockCloudKMSCryptoKeyVersionIterator(ctrl *gomock.Controller) *MockCloudKMSCryptoKeyVersionIterator {
	mock := &MockCloudKMSCryptoKeyVersionIterator{ctrl: ctrl}
	mock.recorder = &MockCloudKMSCryptoKeyVersionIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSCryptoKeyVersionIterator) EXPECT() *MockCloudKMSCryptoKeyVersionIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockCloudKMSCryptoKeyVersionIterator) Next() (*kmspb.CryptoKeyVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*kmspb.CryptoKeyVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockCloudKMSCryptoKeyVersionIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCloudKMSCryptoKeyVersionIterator)(nil).Next))
}

// MockCloudKMSCryptoKeyVersionClient is a mock of CloudKMSCryptoKeyVersionClient interface.
type MockCloudKMSCryptoKeyVersionClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSCryptoKeyVersionClientMockRecorder
	isgomock struct{}
}

// MockCloudKMSCryptoKeyVersionClientMockRecorder is the mock recorder for MockCloudKMSCryptoKeyVersionClient.
type MockCloudKMSCryptoKeyVersionClientMockRecorder struct {
	mock *MockCloudKMSCryptoKeyVersionClient
}

// NewMockCloudKMSCryptoKeyVersionClient creates a new mock instance.
func NewMockCloudKMSCryptoKeyVersionClient(ctrl *gomock.Controller) *MockCloudKMSCryptoKeyVersionClient {
	mock := &MockCloudKMSCryptoKeyVersionClient{ctrl: ctrl}
	mock.recorder = &MockCloudKMSCryptoKeyVersionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSCryptoKeyVersionClient) EXPECT() *MockCloudKMSCryptoKeyVersionClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCloudKMSCryptoKeyVersionClient) Get(ctx context.Context, req *kmspb.GetCryptoKeyVersionRequest, opts ...gax.CallOption) (*kmspb.CryptoKeyVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*kmspb.CryptoKeyVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudKMSCryptoKeyVersionClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudKMSCryptoKeyVersionClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockCloudKMSCryptoKeyVersionClient) List(ctx context.Context, req *kmspb.ListCryptoKeyVersionsRequest, opts ...gax.CallOption) shared.CloudKMSCryptoKeyVersionIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.CloudKMSCryptoKeyVersionIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCloudKMSCryptoKeyVersionClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudKMSCryptoKeyVersionClient)(nil).List), varargs...)
}

// MockCloudKMSCryptoKeyIterator is a mock of CloudKMSCryptoKeyIterator interface.
type MockCloudKMSCryptoKeyIterator struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSCryptoKeyIteratorMockRecorder
	isgomock struct{}
}

// MockCloudKMSCryptoKeyIteratorMockRecorder is the mock recorder for MockCloudKMSCryptoKeyIterator.
type MockCloudKMSCryptoKeyIteratorMockRecorder struct {
	mock *MockCloudKMSCryptoKeyIterator
}

// NewMockCloudKMSCryptoKeyIterator creates a new mock instance.
func NewMockCloudKMSCryptoKeyIterator(ctrl *gomock.Controller) *MockCloudKMSCryptoKeyIterator {
	mock := &MockCloudKMSCryptoKeyIterator{ctrl: ctrl}
	mock.recorder = &MockCloudKMSCryptoKeyIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSCryptoKeyIterator) EXPECT() *MockCloudKMSCryptoKeyIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockCloudKMSCryptoKeyIterator) Next() (*kmspb.CryptoKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*kmspb.CryptoKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockCloudKMSCryptoKeyIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCloudKMSCryptoKeyIterator)(nil).Next))
}

// MockCloudKMSCryptoKeyClient is a mock of CloudKMSCryptoKeyClient interface.
type MockCloudKMSCryptoKeyClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSCryptoKeyClientMockRecorder
	isgomock struct{}
}

// MockCloudKMSCryptoKeyClientMockRecorder is the mock recorder for MockCloudKMSCryptoKeyClient.
type MockCloudKMSCryptoKeyClientMockRecorder struct {
	mock *MockCloudKMSCryptoKeyClient
}

// NewMockCloudKMSCryptoKeyClient creates a new mock instance.
func NewMockCloudKMSCryptoKeyClient(ctrl *gomock.Controller) *MockCloudKMSCryptoKeyClient {
	mock := &MockCloudKMSCryptoKeyClient{ctrl: ctrl}
	mock.recorder = &MockCloudKMSCryptoKeyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSCryptoKeyClient) EXPECT() *MockCloudKMSCryptoKeyClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCloudKMSCryptoKeyClient) Get(ctx context.Context, req *kmspb.GetCryptoKeyRequest, opts ...gax.CallOption) (*kmspb.CryptoKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*kmspb.CryptoKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudKMSCryptoKeyClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudKMSCryptoKeyClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockCloudKMSCryptoKeyClient) List(ctx context.Context, req *kmspb.ListCryptoKeysRequest, opts ...gax.CallOption) shared.CloudKMSCryptoKeyIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.CloudKMSCryptoKeyIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCloudKMSCryptoKeyClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCloudKMSCryptoKeyClient)(nil).List), varargs...)
}
