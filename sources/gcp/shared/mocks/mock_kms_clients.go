// Code generated by MockGen. DO NOT EDIT.
// Source: kms-clients.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_kms_clients.go -package=mocks -source=kms-clients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kmspb "cloud.google.com/go/kms/apiv1/kmspb"
	gax "github.com/googleapis/gax-go/v2"
	shared "github.com/overmindtech/cli/sources/gcp/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudKMSKeyRingIterator is a mock of CloudKMSKeyRingIterator interface.
type MockCloudKMSKeyRingIterator struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSKeyRingIteratorMockRecorder
	isgomock struct{}
}

// MockCloudKMSKeyRingIteratorMockRecorder is the mock recorder for MockCloudKMSKeyRingIterator.
type MockCloudKMSKeyRingIteratorMockRecorder struct {
	mock *MockCloudKMSKeyRingIterator
}

// NewMockCloudKMSKeyRingIterator creates a new mock instance.
func NewMockCloudKMSKeyRingIterator(ctrl *gomock.Controller) *MockCloudKMSKeyRingIterator {
	mock := &MockCloudKMSKeyRingIterator{ctrl: ctrl}
	mock.recorder = &MockCloudKMSKeyRingIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSKeyRingIterator) EXPECT() *MockCloudKMSKeyRingIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockCloudKMSKeyRingIterator) Next() (*kmspb.KeyRing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*kmspb.KeyRing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockCloudKMSKeyRingIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCloudKMSKeyRingIterator)(nil).Next))
}

// MockCloudKMSKeyRingClient is a mock of CloudKMSKeyRingClient interface.
type MockCloudKMSKeyRingClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSKeyRingClientMockRecorder
	isgomock struct{}
}

// MockCloudKMSKeyRingClientMockRecorder is the mock recorder for MockCloudKMSKeyRingClient.
type MockCloudKMSKeyRingClientMockRecorder struct {
	mock *MockCloudKMSKeyRingClient
}

// NewMockCloudKMSKeyRingClient creates a new mock instance.
func NewMockCloudKMSKeyRingClient(ctrl *gomock.Controller) *MockCloudKMSKeyRingClient {
	mock := &MockCloudKMSKeyRingClient{ctrl: ctrl}
	mock.recorder = &MockCloudKMSKeyRingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSKeyRingClient) EXPECT() *MockCloudKMSKeyRingClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCloudKMSKeyRingClient) Get(ctx context.Context, req *kmspb.GetKeyRingRequest, opts ...gax.CallOption) (*kmspb.KeyRing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*kmspb.KeyRing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCloudKMSKeyRingClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCloudKMSKeyRingClient)(nil).Get), varargs...)
}

// Search mocks base method.
func (m *MockCloudKMSKeyRingClient) Search(ctx context.Context, req *kmspb.ListKeyRingsRequest, opts ...gax.CallOption) shared.CloudKMSKeyRingIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(shared.CloudKMSKeyRingIterator)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockCloudKMSKeyRingClientMockRecorder) Search(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCloudKMSKeyRingClient)(nil).Search), varargs...)
}
