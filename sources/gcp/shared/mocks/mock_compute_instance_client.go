// Code generated by MockGen. DO NOT EDIT.
// Source: compute-clients.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_compute_instance_client.go -package=mocks -source=compute-clients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
	gax "github.com/googleapis/gax-go/v2"
	shared "github.com/overmindtech/cli/sources/gcp/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockComputeInstanceIterator is a mock of ComputeInstanceIterator interface.
type MockComputeInstanceIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceIteratorMockRecorder
	isgomock struct{}
}

// MockComputeInstanceIteratorMockRecorder is the mock recorder for MockComputeInstanceIterator.
type MockComputeInstanceIteratorMockRecorder struct {
	mock *MockComputeInstanceIterator
}

// NewMockComputeInstanceIterator creates a new mock instance.
func NewMockComputeInstanceIterator(ctrl *gomock.Controller) *MockComputeInstanceIterator {
	mock := &MockComputeInstanceIterator{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceIterator) EXPECT() *MockComputeInstanceIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeInstanceIterator) Next() (*computepb.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeInstanceIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeInstanceIterator)(nil).Next))
}

// MockComputeInstanceClient is a mock of ComputeInstanceClient interface.
type MockComputeInstanceClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceClientMockRecorder
	isgomock struct{}
}

// MockComputeInstanceClientMockRecorder is the mock recorder for MockComputeInstanceClient.
type MockComputeInstanceClientMockRecorder struct {
	mock *MockComputeInstanceClient
}

// NewMockComputeInstanceClient creates a new mock instance.
func NewMockComputeInstanceClient(ctrl *gomock.Controller) *MockComputeInstanceClient {
	mock := &MockComputeInstanceClient{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceClient) EXPECT() *MockComputeInstanceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeInstanceClient) Get(ctx context.Context, req *computepb.GetInstanceRequest, opts ...gax.CallOption) (*computepb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeInstanceClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeInstanceClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeInstanceClient) List(ctx context.Context, req *computepb.ListInstancesRequest, opts ...gax.CallOption) shared.ComputeInstanceIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeInstanceIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeInstanceClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeInstanceClient)(nil).List), varargs...)
}

// MockComputeAddressIterator is a mock of ComputeAddressIterator interface.
type MockComputeAddressIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAddressIteratorMockRecorder
	isgomock struct{}
}

// MockComputeAddressIteratorMockRecorder is the mock recorder for MockComputeAddressIterator.
type MockComputeAddressIteratorMockRecorder struct {
	mock *MockComputeAddressIterator
}

// NewMockComputeAddressIterator creates a new mock instance.
func NewMockComputeAddressIterator(ctrl *gomock.Controller) *MockComputeAddressIterator {
	mock := &MockComputeAddressIterator{ctrl: ctrl}
	mock.recorder = &MockComputeAddressIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAddressIterator) EXPECT() *MockComputeAddressIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeAddressIterator) Next() (*computepb.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeAddressIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeAddressIterator)(nil).Next))
}

// MockComputeAddressClient is a mock of ComputeAddressClient interface.
type MockComputeAddressClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAddressClientMockRecorder
	isgomock struct{}
}

// MockComputeAddressClientMockRecorder is the mock recorder for MockComputeAddressClient.
type MockComputeAddressClientMockRecorder struct {
	mock *MockComputeAddressClient
}

// NewMockComputeAddressClient creates a new mock instance.
func NewMockComputeAddressClient(ctrl *gomock.Controller) *MockComputeAddressClient {
	mock := &MockComputeAddressClient{ctrl: ctrl}
	mock.recorder = &MockComputeAddressClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAddressClient) EXPECT() *MockComputeAddressClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeAddressClient) Get(ctx context.Context, req *computepb.GetAddressRequest, opts ...gax.CallOption) (*computepb.Address, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeAddressClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeAddressClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeAddressClient) List(ctx context.Context, req *computepb.ListAddressesRequest, opts ...gax.CallOption) shared.ComputeAddressIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeAddressIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeAddressClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeAddressClient)(nil).List), varargs...)
}

// MockComputeImageIterator is a mock of ComputeImageIterator interface.
type MockComputeImageIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeImageIteratorMockRecorder
	isgomock struct{}
}

// MockComputeImageIteratorMockRecorder is the mock recorder for MockComputeImageIterator.
type MockComputeImageIteratorMockRecorder struct {
	mock *MockComputeImageIterator
}

// NewMockComputeImageIterator creates a new mock instance.
func NewMockComputeImageIterator(ctrl *gomock.Controller) *MockComputeImageIterator {
	mock := &MockComputeImageIterator{ctrl: ctrl}
	mock.recorder = &MockComputeImageIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeImageIterator) EXPECT() *MockComputeImageIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeImageIterator) Next() (*computepb.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeImageIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeImageIterator)(nil).Next))
}

// MockComputeImagesClient is a mock of ComputeImagesClient interface.
type MockComputeImagesClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeImagesClientMockRecorder
	isgomock struct{}
}

// MockComputeImagesClientMockRecorder is the mock recorder for MockComputeImagesClient.
type MockComputeImagesClientMockRecorder struct {
	mock *MockComputeImagesClient
}

// NewMockComputeImagesClient creates a new mock instance.
func NewMockComputeImagesClient(ctrl *gomock.Controller) *MockComputeImagesClient {
	mock := &MockComputeImagesClient{ctrl: ctrl}
	mock.recorder = &MockComputeImagesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeImagesClient) EXPECT() *MockComputeImagesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeImagesClient) Get(ctx context.Context, req *computepb.GetImageRequest, opts ...gax.CallOption) (*computepb.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeImagesClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeImagesClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeImagesClient) List(ctx context.Context, req *computepb.ListImagesRequest, opts ...gax.CallOption) shared.ComputeImageIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeImageIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeImagesClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeImagesClient)(nil).List), varargs...)
}

// MockComputeAutoscalerIterator is a mock of ComputeAutoscalerIterator interface.
type MockComputeAutoscalerIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAutoscalerIteratorMockRecorder
	isgomock struct{}
}

// MockComputeAutoscalerIteratorMockRecorder is the mock recorder for MockComputeAutoscalerIterator.
type MockComputeAutoscalerIteratorMockRecorder struct {
	mock *MockComputeAutoscalerIterator
}

// NewMockComputeAutoscalerIterator creates a new mock instance.
func NewMockComputeAutoscalerIterator(ctrl *gomock.Controller) *MockComputeAutoscalerIterator {
	mock := &MockComputeAutoscalerIterator{ctrl: ctrl}
	mock.recorder = &MockComputeAutoscalerIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAutoscalerIterator) EXPECT() *MockComputeAutoscalerIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeAutoscalerIterator) Next() (*computepb.Autoscaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Autoscaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeAutoscalerIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeAutoscalerIterator)(nil).Next))
}

// MockComputeAutoscalerClient is a mock of ComputeAutoscalerClient interface.
type MockComputeAutoscalerClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAutoscalerClientMockRecorder
	isgomock struct{}
}

// MockComputeAutoscalerClientMockRecorder is the mock recorder for MockComputeAutoscalerClient.
type MockComputeAutoscalerClientMockRecorder struct {
	mock *MockComputeAutoscalerClient
}

// NewMockComputeAutoscalerClient creates a new mock instance.
func NewMockComputeAutoscalerClient(ctrl *gomock.Controller) *MockComputeAutoscalerClient {
	mock := &MockComputeAutoscalerClient{ctrl: ctrl}
	mock.recorder = &MockComputeAutoscalerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAutoscalerClient) EXPECT() *MockComputeAutoscalerClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeAutoscalerClient) Get(ctx context.Context, req *computepb.GetAutoscalerRequest, opts ...gax.CallOption) (*computepb.Autoscaler, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Autoscaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeAutoscalerClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeAutoscalerClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeAutoscalerClient) List(ctx context.Context, req *computepb.ListAutoscalersRequest, opts ...gax.CallOption) shared.ComputeAutoscalerIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeAutoscalerIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeAutoscalerClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeAutoscalerClient)(nil).List), varargs...)
}

// MockForwardingRuleIterator is a mock of ForwardingRuleIterator interface.
type MockForwardingRuleIterator struct {
	ctrl     *gomock.Controller
	recorder *MockForwardingRuleIteratorMockRecorder
	isgomock struct{}
}

// MockForwardingRuleIteratorMockRecorder is the mock recorder for MockForwardingRuleIterator.
type MockForwardingRuleIteratorMockRecorder struct {
	mock *MockForwardingRuleIterator
}

// NewMockForwardingRuleIterator creates a new mock instance.
func NewMockForwardingRuleIterator(ctrl *gomock.Controller) *MockForwardingRuleIterator {
	mock := &MockForwardingRuleIterator{ctrl: ctrl}
	mock.recorder = &MockForwardingRuleIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwardingRuleIterator) EXPECT() *MockForwardingRuleIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockForwardingRuleIterator) Next() (*computepb.ForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockForwardingRuleIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockForwardingRuleIterator)(nil).Next))
}

// MockComputeForwardingRuleClient is a mock of ComputeForwardingRuleClient interface.
type MockComputeForwardingRuleClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeForwardingRuleClientMockRecorder
	isgomock struct{}
}

// MockComputeForwardingRuleClientMockRecorder is the mock recorder for MockComputeForwardingRuleClient.
type MockComputeForwardingRuleClientMockRecorder struct {
	mock *MockComputeForwardingRuleClient
}

// NewMockComputeForwardingRuleClient creates a new mock instance.
func NewMockComputeForwardingRuleClient(ctrl *gomock.Controller) *MockComputeForwardingRuleClient {
	mock := &MockComputeForwardingRuleClient{ctrl: ctrl}
	mock.recorder = &MockComputeForwardingRuleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeForwardingRuleClient) EXPECT() *MockComputeForwardingRuleClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeForwardingRuleClient) Get(ctx context.Context, req *computepb.GetForwardingRuleRequest, opts ...gax.CallOption) (*computepb.ForwardingRule, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeForwardingRuleClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeForwardingRuleClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeForwardingRuleClient) List(ctx context.Context, req *computepb.ListForwardingRulesRequest, opts ...gax.CallOption) shared.ForwardingRuleIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ForwardingRuleIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeForwardingRuleClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeForwardingRuleClient)(nil).List), varargs...)
}
