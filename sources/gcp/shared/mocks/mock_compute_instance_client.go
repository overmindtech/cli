// Code generated by MockGen. DO NOT EDIT.
// Source: compute-clients.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_compute_instance_client.go -package=mocks -source=compute-clients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
	gax "github.com/googleapis/gax-go/v2"
	shared "github.com/overmindtech/cli/sources/gcp/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockComputeInstanceIterator is a mock of ComputeInstanceIterator interface.
type MockComputeInstanceIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceIteratorMockRecorder
	isgomock struct{}
}

// MockComputeInstanceIteratorMockRecorder is the mock recorder for MockComputeInstanceIterator.
type MockComputeInstanceIteratorMockRecorder struct {
	mock *MockComputeInstanceIterator
}

// NewMockComputeInstanceIterator creates a new mock instance.
func NewMockComputeInstanceIterator(ctrl *gomock.Controller) *MockComputeInstanceIterator {
	mock := &MockComputeInstanceIterator{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceIterator) EXPECT() *MockComputeInstanceIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeInstanceIterator) Next() (*computepb.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeInstanceIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeInstanceIterator)(nil).Next))
}

// MockComputeInstanceClient is a mock of ComputeInstanceClient interface.
type MockComputeInstanceClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceClientMockRecorder
	isgomock struct{}
}

// MockComputeInstanceClientMockRecorder is the mock recorder for MockComputeInstanceClient.
type MockComputeInstanceClientMockRecorder struct {
	mock *MockComputeInstanceClient
}

// NewMockComputeInstanceClient creates a new mock instance.
func NewMockComputeInstanceClient(ctrl *gomock.Controller) *MockComputeInstanceClient {
	mock := &MockComputeInstanceClient{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceClient) EXPECT() *MockComputeInstanceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeInstanceClient) Get(ctx context.Context, req *computepb.GetInstanceRequest, opts ...gax.CallOption) (*computepb.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeInstanceClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeInstanceClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeInstanceClient) List(ctx context.Context, req *computepb.ListInstancesRequest, opts ...gax.CallOption) shared.ComputeInstanceIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeInstanceIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeInstanceClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeInstanceClient)(nil).List), varargs...)
}

// MockComputeAddressIterator is a mock of ComputeAddressIterator interface.
type MockComputeAddressIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAddressIteratorMockRecorder
	isgomock struct{}
}

// MockComputeAddressIteratorMockRecorder is the mock recorder for MockComputeAddressIterator.
type MockComputeAddressIteratorMockRecorder struct {
	mock *MockComputeAddressIterator
}

// NewMockComputeAddressIterator creates a new mock instance.
func NewMockComputeAddressIterator(ctrl *gomock.Controller) *MockComputeAddressIterator {
	mock := &MockComputeAddressIterator{ctrl: ctrl}
	mock.recorder = &MockComputeAddressIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAddressIterator) EXPECT() *MockComputeAddressIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeAddressIterator) Next() (*computepb.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeAddressIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeAddressIterator)(nil).Next))
}

// MockComputeAddressClient is a mock of ComputeAddressClient interface.
type MockComputeAddressClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAddressClientMockRecorder
	isgomock struct{}
}

// MockComputeAddressClientMockRecorder is the mock recorder for MockComputeAddressClient.
type MockComputeAddressClientMockRecorder struct {
	mock *MockComputeAddressClient
}

// NewMockComputeAddressClient creates a new mock instance.
func NewMockComputeAddressClient(ctrl *gomock.Controller) *MockComputeAddressClient {
	mock := &MockComputeAddressClient{ctrl: ctrl}
	mock.recorder = &MockComputeAddressClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAddressClient) EXPECT() *MockComputeAddressClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeAddressClient) Get(ctx context.Context, req *computepb.GetAddressRequest, opts ...gax.CallOption) (*computepb.Address, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeAddressClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeAddressClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeAddressClient) List(ctx context.Context, req *computepb.ListAddressesRequest, opts ...gax.CallOption) shared.ComputeAddressIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeAddressIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeAddressClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeAddressClient)(nil).List), varargs...)
}

// MockComputeImageIterator is a mock of ComputeImageIterator interface.
type MockComputeImageIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeImageIteratorMockRecorder
	isgomock struct{}
}

// MockComputeImageIteratorMockRecorder is the mock recorder for MockComputeImageIterator.
type MockComputeImageIteratorMockRecorder struct {
	mock *MockComputeImageIterator
}

// NewMockComputeImageIterator creates a new mock instance.
func NewMockComputeImageIterator(ctrl *gomock.Controller) *MockComputeImageIterator {
	mock := &MockComputeImageIterator{ctrl: ctrl}
	mock.recorder = &MockComputeImageIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeImageIterator) EXPECT() *MockComputeImageIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeImageIterator) Next() (*computepb.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeImageIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeImageIterator)(nil).Next))
}

// MockComputeImagesClient is a mock of ComputeImagesClient interface.
type MockComputeImagesClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeImagesClientMockRecorder
	isgomock struct{}
}

// MockComputeImagesClientMockRecorder is the mock recorder for MockComputeImagesClient.
type MockComputeImagesClientMockRecorder struct {
	mock *MockComputeImagesClient
}

// NewMockComputeImagesClient creates a new mock instance.
func NewMockComputeImagesClient(ctrl *gomock.Controller) *MockComputeImagesClient {
	mock := &MockComputeImagesClient{ctrl: ctrl}
	mock.recorder = &MockComputeImagesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeImagesClient) EXPECT() *MockComputeImagesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeImagesClient) Get(ctx context.Context, req *computepb.GetImageRequest, opts ...gax.CallOption) (*computepb.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeImagesClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeImagesClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeImagesClient) List(ctx context.Context, req *computepb.ListImagesRequest, opts ...gax.CallOption) shared.ComputeImageIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeImageIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeImagesClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeImagesClient)(nil).List), varargs...)
}

// MockComputeInstanceGroupManagerIterator is a mock of ComputeInstanceGroupManagerIterator interface.
type MockComputeInstanceGroupManagerIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceGroupManagerIteratorMockRecorder
	isgomock struct{}
}

// MockComputeInstanceGroupManagerIteratorMockRecorder is the mock recorder for MockComputeInstanceGroupManagerIterator.
type MockComputeInstanceGroupManagerIteratorMockRecorder struct {
	mock *MockComputeInstanceGroupManagerIterator
}

// NewMockComputeInstanceGroupManagerIterator creates a new mock instance.
func NewMockComputeInstanceGroupManagerIterator(ctrl *gomock.Controller) *MockComputeInstanceGroupManagerIterator {
	mock := &MockComputeInstanceGroupManagerIterator{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceGroupManagerIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceGroupManagerIterator) EXPECT() *MockComputeInstanceGroupManagerIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeInstanceGroupManagerIterator) Next() (*computepb.InstanceGroupManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.InstanceGroupManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeInstanceGroupManagerIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeInstanceGroupManagerIterator)(nil).Next))
}

// MockComputeInstanceGroupManagerClient is a mock of ComputeInstanceGroupManagerClient interface.
type MockComputeInstanceGroupManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceGroupManagerClientMockRecorder
	isgomock struct{}
}

// MockComputeInstanceGroupManagerClientMockRecorder is the mock recorder for MockComputeInstanceGroupManagerClient.
type MockComputeInstanceGroupManagerClientMockRecorder struct {
	mock *MockComputeInstanceGroupManagerClient
}

// NewMockComputeInstanceGroupManagerClient creates a new mock instance.
func NewMockComputeInstanceGroupManagerClient(ctrl *gomock.Controller) *MockComputeInstanceGroupManagerClient {
	mock := &MockComputeInstanceGroupManagerClient{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceGroupManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceGroupManagerClient) EXPECT() *MockComputeInstanceGroupManagerClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeInstanceGroupManagerClient) Get(ctx context.Context, req *computepb.GetInstanceGroupManagerRequest, opts ...gax.CallOption) (*computepb.InstanceGroupManager, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.InstanceGroupManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeInstanceGroupManagerClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeInstanceGroupManagerClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeInstanceGroupManagerClient) List(ctx context.Context, req *computepb.ListInstanceGroupManagersRequest, opts ...gax.CallOption) shared.ComputeInstanceGroupManagerIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeInstanceGroupManagerIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeInstanceGroupManagerClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeInstanceGroupManagerClient)(nil).List), varargs...)
}

// MockForwardingRuleIterator is a mock of ForwardingRuleIterator interface.
type MockForwardingRuleIterator struct {
	ctrl     *gomock.Controller
	recorder *MockForwardingRuleIteratorMockRecorder
	isgomock struct{}
}

// MockForwardingRuleIteratorMockRecorder is the mock recorder for MockForwardingRuleIterator.
type MockForwardingRuleIteratorMockRecorder struct {
	mock *MockForwardingRuleIterator
}

// NewMockForwardingRuleIterator creates a new mock instance.
func NewMockForwardingRuleIterator(ctrl *gomock.Controller) *MockForwardingRuleIterator {
	mock := &MockForwardingRuleIterator{ctrl: ctrl}
	mock.recorder = &MockForwardingRuleIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwardingRuleIterator) EXPECT() *MockForwardingRuleIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockForwardingRuleIterator) Next() (*computepb.ForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockForwardingRuleIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockForwardingRuleIterator)(nil).Next))
}

// MockComputeForwardingRuleClient is a mock of ComputeForwardingRuleClient interface.
type MockComputeForwardingRuleClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeForwardingRuleClientMockRecorder
	isgomock struct{}
}

// MockComputeForwardingRuleClientMockRecorder is the mock recorder for MockComputeForwardingRuleClient.
type MockComputeForwardingRuleClientMockRecorder struct {
	mock *MockComputeForwardingRuleClient
}

// NewMockComputeForwardingRuleClient creates a new mock instance.
func NewMockComputeForwardingRuleClient(ctrl *gomock.Controller) *MockComputeForwardingRuleClient {
	mock := &MockComputeForwardingRuleClient{ctrl: ctrl}
	mock.recorder = &MockComputeForwardingRuleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeForwardingRuleClient) EXPECT() *MockComputeForwardingRuleClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeForwardingRuleClient) Get(ctx context.Context, req *computepb.GetForwardingRuleRequest, opts ...gax.CallOption) (*computepb.ForwardingRule, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeForwardingRuleClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeForwardingRuleClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeForwardingRuleClient) List(ctx context.Context, req *computepb.ListForwardingRulesRequest, opts ...gax.CallOption) shared.ForwardingRuleIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ForwardingRuleIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeForwardingRuleClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeForwardingRuleClient)(nil).List), varargs...)
}

// MockComputeAutoscalerIterator is a mock of ComputeAutoscalerIterator interface.
type MockComputeAutoscalerIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAutoscalerIteratorMockRecorder
	isgomock struct{}
}

// MockComputeAutoscalerIteratorMockRecorder is the mock recorder for MockComputeAutoscalerIterator.
type MockComputeAutoscalerIteratorMockRecorder struct {
	mock *MockComputeAutoscalerIterator
}

// NewMockComputeAutoscalerIterator creates a new mock instance.
func NewMockComputeAutoscalerIterator(ctrl *gomock.Controller) *MockComputeAutoscalerIterator {
	mock := &MockComputeAutoscalerIterator{ctrl: ctrl}
	mock.recorder = &MockComputeAutoscalerIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAutoscalerIterator) EXPECT() *MockComputeAutoscalerIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeAutoscalerIterator) Next() (*computepb.Autoscaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Autoscaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeAutoscalerIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeAutoscalerIterator)(nil).Next))
}

// MockComputeAutoscalerClient is a mock of ComputeAutoscalerClient interface.
type MockComputeAutoscalerClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeAutoscalerClientMockRecorder
	isgomock struct{}
}

// MockComputeAutoscalerClientMockRecorder is the mock recorder for MockComputeAutoscalerClient.
type MockComputeAutoscalerClientMockRecorder struct {
	mock *MockComputeAutoscalerClient
}

// NewMockComputeAutoscalerClient creates a new mock instance.
func NewMockComputeAutoscalerClient(ctrl *gomock.Controller) *MockComputeAutoscalerClient {
	mock := &MockComputeAutoscalerClient{ctrl: ctrl}
	mock.recorder = &MockComputeAutoscalerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeAutoscalerClient) EXPECT() *MockComputeAutoscalerClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeAutoscalerClient) Get(ctx context.Context, req *computepb.GetAutoscalerRequest, opts ...gax.CallOption) (*computepb.Autoscaler, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Autoscaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeAutoscalerClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeAutoscalerClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeAutoscalerClient) List(ctx context.Context, req *computepb.ListAutoscalersRequest, opts ...gax.CallOption) shared.ComputeAutoscalerIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeAutoscalerIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeAutoscalerClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeAutoscalerClient)(nil).List), varargs...)
}

// MockComputeBackendServiceClient is a mock of ComputeBackendServiceClient interface.
type MockComputeBackendServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeBackendServiceClientMockRecorder
	isgomock struct{}
}

// MockComputeBackendServiceClientMockRecorder is the mock recorder for MockComputeBackendServiceClient.
type MockComputeBackendServiceClientMockRecorder struct {
	mock *MockComputeBackendServiceClient
}

// NewMockComputeBackendServiceClient creates a new mock instance.
func NewMockComputeBackendServiceClient(ctrl *gomock.Controller) *MockComputeBackendServiceClient {
	mock := &MockComputeBackendServiceClient{ctrl: ctrl}
	mock.recorder = &MockComputeBackendServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeBackendServiceClient) EXPECT() *MockComputeBackendServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeBackendServiceClient) Get(ctx context.Context, req *computepb.GetBackendServiceRequest, opts ...gax.CallOption) (*computepb.BackendService, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.BackendService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeBackendServiceClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeBackendServiceClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeBackendServiceClient) List(ctx context.Context, req *computepb.ListBackendServicesRequest, opts ...gax.CallOption) shared.ComputeBackendServiceIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeBackendServiceIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeBackendServiceClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeBackendServiceClient)(nil).List), varargs...)
}

// MockComputeBackendServiceIterator is a mock of ComputeBackendServiceIterator interface.
type MockComputeBackendServiceIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeBackendServiceIteratorMockRecorder
	isgomock struct{}
}

// MockComputeBackendServiceIteratorMockRecorder is the mock recorder for MockComputeBackendServiceIterator.
type MockComputeBackendServiceIteratorMockRecorder struct {
	mock *MockComputeBackendServiceIterator
}

// NewMockComputeBackendServiceIterator creates a new mock instance.
func NewMockComputeBackendServiceIterator(ctrl *gomock.Controller) *MockComputeBackendServiceIterator {
	mock := &MockComputeBackendServiceIterator{ctrl: ctrl}
	mock.recorder = &MockComputeBackendServiceIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeBackendServiceIterator) EXPECT() *MockComputeBackendServiceIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeBackendServiceIterator) Next() (*computepb.BackendService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.BackendService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeBackendServiceIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeBackendServiceIterator)(nil).Next))
}

// MockComputeInstanceGroupIterator is a mock of ComputeInstanceGroupIterator interface.
type MockComputeInstanceGroupIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceGroupIteratorMockRecorder
	isgomock struct{}
}

// MockComputeInstanceGroupIteratorMockRecorder is the mock recorder for MockComputeInstanceGroupIterator.
type MockComputeInstanceGroupIteratorMockRecorder struct {
	mock *MockComputeInstanceGroupIterator
}

// NewMockComputeInstanceGroupIterator creates a new mock instance.
func NewMockComputeInstanceGroupIterator(ctrl *gomock.Controller) *MockComputeInstanceGroupIterator {
	mock := &MockComputeInstanceGroupIterator{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceGroupIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceGroupIterator) EXPECT() *MockComputeInstanceGroupIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeInstanceGroupIterator) Next() (*computepb.InstanceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.InstanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeInstanceGroupIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeInstanceGroupIterator)(nil).Next))
}

// MockComputeInstanceGroupsClient is a mock of ComputeInstanceGroupsClient interface.
type MockComputeInstanceGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstanceGroupsClientMockRecorder
	isgomock struct{}
}

// MockComputeInstanceGroupsClientMockRecorder is the mock recorder for MockComputeInstanceGroupsClient.
type MockComputeInstanceGroupsClientMockRecorder struct {
	mock *MockComputeInstanceGroupsClient
}

// NewMockComputeInstanceGroupsClient creates a new mock instance.
func NewMockComputeInstanceGroupsClient(ctrl *gomock.Controller) *MockComputeInstanceGroupsClient {
	mock := &MockComputeInstanceGroupsClient{ctrl: ctrl}
	mock.recorder = &MockComputeInstanceGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstanceGroupsClient) EXPECT() *MockComputeInstanceGroupsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeInstanceGroupsClient) Get(ctx context.Context, req *computepb.GetInstanceGroupRequest, opts ...gax.CallOption) (*computepb.InstanceGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.InstanceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeInstanceGroupsClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeInstanceGroupsClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeInstanceGroupsClient) List(ctx context.Context, req *computepb.ListInstanceGroupsRequest, opts ...gax.CallOption) shared.ComputeInstanceGroupIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeInstanceGroupIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeInstanceGroupsClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeInstanceGroupsClient)(nil).List), varargs...)
}

// MockComputeNodeGroupIterator is a mock of ComputeNodeGroupIterator interface.
type MockComputeNodeGroupIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeNodeGroupIteratorMockRecorder
	isgomock struct{}
}

// MockComputeNodeGroupIteratorMockRecorder is the mock recorder for MockComputeNodeGroupIterator.
type MockComputeNodeGroupIteratorMockRecorder struct {
	mock *MockComputeNodeGroupIterator
}

// NewMockComputeNodeGroupIterator creates a new mock instance.
func NewMockComputeNodeGroupIterator(ctrl *gomock.Controller) *MockComputeNodeGroupIterator {
	mock := &MockComputeNodeGroupIterator{ctrl: ctrl}
	mock.recorder = &MockComputeNodeGroupIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeNodeGroupIterator) EXPECT() *MockComputeNodeGroupIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeNodeGroupIterator) Next() (*computepb.NodeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeNodeGroupIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeNodeGroupIterator)(nil).Next))
}

// MockComputeNodeGroupClient is a mock of ComputeNodeGroupClient interface.
type MockComputeNodeGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeNodeGroupClientMockRecorder
	isgomock struct{}
}

// MockComputeNodeGroupClientMockRecorder is the mock recorder for MockComputeNodeGroupClient.
type MockComputeNodeGroupClientMockRecorder struct {
	mock *MockComputeNodeGroupClient
}

// NewMockComputeNodeGroupClient creates a new mock instance.
func NewMockComputeNodeGroupClient(ctrl *gomock.Controller) *MockComputeNodeGroupClient {
	mock := &MockComputeNodeGroupClient{ctrl: ctrl}
	mock.recorder = &MockComputeNodeGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeNodeGroupClient) EXPECT() *MockComputeNodeGroupClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeNodeGroupClient) Get(ctx context.Context, req *computepb.GetNodeGroupRequest, opts ...gax.CallOption) (*computepb.NodeGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeNodeGroupClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeNodeGroupClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeNodeGroupClient) List(ctx context.Context, req *computepb.ListNodeGroupsRequest, opts ...gax.CallOption) shared.ComputeNodeGroupIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeNodeGroupIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeNodeGroupClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeNodeGroupClient)(nil).List), varargs...)
}

// MockComputeHealthCheckIterator is a mock of ComputeHealthCheckIterator interface.
type MockComputeHealthCheckIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeHealthCheckIteratorMockRecorder
	isgomock struct{}
}

// MockComputeHealthCheckIteratorMockRecorder is the mock recorder for MockComputeHealthCheckIterator.
type MockComputeHealthCheckIteratorMockRecorder struct {
	mock *MockComputeHealthCheckIterator
}

// NewMockComputeHealthCheckIterator creates a new mock instance.
func NewMockComputeHealthCheckIterator(ctrl *gomock.Controller) *MockComputeHealthCheckIterator {
	mock := &MockComputeHealthCheckIterator{ctrl: ctrl}
	mock.recorder = &MockComputeHealthCheckIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeHealthCheckIterator) EXPECT() *MockComputeHealthCheckIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeHealthCheckIterator) Next() (*computepb.HealthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeHealthCheckIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeHealthCheckIterator)(nil).Next))
}

// MockComputeHealthCheckClient is a mock of ComputeHealthCheckClient interface.
type MockComputeHealthCheckClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeHealthCheckClientMockRecorder
	isgomock struct{}
}

// MockComputeHealthCheckClientMockRecorder is the mock recorder for MockComputeHealthCheckClient.
type MockComputeHealthCheckClientMockRecorder struct {
	mock *MockComputeHealthCheckClient
}

// NewMockComputeHealthCheckClient creates a new mock instance.
func NewMockComputeHealthCheckClient(ctrl *gomock.Controller) *MockComputeHealthCheckClient {
	mock := &MockComputeHealthCheckClient{ctrl: ctrl}
	mock.recorder = &MockComputeHealthCheckClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeHealthCheckClient) EXPECT() *MockComputeHealthCheckClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeHealthCheckClient) Get(ctx context.Context, req *computepb.GetHealthCheckRequest, opts ...gax.CallOption) (*computepb.HealthCheck, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.HealthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeHealthCheckClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeHealthCheckClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeHealthCheckClient) List(ctx context.Context, req *computepb.ListHealthChecksRequest, opts ...gax.CallOption) shared.ComputeHealthCheckIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeHealthCheckIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeHealthCheckClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeHealthCheckClient)(nil).List), varargs...)
}

// MockComputeNodeTemplateIterator is a mock of ComputeNodeTemplateIterator interface.
type MockComputeNodeTemplateIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeNodeTemplateIteratorMockRecorder
	isgomock struct{}
}

// MockComputeNodeTemplateIteratorMockRecorder is the mock recorder for MockComputeNodeTemplateIterator.
type MockComputeNodeTemplateIteratorMockRecorder struct {
	mock *MockComputeNodeTemplateIterator
}

// NewMockComputeNodeTemplateIterator creates a new mock instance.
func NewMockComputeNodeTemplateIterator(ctrl *gomock.Controller) *MockComputeNodeTemplateIterator {
	mock := &MockComputeNodeTemplateIterator{ctrl: ctrl}
	mock.recorder = &MockComputeNodeTemplateIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeNodeTemplateIterator) EXPECT() *MockComputeNodeTemplateIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeNodeTemplateIterator) Next() (*computepb.NodeTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.NodeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeNodeTemplateIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeNodeTemplateIterator)(nil).Next))
}

// MockComputeNodeTemplateClient is a mock of ComputeNodeTemplateClient interface.
type MockComputeNodeTemplateClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeNodeTemplateClientMockRecorder
	isgomock struct{}
}

// MockComputeNodeTemplateClientMockRecorder is the mock recorder for MockComputeNodeTemplateClient.
type MockComputeNodeTemplateClientMockRecorder struct {
	mock *MockComputeNodeTemplateClient
}

// NewMockComputeNodeTemplateClient creates a new mock instance.
func NewMockComputeNodeTemplateClient(ctrl *gomock.Controller) *MockComputeNodeTemplateClient {
	mock := &MockComputeNodeTemplateClient{ctrl: ctrl}
	mock.recorder = &MockComputeNodeTemplateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeNodeTemplateClient) EXPECT() *MockComputeNodeTemplateClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeNodeTemplateClient) Get(ctx context.Context, req *computepb.GetNodeTemplateRequest, opts ...gax.CallOption) (*computepb.NodeTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.NodeTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeNodeTemplateClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeNodeTemplateClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeNodeTemplateClient) List(ctx context.Context, req *computepb.ListNodeTemplatesRequest, opts ...gax.CallOption) shared.ComputeNodeTemplateIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeNodeTemplateIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeNodeTemplateClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeNodeTemplateClient)(nil).List), varargs...)
}

// MockComputeReservationIterator is a mock of ComputeReservationIterator interface.
type MockComputeReservationIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeReservationIteratorMockRecorder
	isgomock struct{}
}

// MockComputeReservationIteratorMockRecorder is the mock recorder for MockComputeReservationIterator.
type MockComputeReservationIteratorMockRecorder struct {
	mock *MockComputeReservationIterator
}

// NewMockComputeReservationIterator creates a new mock instance.
func NewMockComputeReservationIterator(ctrl *gomock.Controller) *MockComputeReservationIterator {
	mock := &MockComputeReservationIterator{ctrl: ctrl}
	mock.recorder = &MockComputeReservationIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeReservationIterator) EXPECT() *MockComputeReservationIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeReservationIterator) Next() (*computepb.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeReservationIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeReservationIterator)(nil).Next))
}

// MockComputeReservationClient is a mock of ComputeReservationClient interface.
type MockComputeReservationClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeReservationClientMockRecorder
	isgomock struct{}
}

// MockComputeReservationClientMockRecorder is the mock recorder for MockComputeReservationClient.
type MockComputeReservationClientMockRecorder struct {
	mock *MockComputeReservationClient
}

// NewMockComputeReservationClient creates a new mock instance.
func NewMockComputeReservationClient(ctrl *gomock.Controller) *MockComputeReservationClient {
	mock := &MockComputeReservationClient{ctrl: ctrl}
	mock.recorder = &MockComputeReservationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeReservationClient) EXPECT() *MockComputeReservationClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeReservationClient) Get(ctx context.Context, req *computepb.GetReservationRequest, opts ...gax.CallOption) (*computepb.Reservation, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeReservationClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeReservationClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeReservationClient) List(ctx context.Context, req *computepb.ListReservationsRequest, opts ...gax.CallOption) shared.ComputeReservationIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeReservationIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeReservationClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeReservationClient)(nil).List), varargs...)
}

// MockComputeSecurityPolicyIterator is a mock of ComputeSecurityPolicyIterator interface.
type MockComputeSecurityPolicyIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeSecurityPolicyIteratorMockRecorder
	isgomock struct{}
}

// MockComputeSecurityPolicyIteratorMockRecorder is the mock recorder for MockComputeSecurityPolicyIterator.
type MockComputeSecurityPolicyIteratorMockRecorder struct {
	mock *MockComputeSecurityPolicyIterator
}

// NewMockComputeSecurityPolicyIterator creates a new mock instance.
func NewMockComputeSecurityPolicyIterator(ctrl *gomock.Controller) *MockComputeSecurityPolicyIterator {
	mock := &MockComputeSecurityPolicyIterator{ctrl: ctrl}
	mock.recorder = &MockComputeSecurityPolicyIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeSecurityPolicyIterator) EXPECT() *MockComputeSecurityPolicyIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeSecurityPolicyIterator) Next() (*computepb.SecurityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.SecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeSecurityPolicyIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeSecurityPolicyIterator)(nil).Next))
}

// MockComputeSecurityPolicyClient is a mock of ComputeSecurityPolicyClient interface.
type MockComputeSecurityPolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeSecurityPolicyClientMockRecorder
	isgomock struct{}
}

// MockComputeSecurityPolicyClientMockRecorder is the mock recorder for MockComputeSecurityPolicyClient.
type MockComputeSecurityPolicyClientMockRecorder struct {
	mock *MockComputeSecurityPolicyClient
}

// NewMockComputeSecurityPolicyClient creates a new mock instance.
func NewMockComputeSecurityPolicyClient(ctrl *gomock.Controller) *MockComputeSecurityPolicyClient {
	mock := &MockComputeSecurityPolicyClient{ctrl: ctrl}
	mock.recorder = &MockComputeSecurityPolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeSecurityPolicyClient) EXPECT() *MockComputeSecurityPolicyClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeSecurityPolicyClient) Get(ctx context.Context, req *computepb.GetSecurityPolicyRequest, opts ...gax.CallOption) (*computepb.SecurityPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.SecurityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeSecurityPolicyClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeSecurityPolicyClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeSecurityPolicyClient) List(ctx context.Context, req *computepb.ListSecurityPoliciesRequest, opts ...gax.CallOption) shared.ComputeSecurityPolicyIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeSecurityPolicyIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeSecurityPolicyClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeSecurityPolicyClient)(nil).List), varargs...)
}

// MockComputeInstantSnapshotIterator is a mock of ComputeInstantSnapshotIterator interface.
type MockComputeInstantSnapshotIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstantSnapshotIteratorMockRecorder
	isgomock struct{}
}

// MockComputeInstantSnapshotIteratorMockRecorder is the mock recorder for MockComputeInstantSnapshotIterator.
type MockComputeInstantSnapshotIteratorMockRecorder struct {
	mock *MockComputeInstantSnapshotIterator
}

// NewMockComputeInstantSnapshotIterator creates a new mock instance.
func NewMockComputeInstantSnapshotIterator(ctrl *gomock.Controller) *MockComputeInstantSnapshotIterator {
	mock := &MockComputeInstantSnapshotIterator{ctrl: ctrl}
	mock.recorder = &MockComputeInstantSnapshotIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstantSnapshotIterator) EXPECT() *MockComputeInstantSnapshotIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeInstantSnapshotIterator) Next() (*computepb.InstantSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.InstantSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeInstantSnapshotIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeInstantSnapshotIterator)(nil).Next))
}

// MockComputeInstantSnapshotsClient is a mock of ComputeInstantSnapshotsClient interface.
type MockComputeInstantSnapshotsClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeInstantSnapshotsClientMockRecorder
	isgomock struct{}
}

// MockComputeInstantSnapshotsClientMockRecorder is the mock recorder for MockComputeInstantSnapshotsClient.
type MockComputeInstantSnapshotsClientMockRecorder struct {
	mock *MockComputeInstantSnapshotsClient
}

// NewMockComputeInstantSnapshotsClient creates a new mock instance.
func NewMockComputeInstantSnapshotsClient(ctrl *gomock.Controller) *MockComputeInstantSnapshotsClient {
	mock := &MockComputeInstantSnapshotsClient{ctrl: ctrl}
	mock.recorder = &MockComputeInstantSnapshotsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeInstantSnapshotsClient) EXPECT() *MockComputeInstantSnapshotsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeInstantSnapshotsClient) Get(ctx context.Context, req *computepb.GetInstantSnapshotRequest, opts ...gax.CallOption) (*computepb.InstantSnapshot, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.InstantSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeInstantSnapshotsClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeInstantSnapshotsClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeInstantSnapshotsClient) List(ctx context.Context, req *computepb.ListInstantSnapshotsRequest, opts ...gax.CallOption) shared.ComputeInstantSnapshotIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeInstantSnapshotIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeInstantSnapshotsClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeInstantSnapshotsClient)(nil).List), varargs...)
}

// MockComputeDiskIterator is a mock of ComputeDiskIterator interface.
type MockComputeDiskIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeDiskIteratorMockRecorder
	isgomock struct{}
}

// MockComputeDiskIteratorMockRecorder is the mock recorder for MockComputeDiskIterator.
type MockComputeDiskIteratorMockRecorder struct {
	mock *MockComputeDiskIterator
}

// NewMockComputeDiskIterator creates a new mock instance.
func NewMockComputeDiskIterator(ctrl *gomock.Controller) *MockComputeDiskIterator {
	mock := &MockComputeDiskIterator{ctrl: ctrl}
	mock.recorder = &MockComputeDiskIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeDiskIterator) EXPECT() *MockComputeDiskIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeDiskIterator) Next() (*computepb.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeDiskIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeDiskIterator)(nil).Next))
}

// MockComputeDiskClient is a mock of ComputeDiskClient interface.
type MockComputeDiskClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeDiskClientMockRecorder
	isgomock struct{}
}

// MockComputeDiskClientMockRecorder is the mock recorder for MockComputeDiskClient.
type MockComputeDiskClientMockRecorder struct {
	mock *MockComputeDiskClient
}

// NewMockComputeDiskClient creates a new mock instance.
func NewMockComputeDiskClient(ctrl *gomock.Controller) *MockComputeDiskClient {
	mock := &MockComputeDiskClient{ctrl: ctrl}
	mock.recorder = &MockComputeDiskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeDiskClient) EXPECT() *MockComputeDiskClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeDiskClient) Get(ctx context.Context, req *computepb.GetDiskRequest, opts ...gax.CallOption) (*computepb.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeDiskClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeDiskClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeDiskClient) List(ctx context.Context, req *computepb.ListDisksRequest, opts ...gax.CallOption) shared.ComputeDiskIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeDiskIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeDiskClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeDiskClient)(nil).List), varargs...)
}

// MockComputeMachineImageIterator is a mock of ComputeMachineImageIterator interface.
type MockComputeMachineImageIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMachineImageIteratorMockRecorder
	isgomock struct{}
}

// MockComputeMachineImageIteratorMockRecorder is the mock recorder for MockComputeMachineImageIterator.
type MockComputeMachineImageIteratorMockRecorder struct {
	mock *MockComputeMachineImageIterator
}

// NewMockComputeMachineImageIterator creates a new mock instance.
func NewMockComputeMachineImageIterator(ctrl *gomock.Controller) *MockComputeMachineImageIterator {
	mock := &MockComputeMachineImageIterator{ctrl: ctrl}
	mock.recorder = &MockComputeMachineImageIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeMachineImageIterator) EXPECT() *MockComputeMachineImageIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeMachineImageIterator) Next() (*computepb.MachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeMachineImageIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeMachineImageIterator)(nil).Next))
}

// MockComputeMachineImageClient is a mock of ComputeMachineImageClient interface.
type MockComputeMachineImageClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMachineImageClientMockRecorder
	isgomock struct{}
}

// MockComputeMachineImageClientMockRecorder is the mock recorder for MockComputeMachineImageClient.
type MockComputeMachineImageClientMockRecorder struct {
	mock *MockComputeMachineImageClient
}

// NewMockComputeMachineImageClient creates a new mock instance.
func NewMockComputeMachineImageClient(ctrl *gomock.Controller) *MockComputeMachineImageClient {
	mock := &MockComputeMachineImageClient{ctrl: ctrl}
	mock.recorder = &MockComputeMachineImageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeMachineImageClient) EXPECT() *MockComputeMachineImageClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeMachineImageClient) Get(ctx context.Context, req *computepb.GetMachineImageRequest, opts ...gax.CallOption) (*computepb.MachineImage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.MachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeMachineImageClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeMachineImageClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeMachineImageClient) List(ctx context.Context, req *computepb.ListMachineImagesRequest, opts ...gax.CallOption) shared.ComputeMachineImageIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeMachineImageIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeMachineImageClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeMachineImageClient)(nil).List), varargs...)
}

// MockComputeSnapshotIterator is a mock of ComputeSnapshotIterator interface.
type MockComputeSnapshotIterator struct {
	ctrl     *gomock.Controller
	recorder *MockComputeSnapshotIteratorMockRecorder
	isgomock struct{}
}

// MockComputeSnapshotIteratorMockRecorder is the mock recorder for MockComputeSnapshotIterator.
type MockComputeSnapshotIteratorMockRecorder struct {
	mock *MockComputeSnapshotIterator
}

// NewMockComputeSnapshotIterator creates a new mock instance.
func NewMockComputeSnapshotIterator(ctrl *gomock.Controller) *MockComputeSnapshotIterator {
	mock := &MockComputeSnapshotIterator{ctrl: ctrl}
	mock.recorder = &MockComputeSnapshotIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeSnapshotIterator) EXPECT() *MockComputeSnapshotIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockComputeSnapshotIterator) Next() (*computepb.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*computepb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockComputeSnapshotIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockComputeSnapshotIterator)(nil).Next))
}

// MockComputeSnapshotsClient is a mock of ComputeSnapshotsClient interface.
type MockComputeSnapshotsClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeSnapshotsClientMockRecorder
	isgomock struct{}
}

// MockComputeSnapshotsClientMockRecorder is the mock recorder for MockComputeSnapshotsClient.
type MockComputeSnapshotsClientMockRecorder struct {
	mock *MockComputeSnapshotsClient
}

// NewMockComputeSnapshotsClient creates a new mock instance.
func NewMockComputeSnapshotsClient(ctrl *gomock.Controller) *MockComputeSnapshotsClient {
	mock := &MockComputeSnapshotsClient{ctrl: ctrl}
	mock.recorder = &MockComputeSnapshotsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeSnapshotsClient) EXPECT() *MockComputeSnapshotsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockComputeSnapshotsClient) Get(ctx context.Context, req *computepb.GetSnapshotRequest, opts ...gax.CallOption) (*computepb.Snapshot, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*computepb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockComputeSnapshotsClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComputeSnapshotsClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockComputeSnapshotsClient) List(ctx context.Context, req *computepb.ListSnapshotsRequest, opts ...gax.CallOption) shared.ComputeSnapshotIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(shared.ComputeSnapshotIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockComputeSnapshotsClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComputeSnapshotsClient)(nil).List), varargs...)
}
