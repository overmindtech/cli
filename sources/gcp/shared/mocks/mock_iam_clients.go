// Code generated by MockGen. DO NOT EDIT.
// Source: iam-clients.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_iam_clients.go -package=mocks -source=iam-clients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	adminpb "cloud.google.com/go/iam/admin/apiv1/adminpb"
	gax "github.com/googleapis/gax-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockIAMServiceAccountKeyClient is a mock of IAMServiceAccountKeyClient interface.
type MockIAMServiceAccountKeyClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAMServiceAccountKeyClientMockRecorder
	isgomock struct{}
}

// MockIAMServiceAccountKeyClientMockRecorder is the mock recorder for MockIAMServiceAccountKeyClient.
type MockIAMServiceAccountKeyClientMockRecorder struct {
	mock *MockIAMServiceAccountKeyClient
}

// NewMockIAMServiceAccountKeyClient creates a new mock instance.
func NewMockIAMServiceAccountKeyClient(ctrl *gomock.Controller) *MockIAMServiceAccountKeyClient {
	mock := &MockIAMServiceAccountKeyClient{ctrl: ctrl}
	mock.recorder = &MockIAMServiceAccountKeyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAMServiceAccountKeyClient) EXPECT() *MockIAMServiceAccountKeyClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIAMServiceAccountKeyClient) Get(ctx context.Context, req *adminpb.GetServiceAccountKeyRequest, opts ...gax.CallOption) (*adminpb.ServiceAccountKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*adminpb.ServiceAccountKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIAMServiceAccountKeyClientMockRecorder) Get(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAMServiceAccountKeyClient)(nil).Get), varargs...)
}

// Search mocks base method.
func (m *MockIAMServiceAccountKeyClient) Search(ctx context.Context, req *adminpb.ListServiceAccountKeysRequest, opts ...gax.CallOption) (*adminpb.ListServiceAccountKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*adminpb.ListServiceAccountKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockIAMServiceAccountKeyClientMockRecorder) Search(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIAMServiceAccountKeyClient)(nil).Search), varargs...)
}
