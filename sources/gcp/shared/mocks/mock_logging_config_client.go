// Code generated by MockGen. DO NOT EDIT.
// Source: logging-clients.go
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_logging_config_client.go -package=mocks -source=logging-clients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	loggingpb "cloud.google.com/go/logging/apiv2/loggingpb"
	shared "github.com/overmindtech/cli/sources/gcp/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockLoggingSinkIterator is a mock of LoggingSinkIterator interface.
type MockLoggingSinkIterator struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingSinkIteratorMockRecorder
	isgomock struct{}
}

// MockLoggingSinkIteratorMockRecorder is the mock recorder for MockLoggingSinkIterator.
type MockLoggingSinkIteratorMockRecorder struct {
	mock *MockLoggingSinkIterator
}

// NewMockLoggingSinkIterator creates a new mock instance.
func NewMockLoggingSinkIterator(ctrl *gomock.Controller) *MockLoggingSinkIterator {
	mock := &MockLoggingSinkIterator{ctrl: ctrl}
	mock.recorder = &MockLoggingSinkIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingSinkIterator) EXPECT() *MockLoggingSinkIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockLoggingSinkIterator) Next() (*loggingpb.LogSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*loggingpb.LogSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockLoggingSinkIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockLoggingSinkIterator)(nil).Next))
}

// MockLoggingConfigClient is a mock of LoggingConfigClient interface.
type MockLoggingConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingConfigClientMockRecorder
	isgomock struct{}
}

// MockLoggingConfigClientMockRecorder is the mock recorder for MockLoggingConfigClient.
type MockLoggingConfigClientMockRecorder struct {
	mock *MockLoggingConfigClient
}

// NewMockLoggingConfigClient creates a new mock instance.
func NewMockLoggingConfigClient(ctrl *gomock.Controller) *MockLoggingConfigClient {
	mock := &MockLoggingConfigClient{ctrl: ctrl}
	mock.recorder = &MockLoggingConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingConfigClient) EXPECT() *MockLoggingConfigClientMockRecorder {
	return m.recorder
}

// GetSink mocks base method.
func (m *MockLoggingConfigClient) GetSink(ctx context.Context, req *loggingpb.GetSinkRequest) (*loggingpb.LogSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSink", ctx, req)
	ret0, _ := ret[0].(*loggingpb.LogSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSink indicates an expected call of GetSink.
func (mr *MockLoggingConfigClientMockRecorder) GetSink(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSink", reflect.TypeOf((*MockLoggingConfigClient)(nil).GetSink), ctx, req)
}

// ListSinks mocks base method.
func (m *MockLoggingConfigClient) ListSinks(ctx context.Context, request *loggingpb.ListSinksRequest) shared.LoggingSinkIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSinks", ctx, request)
	ret0, _ := ret[0].(shared.LoggingSinkIterator)
	return ret0
}

// ListSinks indicates an expected call of ListSinks.
func (mr *MockLoggingConfigClientMockRecorder) ListSinks(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSinks", reflect.TypeOf((*MockLoggingConfigClient)(nil).ListSinks), ctx, request)
}
