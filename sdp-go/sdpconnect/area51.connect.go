// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: area51.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// Area51ServiceName is the fully-qualified name of the Area51Service service.
	Area51ServiceName = "area51.Area51Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// Area51ServiceGetChangeArchiveProcedure is the fully-qualified name of the Area51Service's
	// GetChangeArchive RPC.
	Area51ServiceGetChangeArchiveProcedure = "/area51.Area51Service/GetChangeArchive"
)

// Area51ServiceClient is a client for the area51.Area51Service service.
type Area51ServiceClient interface {
	// This is not implemented at all, it prevents javascript generation errors
	// we manually use the generated sdp objects in area51 service
	GetChangeArchive(context.Context, *connect.Request[sdp_go.GetChangeArchiveRequest]) (*connect.Response[sdp_go.GetChangeArchiveResponse], error)
}

// NewArea51ServiceClient constructs a client for the area51.Area51Service service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArea51ServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) Area51ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	area51ServiceMethods := sdp_go.File_area51_proto.Services().ByName("Area51Service").Methods()
	return &area51ServiceClient{
		getChangeArchive: connect.NewClient[sdp_go.GetChangeArchiveRequest, sdp_go.GetChangeArchiveResponse](
			httpClient,
			baseURL+Area51ServiceGetChangeArchiveProcedure,
			connect.WithSchema(area51ServiceMethods.ByName("GetChangeArchive")),
			connect.WithClientOptions(opts...),
		),
	}
}

// area51ServiceClient implements Area51ServiceClient.
type area51ServiceClient struct {
	getChangeArchive *connect.Client[sdp_go.GetChangeArchiveRequest, sdp_go.GetChangeArchiveResponse]
}

// GetChangeArchive calls area51.Area51Service.GetChangeArchive.
func (c *area51ServiceClient) GetChangeArchive(ctx context.Context, req *connect.Request[sdp_go.GetChangeArchiveRequest]) (*connect.Response[sdp_go.GetChangeArchiveResponse], error) {
	return c.getChangeArchive.CallUnary(ctx, req)
}

// Area51ServiceHandler is an implementation of the area51.Area51Service service.
type Area51ServiceHandler interface {
	// This is not implemented at all, it prevents javascript generation errors
	// we manually use the generated sdp objects in area51 service
	GetChangeArchive(context.Context, *connect.Request[sdp_go.GetChangeArchiveRequest]) (*connect.Response[sdp_go.GetChangeArchiveResponse], error)
}

// NewArea51ServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArea51ServiceHandler(svc Area51ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	area51ServiceMethods := sdp_go.File_area51_proto.Services().ByName("Area51Service").Methods()
	area51ServiceGetChangeArchiveHandler := connect.NewUnaryHandler(
		Area51ServiceGetChangeArchiveProcedure,
		svc.GetChangeArchive,
		connect.WithSchema(area51ServiceMethods.ByName("GetChangeArchive")),
		connect.WithHandlerOptions(opts...),
	)
	return "/area51.Area51Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case Area51ServiceGetChangeArchiveProcedure:
			area51ServiceGetChangeArchiveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArea51ServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArea51ServiceHandler struct{}

func (UnimplementedArea51ServiceHandler) GetChangeArchive(context.Context, *connect.Request[sdp_go.GetChangeArchiveRequest]) (*connect.Response[sdp_go.GetChangeArchiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("area51.Area51Service.GetChangeArchive is not implemented"))
}
