// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cli.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "cli.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceGetConfigProcedure is the fully-qualified name of the ConfigService's GetConfig RPC.
	ConfigServiceGetConfigProcedure = "/cli.ConfigService/GetConfig"
	// ConfigServiceSetConfigProcedure is the fully-qualified name of the ConfigService's SetConfig RPC.
	ConfigServiceSetConfigProcedure = "/cli.ConfigService/SetConfig"
)

// ConfigServiceClient is a client for the cli.ConfigService service.
type ConfigServiceClient interface {
	GetConfig(context.Context, *connect.Request[sdp_go.GetConfigRequest]) (*connect.Response[sdp_go.GetConfigResponse], error)
	SetConfig(context.Context, *connect.Request[sdp_go.SetConfigRequest]) (*connect.Response[sdp_go.SetConfigResponse], error)
}

// NewConfigServiceClient constructs a client for the cli.ConfigService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configServiceMethods := sdp_go.File_cli_proto.Services().ByName("ConfigService").Methods()
	return &configServiceClient{
		getConfig: connect.NewClient[sdp_go.GetConfigRequest, sdp_go.GetConfigResponse](
			httpClient,
			baseURL+ConfigServiceGetConfigProcedure,
			connect.WithSchema(configServiceMethods.ByName("GetConfig")),
			connect.WithClientOptions(opts...),
		),
		setConfig: connect.NewClient[sdp_go.SetConfigRequest, sdp_go.SetConfigResponse](
			httpClient,
			baseURL+ConfigServiceSetConfigProcedure,
			connect.WithSchema(configServiceMethods.ByName("SetConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	getConfig *connect.Client[sdp_go.GetConfigRequest, sdp_go.GetConfigResponse]
	setConfig *connect.Client[sdp_go.SetConfigRequest, sdp_go.SetConfigResponse]
}

// GetConfig calls cli.ConfigService.GetConfig.
func (c *configServiceClient) GetConfig(ctx context.Context, req *connect.Request[sdp_go.GetConfigRequest]) (*connect.Response[sdp_go.GetConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// SetConfig calls cli.ConfigService.SetConfig.
func (c *configServiceClient) SetConfig(ctx context.Context, req *connect.Request[sdp_go.SetConfigRequest]) (*connect.Response[sdp_go.SetConfigResponse], error) {
	return c.setConfig.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the cli.ConfigService service.
type ConfigServiceHandler interface {
	GetConfig(context.Context, *connect.Request[sdp_go.GetConfigRequest]) (*connect.Response[sdp_go.GetConfigResponse], error)
	SetConfig(context.Context, *connect.Request[sdp_go.SetConfigRequest]) (*connect.Response[sdp_go.SetConfigResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configServiceMethods := sdp_go.File_cli_proto.Services().ByName("ConfigService").Methods()
	configServiceGetConfigHandler := connect.NewUnaryHandler(
		ConfigServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(configServiceMethods.ByName("GetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configServiceSetConfigHandler := connect.NewUnaryHandler(
		ConfigServiceSetConfigProcedure,
		svc.SetConfig,
		connect.WithSchema(configServiceMethods.ByName("SetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cli.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceGetConfigProcedure:
			configServiceGetConfigHandler.ServeHTTP(w, r)
		case ConfigServiceSetConfigProcedure:
			configServiceSetConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) GetConfig(context.Context, *connect.Request[sdp_go.GetConfigRequest]) (*connect.Response[sdp_go.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cli.ConfigService.GetConfig is not implemented"))
}

func (UnimplementedConfigServiceHandler) SetConfig(context.Context, *connect.Request[sdp_go.SetConfigRequest]) (*connect.Response[sdp_go.SetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cli.ConfigService.SetConfig is not implemented"))
}
