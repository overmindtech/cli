// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: config.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigurationServiceName is the fully-qualified name of the ConfigurationService service.
	ConfigurationServiceName = "config.ConfigurationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigurationServiceGetAccountConfigProcedure is the fully-qualified name of the
	// ConfigurationService's GetAccountConfig RPC.
	ConfigurationServiceGetAccountConfigProcedure = "/config.ConfigurationService/GetAccountConfig"
	// ConfigurationServiceUpdateAccountConfigProcedure is the fully-qualified name of the
	// ConfigurationService's UpdateAccountConfig RPC.
	ConfigurationServiceUpdateAccountConfigProcedure = "/config.ConfigurationService/UpdateAccountConfig"
	// ConfigurationServiceCreateHcpConfigProcedure is the fully-qualified name of the
	// ConfigurationService's CreateHcpConfig RPC.
	ConfigurationServiceCreateHcpConfigProcedure = "/config.ConfigurationService/CreateHcpConfig"
	// ConfigurationServiceGetHcpConfigProcedure is the fully-qualified name of the
	// ConfigurationService's GetHcpConfig RPC.
	ConfigurationServiceGetHcpConfigProcedure = "/config.ConfigurationService/GetHcpConfig"
	// ConfigurationServiceDeleteHcpConfigProcedure is the fully-qualified name of the
	// ConfigurationService's DeleteHcpConfig RPC.
	ConfigurationServiceDeleteHcpConfigProcedure = "/config.ConfigurationService/DeleteHcpConfig"
	// ConfigurationServiceGetSignalConfigProcedure is the fully-qualified name of the
	// ConfigurationService's GetSignalConfig RPC.
	ConfigurationServiceGetSignalConfigProcedure = "/config.ConfigurationService/GetSignalConfig"
	// ConfigurationServiceUpdateSignalConfigProcedure is the fully-qualified name of the
	// ConfigurationService's UpdateSignalConfig RPC.
	ConfigurationServiceUpdateSignalConfigProcedure = "/config.ConfigurationService/UpdateSignalConfig"
	// ConfigurationServiceGetGithubAppInformationProcedure is the fully-qualified name of the
	// ConfigurationService's GetGithubAppInformation RPC.
	ConfigurationServiceGetGithubAppInformationProcedure = "/config.ConfigurationService/GetGithubAppInformation"
	// ConfigurationServiceRegenerateGithubAppProfileProcedure is the fully-qualified name of the
	// ConfigurationService's RegenerateGithubAppProfile RPC.
	ConfigurationServiceRegenerateGithubAppProfileProcedure = "/config.ConfigurationService/RegenerateGithubAppProfile"
	// ConfigurationServiceDeleteGithubAppProfileAndGithubInstallationIDProcedure is the fully-qualified
	// name of the ConfigurationService's DeleteGithubAppProfileAndGithubInstallationID RPC.
	ConfigurationServiceDeleteGithubAppProfileAndGithubInstallationIDProcedure = "/config.ConfigurationService/DeleteGithubAppProfileAndGithubInstallationID"
)

// ConfigurationServiceClient is a client for the config.ConfigurationService service.
type ConfigurationServiceClient interface {
	// Get the account config for the user's account
	GetAccountConfig(context.Context, *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error)
	// Update the account config for the user's account
	UpdateAccountConfig(context.Context, *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error)
	// Create a new HCP Terraform config for the user's account. This follows
	// the same flow as CreateAPIKey, to create a new API key that is then used
	// for the HCP Terraform endpoint URL.
	CreateHcpConfig(context.Context, *connect.Request[sdp_go.CreateHcpConfigRequest]) (*connect.Response[sdp_go.CreateHcpConfigResponse], error)
	// Get the existing HCP Terraform config for the user's account.
	GetHcpConfig(context.Context, *connect.Request[sdp_go.GetHcpConfigRequest]) (*connect.Response[sdp_go.GetHcpConfigResponse], error)
	// Remove the existing HCP Terraform config from the user's account.
	DeleteHcpConfig(context.Context, *connect.Request[sdp_go.DeleteHcpConfigRequest]) (*connect.Response[sdp_go.DeleteHcpConfigResponse], error)
	// Get the signal config for the account
	GetSignalConfig(context.Context, *connect.Request[sdp_go.GetSignalConfigRequest]) (*connect.Response[sdp_go.GetSignalConfigResponse], error)
	// Update the signal config for the account
	UpdateSignalConfig(context.Context, *connect.Request[sdp_go.UpdateSignalConfigRequest]) (*connect.Response[sdp_go.UpdateSignalConfigResponse], error)
	// Github app
	// we will be displaying app installation information for this account on the github integrations page
	GetGithubAppInformation(context.Context, *connect.Request[sdp_go.GetGithubAppInformationRequest]) (*connect.Response[sdp_go.GetGithubAppInformationResponse], error)
	// regenerate the github app profile, this information is used for signal processing
	RegenerateGithubAppProfile(context.Context, *connect.Request[sdp_go.RegenerateGithubAppProfileRequest]) (*connect.Response[sdp_go.RegenerateGithubAppProfileResponse], error)
	// remove the github app installation id and github organisation profile from the signal config
	// this will not uninstall the app from github, that must be done manually by the user
	DeleteGithubAppProfileAndGithubInstallationID(context.Context, *connect.Request[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDRequest]) (*connect.Response[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDResponse], error)
}

// NewConfigurationServiceClient constructs a client for the config.ConfigurationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigurationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configurationServiceMethods := sdp_go.File_config_proto.Services().ByName("ConfigurationService").Methods()
	return &configurationServiceClient{
		getAccountConfig: connect.NewClient[sdp_go.GetAccountConfigRequest, sdp_go.GetAccountConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceGetAccountConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("GetAccountConfig")),
			connect.WithClientOptions(opts...),
		),
		updateAccountConfig: connect.NewClient[sdp_go.UpdateAccountConfigRequest, sdp_go.UpdateAccountConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceUpdateAccountConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("UpdateAccountConfig")),
			connect.WithClientOptions(opts...),
		),
		createHcpConfig: connect.NewClient[sdp_go.CreateHcpConfigRequest, sdp_go.CreateHcpConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceCreateHcpConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("CreateHcpConfig")),
			connect.WithClientOptions(opts...),
		),
		getHcpConfig: connect.NewClient[sdp_go.GetHcpConfigRequest, sdp_go.GetHcpConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceGetHcpConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("GetHcpConfig")),
			connect.WithClientOptions(opts...),
		),
		deleteHcpConfig: connect.NewClient[sdp_go.DeleteHcpConfigRequest, sdp_go.DeleteHcpConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceDeleteHcpConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("DeleteHcpConfig")),
			connect.WithClientOptions(opts...),
		),
		getSignalConfig: connect.NewClient[sdp_go.GetSignalConfigRequest, sdp_go.GetSignalConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceGetSignalConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("GetSignalConfig")),
			connect.WithClientOptions(opts...),
		),
		updateSignalConfig: connect.NewClient[sdp_go.UpdateSignalConfigRequest, sdp_go.UpdateSignalConfigResponse](
			httpClient,
			baseURL+ConfigurationServiceUpdateSignalConfigProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("UpdateSignalConfig")),
			connect.WithClientOptions(opts...),
		),
		getGithubAppInformation: connect.NewClient[sdp_go.GetGithubAppInformationRequest, sdp_go.GetGithubAppInformationResponse](
			httpClient,
			baseURL+ConfigurationServiceGetGithubAppInformationProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("GetGithubAppInformation")),
			connect.WithClientOptions(opts...),
		),
		regenerateGithubAppProfile: connect.NewClient[sdp_go.RegenerateGithubAppProfileRequest, sdp_go.RegenerateGithubAppProfileResponse](
			httpClient,
			baseURL+ConfigurationServiceRegenerateGithubAppProfileProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("RegenerateGithubAppProfile")),
			connect.WithClientOptions(opts...),
		),
		deleteGithubAppProfileAndGithubInstallationID: connect.NewClient[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDRequest, sdp_go.DeleteGithubAppProfileAndGithubInstallationIDResponse](
			httpClient,
			baseURL+ConfigurationServiceDeleteGithubAppProfileAndGithubInstallationIDProcedure,
			connect.WithSchema(configurationServiceMethods.ByName("DeleteGithubAppProfileAndGithubInstallationID")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configurationServiceClient implements ConfigurationServiceClient.
type configurationServiceClient struct {
	getAccountConfig                              *connect.Client[sdp_go.GetAccountConfigRequest, sdp_go.GetAccountConfigResponse]
	updateAccountConfig                           *connect.Client[sdp_go.UpdateAccountConfigRequest, sdp_go.UpdateAccountConfigResponse]
	createHcpConfig                               *connect.Client[sdp_go.CreateHcpConfigRequest, sdp_go.CreateHcpConfigResponse]
	getHcpConfig                                  *connect.Client[sdp_go.GetHcpConfigRequest, sdp_go.GetHcpConfigResponse]
	deleteHcpConfig                               *connect.Client[sdp_go.DeleteHcpConfigRequest, sdp_go.DeleteHcpConfigResponse]
	getSignalConfig                               *connect.Client[sdp_go.GetSignalConfigRequest, sdp_go.GetSignalConfigResponse]
	updateSignalConfig                            *connect.Client[sdp_go.UpdateSignalConfigRequest, sdp_go.UpdateSignalConfigResponse]
	getGithubAppInformation                       *connect.Client[sdp_go.GetGithubAppInformationRequest, sdp_go.GetGithubAppInformationResponse]
	regenerateGithubAppProfile                    *connect.Client[sdp_go.RegenerateGithubAppProfileRequest, sdp_go.RegenerateGithubAppProfileResponse]
	deleteGithubAppProfileAndGithubInstallationID *connect.Client[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDRequest, sdp_go.DeleteGithubAppProfileAndGithubInstallationIDResponse]
}

// GetAccountConfig calls config.ConfigurationService.GetAccountConfig.
func (c *configurationServiceClient) GetAccountConfig(ctx context.Context, req *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error) {
	return c.getAccountConfig.CallUnary(ctx, req)
}

// UpdateAccountConfig calls config.ConfigurationService.UpdateAccountConfig.
func (c *configurationServiceClient) UpdateAccountConfig(ctx context.Context, req *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error) {
	return c.updateAccountConfig.CallUnary(ctx, req)
}

// CreateHcpConfig calls config.ConfigurationService.CreateHcpConfig.
func (c *configurationServiceClient) CreateHcpConfig(ctx context.Context, req *connect.Request[sdp_go.CreateHcpConfigRequest]) (*connect.Response[sdp_go.CreateHcpConfigResponse], error) {
	return c.createHcpConfig.CallUnary(ctx, req)
}

// GetHcpConfig calls config.ConfigurationService.GetHcpConfig.
func (c *configurationServiceClient) GetHcpConfig(ctx context.Context, req *connect.Request[sdp_go.GetHcpConfigRequest]) (*connect.Response[sdp_go.GetHcpConfigResponse], error) {
	return c.getHcpConfig.CallUnary(ctx, req)
}

// DeleteHcpConfig calls config.ConfigurationService.DeleteHcpConfig.
func (c *configurationServiceClient) DeleteHcpConfig(ctx context.Context, req *connect.Request[sdp_go.DeleteHcpConfigRequest]) (*connect.Response[sdp_go.DeleteHcpConfigResponse], error) {
	return c.deleteHcpConfig.CallUnary(ctx, req)
}

// GetSignalConfig calls config.ConfigurationService.GetSignalConfig.
func (c *configurationServiceClient) GetSignalConfig(ctx context.Context, req *connect.Request[sdp_go.GetSignalConfigRequest]) (*connect.Response[sdp_go.GetSignalConfigResponse], error) {
	return c.getSignalConfig.CallUnary(ctx, req)
}

// UpdateSignalConfig calls config.ConfigurationService.UpdateSignalConfig.
func (c *configurationServiceClient) UpdateSignalConfig(ctx context.Context, req *connect.Request[sdp_go.UpdateSignalConfigRequest]) (*connect.Response[sdp_go.UpdateSignalConfigResponse], error) {
	return c.updateSignalConfig.CallUnary(ctx, req)
}

// GetGithubAppInformation calls config.ConfigurationService.GetGithubAppInformation.
func (c *configurationServiceClient) GetGithubAppInformation(ctx context.Context, req *connect.Request[sdp_go.GetGithubAppInformationRequest]) (*connect.Response[sdp_go.GetGithubAppInformationResponse], error) {
	return c.getGithubAppInformation.CallUnary(ctx, req)
}

// RegenerateGithubAppProfile calls config.ConfigurationService.RegenerateGithubAppProfile.
func (c *configurationServiceClient) RegenerateGithubAppProfile(ctx context.Context, req *connect.Request[sdp_go.RegenerateGithubAppProfileRequest]) (*connect.Response[sdp_go.RegenerateGithubAppProfileResponse], error) {
	return c.regenerateGithubAppProfile.CallUnary(ctx, req)
}

// DeleteGithubAppProfileAndGithubInstallationID calls
// config.ConfigurationService.DeleteGithubAppProfileAndGithubInstallationID.
func (c *configurationServiceClient) DeleteGithubAppProfileAndGithubInstallationID(ctx context.Context, req *connect.Request[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDRequest]) (*connect.Response[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDResponse], error) {
	return c.deleteGithubAppProfileAndGithubInstallationID.CallUnary(ctx, req)
}

// ConfigurationServiceHandler is an implementation of the config.ConfigurationService service.
type ConfigurationServiceHandler interface {
	// Get the account config for the user's account
	GetAccountConfig(context.Context, *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error)
	// Update the account config for the user's account
	UpdateAccountConfig(context.Context, *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error)
	// Create a new HCP Terraform config for the user's account. This follows
	// the same flow as CreateAPIKey, to create a new API key that is then used
	// for the HCP Terraform endpoint URL.
	CreateHcpConfig(context.Context, *connect.Request[sdp_go.CreateHcpConfigRequest]) (*connect.Response[sdp_go.CreateHcpConfigResponse], error)
	// Get the existing HCP Terraform config for the user's account.
	GetHcpConfig(context.Context, *connect.Request[sdp_go.GetHcpConfigRequest]) (*connect.Response[sdp_go.GetHcpConfigResponse], error)
	// Remove the existing HCP Terraform config from the user's account.
	DeleteHcpConfig(context.Context, *connect.Request[sdp_go.DeleteHcpConfigRequest]) (*connect.Response[sdp_go.DeleteHcpConfigResponse], error)
	// Get the signal config for the account
	GetSignalConfig(context.Context, *connect.Request[sdp_go.GetSignalConfigRequest]) (*connect.Response[sdp_go.GetSignalConfigResponse], error)
	// Update the signal config for the account
	UpdateSignalConfig(context.Context, *connect.Request[sdp_go.UpdateSignalConfigRequest]) (*connect.Response[sdp_go.UpdateSignalConfigResponse], error)
	// Github app
	// we will be displaying app installation information for this account on the github integrations page
	GetGithubAppInformation(context.Context, *connect.Request[sdp_go.GetGithubAppInformationRequest]) (*connect.Response[sdp_go.GetGithubAppInformationResponse], error)
	// regenerate the github app profile, this information is used for signal processing
	RegenerateGithubAppProfile(context.Context, *connect.Request[sdp_go.RegenerateGithubAppProfileRequest]) (*connect.Response[sdp_go.RegenerateGithubAppProfileResponse], error)
	// remove the github app installation id and github organisation profile from the signal config
	// this will not uninstall the app from github, that must be done manually by the user
	DeleteGithubAppProfileAndGithubInstallationID(context.Context, *connect.Request[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDRequest]) (*connect.Response[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDResponse], error)
}

// NewConfigurationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigurationServiceHandler(svc ConfigurationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configurationServiceMethods := sdp_go.File_config_proto.Services().ByName("ConfigurationService").Methods()
	configurationServiceGetAccountConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceGetAccountConfigProcedure,
		svc.GetAccountConfig,
		connect.WithSchema(configurationServiceMethods.ByName("GetAccountConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceUpdateAccountConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceUpdateAccountConfigProcedure,
		svc.UpdateAccountConfig,
		connect.WithSchema(configurationServiceMethods.ByName("UpdateAccountConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceCreateHcpConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceCreateHcpConfigProcedure,
		svc.CreateHcpConfig,
		connect.WithSchema(configurationServiceMethods.ByName("CreateHcpConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceGetHcpConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceGetHcpConfigProcedure,
		svc.GetHcpConfig,
		connect.WithSchema(configurationServiceMethods.ByName("GetHcpConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceDeleteHcpConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceDeleteHcpConfigProcedure,
		svc.DeleteHcpConfig,
		connect.WithSchema(configurationServiceMethods.ByName("DeleteHcpConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceGetSignalConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceGetSignalConfigProcedure,
		svc.GetSignalConfig,
		connect.WithSchema(configurationServiceMethods.ByName("GetSignalConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceUpdateSignalConfigHandler := connect.NewUnaryHandler(
		ConfigurationServiceUpdateSignalConfigProcedure,
		svc.UpdateSignalConfig,
		connect.WithSchema(configurationServiceMethods.ByName("UpdateSignalConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceGetGithubAppInformationHandler := connect.NewUnaryHandler(
		ConfigurationServiceGetGithubAppInformationProcedure,
		svc.GetGithubAppInformation,
		connect.WithSchema(configurationServiceMethods.ByName("GetGithubAppInformation")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceRegenerateGithubAppProfileHandler := connect.NewUnaryHandler(
		ConfigurationServiceRegenerateGithubAppProfileProcedure,
		svc.RegenerateGithubAppProfile,
		connect.WithSchema(configurationServiceMethods.ByName("RegenerateGithubAppProfile")),
		connect.WithHandlerOptions(opts...),
	)
	configurationServiceDeleteGithubAppProfileAndGithubInstallationIDHandler := connect.NewUnaryHandler(
		ConfigurationServiceDeleteGithubAppProfileAndGithubInstallationIDProcedure,
		svc.DeleteGithubAppProfileAndGithubInstallationID,
		connect.WithSchema(configurationServiceMethods.ByName("DeleteGithubAppProfileAndGithubInstallationID")),
		connect.WithHandlerOptions(opts...),
	)
	return "/config.ConfigurationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigurationServiceGetAccountConfigProcedure:
			configurationServiceGetAccountConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceUpdateAccountConfigProcedure:
			configurationServiceUpdateAccountConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceCreateHcpConfigProcedure:
			configurationServiceCreateHcpConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceGetHcpConfigProcedure:
			configurationServiceGetHcpConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceDeleteHcpConfigProcedure:
			configurationServiceDeleteHcpConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceGetSignalConfigProcedure:
			configurationServiceGetSignalConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceUpdateSignalConfigProcedure:
			configurationServiceUpdateSignalConfigHandler.ServeHTTP(w, r)
		case ConfigurationServiceGetGithubAppInformationProcedure:
			configurationServiceGetGithubAppInformationHandler.ServeHTTP(w, r)
		case ConfigurationServiceRegenerateGithubAppProfileProcedure:
			configurationServiceRegenerateGithubAppProfileHandler.ServeHTTP(w, r)
		case ConfigurationServiceDeleteGithubAppProfileAndGithubInstallationIDProcedure:
			configurationServiceDeleteGithubAppProfileAndGithubInstallationIDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigurationServiceHandler struct{}

func (UnimplementedConfigurationServiceHandler) GetAccountConfig(context.Context, *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.GetAccountConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) UpdateAccountConfig(context.Context, *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.UpdateAccountConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) CreateHcpConfig(context.Context, *connect.Request[sdp_go.CreateHcpConfigRequest]) (*connect.Response[sdp_go.CreateHcpConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.CreateHcpConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) GetHcpConfig(context.Context, *connect.Request[sdp_go.GetHcpConfigRequest]) (*connect.Response[sdp_go.GetHcpConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.GetHcpConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) DeleteHcpConfig(context.Context, *connect.Request[sdp_go.DeleteHcpConfigRequest]) (*connect.Response[sdp_go.DeleteHcpConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.DeleteHcpConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) GetSignalConfig(context.Context, *connect.Request[sdp_go.GetSignalConfigRequest]) (*connect.Response[sdp_go.GetSignalConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.GetSignalConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) UpdateSignalConfig(context.Context, *connect.Request[sdp_go.UpdateSignalConfigRequest]) (*connect.Response[sdp_go.UpdateSignalConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.UpdateSignalConfig is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) GetGithubAppInformation(context.Context, *connect.Request[sdp_go.GetGithubAppInformationRequest]) (*connect.Response[sdp_go.GetGithubAppInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.GetGithubAppInformation is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) RegenerateGithubAppProfile(context.Context, *connect.Request[sdp_go.RegenerateGithubAppProfileRequest]) (*connect.Response[sdp_go.RegenerateGithubAppProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.RegenerateGithubAppProfile is not implemented"))
}

func (UnimplementedConfigurationServiceHandler) DeleteGithubAppProfileAndGithubInstallationID(context.Context, *connect.Request[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDRequest]) (*connect.Response[sdp_go.DeleteGithubAppProfileAndGithubInstallationIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigurationService.DeleteGithubAppProfileAndGithubInstallationID is not implemented"))
}
