// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: changes.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChangesServiceName is the fully-qualified name of the ChangesService service.
	ChangesServiceName = "changes.ChangesService"
	// AutoTaggingServiceName is the fully-qualified name of the AutoTaggingService service.
	AutoTaggingServiceName = "changes.AutoTaggingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChangesServiceListChangesProcedure is the fully-qualified name of the ChangesService's
	// ListChanges RPC.
	ChangesServiceListChangesProcedure = "/changes.ChangesService/ListChanges"
	// ChangesServiceListChangesByStatusProcedure is the fully-qualified name of the ChangesService's
	// ListChangesByStatus RPC.
	ChangesServiceListChangesByStatusProcedure = "/changes.ChangesService/ListChangesByStatus"
	// ChangesServiceCreateChangeProcedure is the fully-qualified name of the ChangesService's
	// CreateChange RPC.
	ChangesServiceCreateChangeProcedure = "/changes.ChangesService/CreateChange"
	// ChangesServiceGetChangeProcedure is the fully-qualified name of the ChangesService's GetChange
	// RPC.
	ChangesServiceGetChangeProcedure = "/changes.ChangesService/GetChange"
	// ChangesServiceGetChangeByTicketLinkProcedure is the fully-qualified name of the ChangesService's
	// GetChangeByTicketLink RPC.
	ChangesServiceGetChangeByTicketLinkProcedure = "/changes.ChangesService/GetChangeByTicketLink"
	// ChangesServiceGetChangeSummaryProcedure is the fully-qualified name of the ChangesService's
	// GetChangeSummary RPC.
	ChangesServiceGetChangeSummaryProcedure = "/changes.ChangesService/GetChangeSummary"
	// ChangesServiceGetChangeTimelineV2Procedure is the fully-qualified name of the ChangesService's
	// GetChangeTimelineV2 RPC.
	ChangesServiceGetChangeTimelineV2Procedure = "/changes.ChangesService/GetChangeTimelineV2"
	// ChangesServiceGetChangeRisksProcedure is the fully-qualified name of the ChangesService's
	// GetChangeRisks RPC.
	ChangesServiceGetChangeRisksProcedure = "/changes.ChangesService/GetChangeRisks"
	// ChangesServiceUpdateChangeProcedure is the fully-qualified name of the ChangesService's
	// UpdateChange RPC.
	ChangesServiceUpdateChangeProcedure = "/changes.ChangesService/UpdateChange"
	// ChangesServiceDeleteChangeProcedure is the fully-qualified name of the ChangesService's
	// DeleteChange RPC.
	ChangesServiceDeleteChangeProcedure = "/changes.ChangesService/DeleteChange"
	// ChangesServiceListChangesBySnapshotUUIDProcedure is the fully-qualified name of the
	// ChangesService's ListChangesBySnapshotUUID RPC.
	ChangesServiceListChangesBySnapshotUUIDProcedure = "/changes.ChangesService/ListChangesBySnapshotUUID"
	// ChangesServiceRefreshStateProcedure is the fully-qualified name of the ChangesService's
	// RefreshState RPC.
	ChangesServiceRefreshStateProcedure = "/changes.ChangesService/RefreshState"
	// ChangesServiceStartChangeProcedure is the fully-qualified name of the ChangesService's
	// StartChange RPC.
	ChangesServiceStartChangeProcedure = "/changes.ChangesService/StartChange"
	// ChangesServiceEndChangeProcedure is the fully-qualified name of the ChangesService's EndChange
	// RPC.
	ChangesServiceEndChangeProcedure = "/changes.ChangesService/EndChange"
	// ChangesServiceListHomeChangesProcedure is the fully-qualified name of the ChangesService's
	// ListHomeChanges RPC.
	ChangesServiceListHomeChangesProcedure = "/changes.ChangesService/ListHomeChanges"
	// ChangesServiceStartChangeAnalysisProcedure is the fully-qualified name of the ChangesService's
	// StartChangeAnalysis RPC.
	ChangesServiceStartChangeAnalysisProcedure = "/changes.ChangesService/StartChangeAnalysis"
	// ChangesServiceListChangingItemsSummaryProcedure is the fully-qualified name of the
	// ChangesService's ListChangingItemsSummary RPC.
	ChangesServiceListChangingItemsSummaryProcedure = "/changes.ChangesService/ListChangingItemsSummary"
	// ChangesServiceGetDiffProcedure is the fully-qualified name of the ChangesService's GetDiff RPC.
	ChangesServiceGetDiffProcedure = "/changes.ChangesService/GetDiff"
	// ChangesServicePopulateChangeFiltersProcedure is the fully-qualified name of the ChangesService's
	// PopulateChangeFilters RPC.
	ChangesServicePopulateChangeFiltersProcedure = "/changes.ChangesService/PopulateChangeFilters"
	// AutoTaggingServiceListRulesProcedure is the fully-qualified name of the AutoTaggingService's
	// ListRules RPC.
	AutoTaggingServiceListRulesProcedure = "/changes.AutoTaggingService/ListRules"
	// AutoTaggingServiceCreateRuleProcedure is the fully-qualified name of the AutoTaggingService's
	// CreateRule RPC.
	AutoTaggingServiceCreateRuleProcedure = "/changes.AutoTaggingService/CreateRule"
	// AutoTaggingServiceGetRuleProcedure is the fully-qualified name of the AutoTaggingService's
	// GetRule RPC.
	AutoTaggingServiceGetRuleProcedure = "/changes.AutoTaggingService/GetRule"
	// AutoTaggingServiceUpdateRuleProcedure is the fully-qualified name of the AutoTaggingService's
	// UpdateRule RPC.
	AutoTaggingServiceUpdateRuleProcedure = "/changes.AutoTaggingService/UpdateRule"
	// AutoTaggingServiceDeleteRuleProcedure is the fully-qualified name of the AutoTaggingService's
	// DeleteRule RPC.
	AutoTaggingServiceDeleteRuleProcedure = "/changes.AutoTaggingService/DeleteRule"
	// AutoTaggingServiceExportRuleProcedure is the fully-qualified name of the AutoTaggingService's
	// ExportRule RPC.
	AutoTaggingServiceExportRuleProcedure = "/changes.AutoTaggingService/ExportRule"
	// AutoTaggingServiceTestRuleProcedure is the fully-qualified name of the AutoTaggingService's
	// TestRule RPC.
	AutoTaggingServiceTestRuleProcedure = "/changes.AutoTaggingService/TestRule"
)

// ChangesServiceClient is a client for the changes.ChangesService service.
type ChangesServiceClient interface {
	// Lists all changes
	ListChanges(context.Context, *connect.Request[sdp_go.ListChangesRequest]) (*connect.Response[sdp_go.ListChangesResponse], error)
	// list all changes in a specific status
	ListChangesByStatus(context.Context, *connect.Request[sdp_go.ListChangesByStatusRequest]) (*connect.Response[sdp_go.ListChangesByStatusResponse], error)
	// Creates a new change
	CreateChange(context.Context, *connect.Request[sdp_go.CreateChangeRequest]) (*connect.Response[sdp_go.CreateChangeResponse], error)
	// Gets the details of an existing change
	GetChange(context.Context, *connect.Request[sdp_go.GetChangeRequest]) (*connect.Response[sdp_go.GetChangeResponse], error)
	// Get a change by the ticket link
	GetChangeByTicketLink(context.Context, *connect.Request[sdp_go.GetChangeByTicketLinkRequest]) (*connect.Response[sdp_go.GetChangeResponse], error)
	// Gets the details of an existing change in markdown format
	GetChangeSummary(context.Context, *connect.Request[sdp_go.GetChangeSummaryRequest]) (*connect.Response[sdp_go.GetChangeSummaryResponse], error)
	// Gets the full timeline for this change, this will send one response
	// immediately and then hold the connection open, and send the entire
	// timeline again if there are any changes
	GetChangeTimelineV2(context.Context, *connect.Request[sdp_go.GetChangeTimelineV2Request]) (*connect.Response[sdp_go.GetChangeTimelineV2Response], error)
	// This is used on the blast radius page to get the risks and status for a change.
	GetChangeRisks(context.Context, *connect.Request[sdp_go.GetChangeRisksRequest]) (*connect.Response[sdp_go.GetChangeRisksResponse], error)
	// Updates an existing change
	UpdateChange(context.Context, *connect.Request[sdp_go.UpdateChangeRequest]) (*connect.Response[sdp_go.UpdateChangeResponse], error)
	// Deletes a change
	DeleteChange(context.Context, *connect.Request[sdp_go.DeleteChangeRequest]) (*connect.Response[sdp_go.DeleteChangeResponse], error)
	// Lists all changes for a snapshot UUID
	ListChangesBySnapshotUUID(context.Context, *connect.Request[sdp_go.ListChangesBySnapshotUUIDRequest]) (*connect.Response[sdp_go.ListChangesBySnapshotUUIDResponse], error)
	// Ask the gateway to refresh all internal caches and status slots
	// The RPC will return immediately doing all processing in the background
	RefreshState(context.Context, *connect.Request[sdp_go.RefreshStateRequest]) (*connect.Response[sdp_go.RefreshStateResponse], error)
	// Executing this RPC take a snapshot of the current blast radius and store it
	// in `systemBeforeSnapshotUUID` and then advance the status to
	// `STATUS_HAPPENING`. It can only be called once per change.
	StartChange(context.Context, *connect.Request[sdp_go.StartChangeRequest]) (*connect.ServerStreamForClient[sdp_go.StartChangeResponse], error)
	// Takes the "after" snapshot, stores it in `systemAfterSnapshotUUID`, calculates
	// the change diff and stores it as a list of DiffedItems and
	// advances the change status to `STATUS_DONE`
	EndChange(context.Context, *connect.Request[sdp_go.EndChangeRequest]) (*connect.ServerStreamForClient[sdp_go.EndChangeResponse], error)
	// Lists all changes, designed for use in the changes home page
	ListHomeChanges(context.Context, *connect.Request[sdp_go.ListHomeChangesRequest]) (*connect.Response[sdp_go.ListHomeChangesResponse], error)
	// Start the change analysis process. This will calculate various things
	// blast radius, risks, auto-tagging etc. This will return immediately and
	// the results can be fetched using the other RPCs
	StartChangeAnalysis(context.Context, *connect.Request[sdp_go.StartChangeAnalysisRequest]) (*connect.Response[sdp_go.StartChangeAnalysisResponse], error)
	// Gets the diff summary for all items that were planned to change as part of
	// this change. This includes the high level details of the item, and the
	// status (e.g. changed, deleted) but not the diff itself
	ListChangingItemsSummary(context.Context, *connect.Request[sdp_go.ListChangingItemsSummaryRequest]) (*connect.Response[sdp_go.ListChangingItemsSummaryResponse], error)
	// Gets the full diff of everything that changed as part of this "change".
	// This includes all items and also edges between them
	GetDiff(context.Context, *connect.Request[sdp_go.GetDiffRequest]) (*connect.Response[sdp_go.GetDiffResponse], error)
	// List all the available repos, authors and statuses that can be used to populate the dropdown filters
	PopulateChangeFilters(context.Context, *connect.Request[sdp_go.PopulateChangeFiltersRequest]) (*connect.Response[sdp_go.PopulateChangeFiltersResponse], error)
}

// NewChangesServiceClient constructs a client for the changes.ChangesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChangesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChangesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	changesServiceMethods := sdp_go.File_changes_proto.Services().ByName("ChangesService").Methods()
	return &changesServiceClient{
		listChanges: connect.NewClient[sdp_go.ListChangesRequest, sdp_go.ListChangesResponse](
			httpClient,
			baseURL+ChangesServiceListChangesProcedure,
			connect.WithSchema(changesServiceMethods.ByName("ListChanges")),
			connect.WithClientOptions(opts...),
		),
		listChangesByStatus: connect.NewClient[sdp_go.ListChangesByStatusRequest, sdp_go.ListChangesByStatusResponse](
			httpClient,
			baseURL+ChangesServiceListChangesByStatusProcedure,
			connect.WithSchema(changesServiceMethods.ByName("ListChangesByStatus")),
			connect.WithClientOptions(opts...),
		),
		createChange: connect.NewClient[sdp_go.CreateChangeRequest, sdp_go.CreateChangeResponse](
			httpClient,
			baseURL+ChangesServiceCreateChangeProcedure,
			connect.WithSchema(changesServiceMethods.ByName("CreateChange")),
			connect.WithClientOptions(opts...),
		),
		getChange: connect.NewClient[sdp_go.GetChangeRequest, sdp_go.GetChangeResponse](
			httpClient,
			baseURL+ChangesServiceGetChangeProcedure,
			connect.WithSchema(changesServiceMethods.ByName("GetChange")),
			connect.WithClientOptions(opts...),
		),
		getChangeByTicketLink: connect.NewClient[sdp_go.GetChangeByTicketLinkRequest, sdp_go.GetChangeResponse](
			httpClient,
			baseURL+ChangesServiceGetChangeByTicketLinkProcedure,
			connect.WithSchema(changesServiceMethods.ByName("GetChangeByTicketLink")),
			connect.WithClientOptions(opts...),
		),
		getChangeSummary: connect.NewClient[sdp_go.GetChangeSummaryRequest, sdp_go.GetChangeSummaryResponse](
			httpClient,
			baseURL+ChangesServiceGetChangeSummaryProcedure,
			connect.WithSchema(changesServiceMethods.ByName("GetChangeSummary")),
			connect.WithClientOptions(opts...),
		),
		getChangeTimelineV2: connect.NewClient[sdp_go.GetChangeTimelineV2Request, sdp_go.GetChangeTimelineV2Response](
			httpClient,
			baseURL+ChangesServiceGetChangeTimelineV2Procedure,
			connect.WithSchema(changesServiceMethods.ByName("GetChangeTimelineV2")),
			connect.WithClientOptions(opts...),
		),
		getChangeRisks: connect.NewClient[sdp_go.GetChangeRisksRequest, sdp_go.GetChangeRisksResponse](
			httpClient,
			baseURL+ChangesServiceGetChangeRisksProcedure,
			connect.WithSchema(changesServiceMethods.ByName("GetChangeRisks")),
			connect.WithClientOptions(opts...),
		),
		updateChange: connect.NewClient[sdp_go.UpdateChangeRequest, sdp_go.UpdateChangeResponse](
			httpClient,
			baseURL+ChangesServiceUpdateChangeProcedure,
			connect.WithSchema(changesServiceMethods.ByName("UpdateChange")),
			connect.WithClientOptions(opts...),
		),
		deleteChange: connect.NewClient[sdp_go.DeleteChangeRequest, sdp_go.DeleteChangeResponse](
			httpClient,
			baseURL+ChangesServiceDeleteChangeProcedure,
			connect.WithSchema(changesServiceMethods.ByName("DeleteChange")),
			connect.WithClientOptions(opts...),
		),
		listChangesBySnapshotUUID: connect.NewClient[sdp_go.ListChangesBySnapshotUUIDRequest, sdp_go.ListChangesBySnapshotUUIDResponse](
			httpClient,
			baseURL+ChangesServiceListChangesBySnapshotUUIDProcedure,
			connect.WithSchema(changesServiceMethods.ByName("ListChangesBySnapshotUUID")),
			connect.WithClientOptions(opts...),
		),
		refreshState: connect.NewClient[sdp_go.RefreshStateRequest, sdp_go.RefreshStateResponse](
			httpClient,
			baseURL+ChangesServiceRefreshStateProcedure,
			connect.WithSchema(changesServiceMethods.ByName("RefreshState")),
			connect.WithClientOptions(opts...),
		),
		startChange: connect.NewClient[sdp_go.StartChangeRequest, sdp_go.StartChangeResponse](
			httpClient,
			baseURL+ChangesServiceStartChangeProcedure,
			connect.WithSchema(changesServiceMethods.ByName("StartChange")),
			connect.WithClientOptions(opts...),
		),
		endChange: connect.NewClient[sdp_go.EndChangeRequest, sdp_go.EndChangeResponse](
			httpClient,
			baseURL+ChangesServiceEndChangeProcedure,
			connect.WithSchema(changesServiceMethods.ByName("EndChange")),
			connect.WithClientOptions(opts...),
		),
		listHomeChanges: connect.NewClient[sdp_go.ListHomeChangesRequest, sdp_go.ListHomeChangesResponse](
			httpClient,
			baseURL+ChangesServiceListHomeChangesProcedure,
			connect.WithSchema(changesServiceMethods.ByName("ListHomeChanges")),
			connect.WithClientOptions(opts...),
		),
		startChangeAnalysis: connect.NewClient[sdp_go.StartChangeAnalysisRequest, sdp_go.StartChangeAnalysisResponse](
			httpClient,
			baseURL+ChangesServiceStartChangeAnalysisProcedure,
			connect.WithSchema(changesServiceMethods.ByName("StartChangeAnalysis")),
			connect.WithClientOptions(opts...),
		),
		listChangingItemsSummary: connect.NewClient[sdp_go.ListChangingItemsSummaryRequest, sdp_go.ListChangingItemsSummaryResponse](
			httpClient,
			baseURL+ChangesServiceListChangingItemsSummaryProcedure,
			connect.WithSchema(changesServiceMethods.ByName("ListChangingItemsSummary")),
			connect.WithClientOptions(opts...),
		),
		getDiff: connect.NewClient[sdp_go.GetDiffRequest, sdp_go.GetDiffResponse](
			httpClient,
			baseURL+ChangesServiceGetDiffProcedure,
			connect.WithSchema(changesServiceMethods.ByName("GetDiff")),
			connect.WithClientOptions(opts...),
		),
		populateChangeFilters: connect.NewClient[sdp_go.PopulateChangeFiltersRequest, sdp_go.PopulateChangeFiltersResponse](
			httpClient,
			baseURL+ChangesServicePopulateChangeFiltersProcedure,
			connect.WithSchema(changesServiceMethods.ByName("PopulateChangeFilters")),
			connect.WithClientOptions(opts...),
		),
	}
}

// changesServiceClient implements ChangesServiceClient.
type changesServiceClient struct {
	listChanges               *connect.Client[sdp_go.ListChangesRequest, sdp_go.ListChangesResponse]
	listChangesByStatus       *connect.Client[sdp_go.ListChangesByStatusRequest, sdp_go.ListChangesByStatusResponse]
	createChange              *connect.Client[sdp_go.CreateChangeRequest, sdp_go.CreateChangeResponse]
	getChange                 *connect.Client[sdp_go.GetChangeRequest, sdp_go.GetChangeResponse]
	getChangeByTicketLink     *connect.Client[sdp_go.GetChangeByTicketLinkRequest, sdp_go.GetChangeResponse]
	getChangeSummary          *connect.Client[sdp_go.GetChangeSummaryRequest, sdp_go.GetChangeSummaryResponse]
	getChangeTimelineV2       *connect.Client[sdp_go.GetChangeTimelineV2Request, sdp_go.GetChangeTimelineV2Response]
	getChangeRisks            *connect.Client[sdp_go.GetChangeRisksRequest, sdp_go.GetChangeRisksResponse]
	updateChange              *connect.Client[sdp_go.UpdateChangeRequest, sdp_go.UpdateChangeResponse]
	deleteChange              *connect.Client[sdp_go.DeleteChangeRequest, sdp_go.DeleteChangeResponse]
	listChangesBySnapshotUUID *connect.Client[sdp_go.ListChangesBySnapshotUUIDRequest, sdp_go.ListChangesBySnapshotUUIDResponse]
	refreshState              *connect.Client[sdp_go.RefreshStateRequest, sdp_go.RefreshStateResponse]
	startChange               *connect.Client[sdp_go.StartChangeRequest, sdp_go.StartChangeResponse]
	endChange                 *connect.Client[sdp_go.EndChangeRequest, sdp_go.EndChangeResponse]
	listHomeChanges           *connect.Client[sdp_go.ListHomeChangesRequest, sdp_go.ListHomeChangesResponse]
	startChangeAnalysis       *connect.Client[sdp_go.StartChangeAnalysisRequest, sdp_go.StartChangeAnalysisResponse]
	listChangingItemsSummary  *connect.Client[sdp_go.ListChangingItemsSummaryRequest, sdp_go.ListChangingItemsSummaryResponse]
	getDiff                   *connect.Client[sdp_go.GetDiffRequest, sdp_go.GetDiffResponse]
	populateChangeFilters     *connect.Client[sdp_go.PopulateChangeFiltersRequest, sdp_go.PopulateChangeFiltersResponse]
}

// ListChanges calls changes.ChangesService.ListChanges.
func (c *changesServiceClient) ListChanges(ctx context.Context, req *connect.Request[sdp_go.ListChangesRequest]) (*connect.Response[sdp_go.ListChangesResponse], error) {
	return c.listChanges.CallUnary(ctx, req)
}

// ListChangesByStatus calls changes.ChangesService.ListChangesByStatus.
func (c *changesServiceClient) ListChangesByStatus(ctx context.Context, req *connect.Request[sdp_go.ListChangesByStatusRequest]) (*connect.Response[sdp_go.ListChangesByStatusResponse], error) {
	return c.listChangesByStatus.CallUnary(ctx, req)
}

// CreateChange calls changes.ChangesService.CreateChange.
func (c *changesServiceClient) CreateChange(ctx context.Context, req *connect.Request[sdp_go.CreateChangeRequest]) (*connect.Response[sdp_go.CreateChangeResponse], error) {
	return c.createChange.CallUnary(ctx, req)
}

// GetChange calls changes.ChangesService.GetChange.
func (c *changesServiceClient) GetChange(ctx context.Context, req *connect.Request[sdp_go.GetChangeRequest]) (*connect.Response[sdp_go.GetChangeResponse], error) {
	return c.getChange.CallUnary(ctx, req)
}

// GetChangeByTicketLink calls changes.ChangesService.GetChangeByTicketLink.
func (c *changesServiceClient) GetChangeByTicketLink(ctx context.Context, req *connect.Request[sdp_go.GetChangeByTicketLinkRequest]) (*connect.Response[sdp_go.GetChangeResponse], error) {
	return c.getChangeByTicketLink.CallUnary(ctx, req)
}

// GetChangeSummary calls changes.ChangesService.GetChangeSummary.
func (c *changesServiceClient) GetChangeSummary(ctx context.Context, req *connect.Request[sdp_go.GetChangeSummaryRequest]) (*connect.Response[sdp_go.GetChangeSummaryResponse], error) {
	return c.getChangeSummary.CallUnary(ctx, req)
}

// GetChangeTimelineV2 calls changes.ChangesService.GetChangeTimelineV2.
func (c *changesServiceClient) GetChangeTimelineV2(ctx context.Context, req *connect.Request[sdp_go.GetChangeTimelineV2Request]) (*connect.Response[sdp_go.GetChangeTimelineV2Response], error) {
	return c.getChangeTimelineV2.CallUnary(ctx, req)
}

// GetChangeRisks calls changes.ChangesService.GetChangeRisks.
func (c *changesServiceClient) GetChangeRisks(ctx context.Context, req *connect.Request[sdp_go.GetChangeRisksRequest]) (*connect.Response[sdp_go.GetChangeRisksResponse], error) {
	return c.getChangeRisks.CallUnary(ctx, req)
}

// UpdateChange calls changes.ChangesService.UpdateChange.
func (c *changesServiceClient) UpdateChange(ctx context.Context, req *connect.Request[sdp_go.UpdateChangeRequest]) (*connect.Response[sdp_go.UpdateChangeResponse], error) {
	return c.updateChange.CallUnary(ctx, req)
}

// DeleteChange calls changes.ChangesService.DeleteChange.
func (c *changesServiceClient) DeleteChange(ctx context.Context, req *connect.Request[sdp_go.DeleteChangeRequest]) (*connect.Response[sdp_go.DeleteChangeResponse], error) {
	return c.deleteChange.CallUnary(ctx, req)
}

// ListChangesBySnapshotUUID calls changes.ChangesService.ListChangesBySnapshotUUID.
func (c *changesServiceClient) ListChangesBySnapshotUUID(ctx context.Context, req *connect.Request[sdp_go.ListChangesBySnapshotUUIDRequest]) (*connect.Response[sdp_go.ListChangesBySnapshotUUIDResponse], error) {
	return c.listChangesBySnapshotUUID.CallUnary(ctx, req)
}

// RefreshState calls changes.ChangesService.RefreshState.
func (c *changesServiceClient) RefreshState(ctx context.Context, req *connect.Request[sdp_go.RefreshStateRequest]) (*connect.Response[sdp_go.RefreshStateResponse], error) {
	return c.refreshState.CallUnary(ctx, req)
}

// StartChange calls changes.ChangesService.StartChange.
func (c *changesServiceClient) StartChange(ctx context.Context, req *connect.Request[sdp_go.StartChangeRequest]) (*connect.ServerStreamForClient[sdp_go.StartChangeResponse], error) {
	return c.startChange.CallServerStream(ctx, req)
}

// EndChange calls changes.ChangesService.EndChange.
func (c *changesServiceClient) EndChange(ctx context.Context, req *connect.Request[sdp_go.EndChangeRequest]) (*connect.ServerStreamForClient[sdp_go.EndChangeResponse], error) {
	return c.endChange.CallServerStream(ctx, req)
}

// ListHomeChanges calls changes.ChangesService.ListHomeChanges.
func (c *changesServiceClient) ListHomeChanges(ctx context.Context, req *connect.Request[sdp_go.ListHomeChangesRequest]) (*connect.Response[sdp_go.ListHomeChangesResponse], error) {
	return c.listHomeChanges.CallUnary(ctx, req)
}

// StartChangeAnalysis calls changes.ChangesService.StartChangeAnalysis.
func (c *changesServiceClient) StartChangeAnalysis(ctx context.Context, req *connect.Request[sdp_go.StartChangeAnalysisRequest]) (*connect.Response[sdp_go.StartChangeAnalysisResponse], error) {
	return c.startChangeAnalysis.CallUnary(ctx, req)
}

// ListChangingItemsSummary calls changes.ChangesService.ListChangingItemsSummary.
func (c *changesServiceClient) ListChangingItemsSummary(ctx context.Context, req *connect.Request[sdp_go.ListChangingItemsSummaryRequest]) (*connect.Response[sdp_go.ListChangingItemsSummaryResponse], error) {
	return c.listChangingItemsSummary.CallUnary(ctx, req)
}

// GetDiff calls changes.ChangesService.GetDiff.
func (c *changesServiceClient) GetDiff(ctx context.Context, req *connect.Request[sdp_go.GetDiffRequest]) (*connect.Response[sdp_go.GetDiffResponse], error) {
	return c.getDiff.CallUnary(ctx, req)
}

// PopulateChangeFilters calls changes.ChangesService.PopulateChangeFilters.
func (c *changesServiceClient) PopulateChangeFilters(ctx context.Context, req *connect.Request[sdp_go.PopulateChangeFiltersRequest]) (*connect.Response[sdp_go.PopulateChangeFiltersResponse], error) {
	return c.populateChangeFilters.CallUnary(ctx, req)
}

// ChangesServiceHandler is an implementation of the changes.ChangesService service.
type ChangesServiceHandler interface {
	// Lists all changes
	ListChanges(context.Context, *connect.Request[sdp_go.ListChangesRequest]) (*connect.Response[sdp_go.ListChangesResponse], error)
	// list all changes in a specific status
	ListChangesByStatus(context.Context, *connect.Request[sdp_go.ListChangesByStatusRequest]) (*connect.Response[sdp_go.ListChangesByStatusResponse], error)
	// Creates a new change
	CreateChange(context.Context, *connect.Request[sdp_go.CreateChangeRequest]) (*connect.Response[sdp_go.CreateChangeResponse], error)
	// Gets the details of an existing change
	GetChange(context.Context, *connect.Request[sdp_go.GetChangeRequest]) (*connect.Response[sdp_go.GetChangeResponse], error)
	// Get a change by the ticket link
	GetChangeByTicketLink(context.Context, *connect.Request[sdp_go.GetChangeByTicketLinkRequest]) (*connect.Response[sdp_go.GetChangeResponse], error)
	// Gets the details of an existing change in markdown format
	GetChangeSummary(context.Context, *connect.Request[sdp_go.GetChangeSummaryRequest]) (*connect.Response[sdp_go.GetChangeSummaryResponse], error)
	// Gets the full timeline for this change, this will send one response
	// immediately and then hold the connection open, and send the entire
	// timeline again if there are any changes
	GetChangeTimelineV2(context.Context, *connect.Request[sdp_go.GetChangeTimelineV2Request]) (*connect.Response[sdp_go.GetChangeTimelineV2Response], error)
	// This is used on the blast radius page to get the risks and status for a change.
	GetChangeRisks(context.Context, *connect.Request[sdp_go.GetChangeRisksRequest]) (*connect.Response[sdp_go.GetChangeRisksResponse], error)
	// Updates an existing change
	UpdateChange(context.Context, *connect.Request[sdp_go.UpdateChangeRequest]) (*connect.Response[sdp_go.UpdateChangeResponse], error)
	// Deletes a change
	DeleteChange(context.Context, *connect.Request[sdp_go.DeleteChangeRequest]) (*connect.Response[sdp_go.DeleteChangeResponse], error)
	// Lists all changes for a snapshot UUID
	ListChangesBySnapshotUUID(context.Context, *connect.Request[sdp_go.ListChangesBySnapshotUUIDRequest]) (*connect.Response[sdp_go.ListChangesBySnapshotUUIDResponse], error)
	// Ask the gateway to refresh all internal caches and status slots
	// The RPC will return immediately doing all processing in the background
	RefreshState(context.Context, *connect.Request[sdp_go.RefreshStateRequest]) (*connect.Response[sdp_go.RefreshStateResponse], error)
	// Executing this RPC take a snapshot of the current blast radius and store it
	// in `systemBeforeSnapshotUUID` and then advance the status to
	// `STATUS_HAPPENING`. It can only be called once per change.
	StartChange(context.Context, *connect.Request[sdp_go.StartChangeRequest], *connect.ServerStream[sdp_go.StartChangeResponse]) error
	// Takes the "after" snapshot, stores it in `systemAfterSnapshotUUID`, calculates
	// the change diff and stores it as a list of DiffedItems and
	// advances the change status to `STATUS_DONE`
	EndChange(context.Context, *connect.Request[sdp_go.EndChangeRequest], *connect.ServerStream[sdp_go.EndChangeResponse]) error
	// Lists all changes, designed for use in the changes home page
	ListHomeChanges(context.Context, *connect.Request[sdp_go.ListHomeChangesRequest]) (*connect.Response[sdp_go.ListHomeChangesResponse], error)
	// Start the change analysis process. This will calculate various things
	// blast radius, risks, auto-tagging etc. This will return immediately and
	// the results can be fetched using the other RPCs
	StartChangeAnalysis(context.Context, *connect.Request[sdp_go.StartChangeAnalysisRequest]) (*connect.Response[sdp_go.StartChangeAnalysisResponse], error)
	// Gets the diff summary for all items that were planned to change as part of
	// this change. This includes the high level details of the item, and the
	// status (e.g. changed, deleted) but not the diff itself
	ListChangingItemsSummary(context.Context, *connect.Request[sdp_go.ListChangingItemsSummaryRequest]) (*connect.Response[sdp_go.ListChangingItemsSummaryResponse], error)
	// Gets the full diff of everything that changed as part of this "change".
	// This includes all items and also edges between them
	GetDiff(context.Context, *connect.Request[sdp_go.GetDiffRequest]) (*connect.Response[sdp_go.GetDiffResponse], error)
	// List all the available repos, authors and statuses that can be used to populate the dropdown filters
	PopulateChangeFilters(context.Context, *connect.Request[sdp_go.PopulateChangeFiltersRequest]) (*connect.Response[sdp_go.PopulateChangeFiltersResponse], error)
}

// NewChangesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChangesServiceHandler(svc ChangesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	changesServiceMethods := sdp_go.File_changes_proto.Services().ByName("ChangesService").Methods()
	changesServiceListChangesHandler := connect.NewUnaryHandler(
		ChangesServiceListChangesProcedure,
		svc.ListChanges,
		connect.WithSchema(changesServiceMethods.ByName("ListChanges")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceListChangesByStatusHandler := connect.NewUnaryHandler(
		ChangesServiceListChangesByStatusProcedure,
		svc.ListChangesByStatus,
		connect.WithSchema(changesServiceMethods.ByName("ListChangesByStatus")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceCreateChangeHandler := connect.NewUnaryHandler(
		ChangesServiceCreateChangeProcedure,
		svc.CreateChange,
		connect.WithSchema(changesServiceMethods.ByName("CreateChange")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceGetChangeHandler := connect.NewUnaryHandler(
		ChangesServiceGetChangeProcedure,
		svc.GetChange,
		connect.WithSchema(changesServiceMethods.ByName("GetChange")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceGetChangeByTicketLinkHandler := connect.NewUnaryHandler(
		ChangesServiceGetChangeByTicketLinkProcedure,
		svc.GetChangeByTicketLink,
		connect.WithSchema(changesServiceMethods.ByName("GetChangeByTicketLink")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceGetChangeSummaryHandler := connect.NewUnaryHandler(
		ChangesServiceGetChangeSummaryProcedure,
		svc.GetChangeSummary,
		connect.WithSchema(changesServiceMethods.ByName("GetChangeSummary")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceGetChangeTimelineV2Handler := connect.NewUnaryHandler(
		ChangesServiceGetChangeTimelineV2Procedure,
		svc.GetChangeTimelineV2,
		connect.WithSchema(changesServiceMethods.ByName("GetChangeTimelineV2")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceGetChangeRisksHandler := connect.NewUnaryHandler(
		ChangesServiceGetChangeRisksProcedure,
		svc.GetChangeRisks,
		connect.WithSchema(changesServiceMethods.ByName("GetChangeRisks")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceUpdateChangeHandler := connect.NewUnaryHandler(
		ChangesServiceUpdateChangeProcedure,
		svc.UpdateChange,
		connect.WithSchema(changesServiceMethods.ByName("UpdateChange")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceDeleteChangeHandler := connect.NewUnaryHandler(
		ChangesServiceDeleteChangeProcedure,
		svc.DeleteChange,
		connect.WithSchema(changesServiceMethods.ByName("DeleteChange")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceListChangesBySnapshotUUIDHandler := connect.NewUnaryHandler(
		ChangesServiceListChangesBySnapshotUUIDProcedure,
		svc.ListChangesBySnapshotUUID,
		connect.WithSchema(changesServiceMethods.ByName("ListChangesBySnapshotUUID")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceRefreshStateHandler := connect.NewUnaryHandler(
		ChangesServiceRefreshStateProcedure,
		svc.RefreshState,
		connect.WithSchema(changesServiceMethods.ByName("RefreshState")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceStartChangeHandler := connect.NewServerStreamHandler(
		ChangesServiceStartChangeProcedure,
		svc.StartChange,
		connect.WithSchema(changesServiceMethods.ByName("StartChange")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceEndChangeHandler := connect.NewServerStreamHandler(
		ChangesServiceEndChangeProcedure,
		svc.EndChange,
		connect.WithSchema(changesServiceMethods.ByName("EndChange")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceListHomeChangesHandler := connect.NewUnaryHandler(
		ChangesServiceListHomeChangesProcedure,
		svc.ListHomeChanges,
		connect.WithSchema(changesServiceMethods.ByName("ListHomeChanges")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceStartChangeAnalysisHandler := connect.NewUnaryHandler(
		ChangesServiceStartChangeAnalysisProcedure,
		svc.StartChangeAnalysis,
		connect.WithSchema(changesServiceMethods.ByName("StartChangeAnalysis")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceListChangingItemsSummaryHandler := connect.NewUnaryHandler(
		ChangesServiceListChangingItemsSummaryProcedure,
		svc.ListChangingItemsSummary,
		connect.WithSchema(changesServiceMethods.ByName("ListChangingItemsSummary")),
		connect.WithHandlerOptions(opts...),
	)
	changesServiceGetDiffHandler := connect.NewUnaryHandler(
		ChangesServiceGetDiffProcedure,
		svc.GetDiff,
		connect.WithSchema(changesServiceMethods.ByName("GetDiff")),
		connect.WithHandlerOptions(opts...),
	)
	changesServicePopulateChangeFiltersHandler := connect.NewUnaryHandler(
		ChangesServicePopulateChangeFiltersProcedure,
		svc.PopulateChangeFilters,
		connect.WithSchema(changesServiceMethods.ByName("PopulateChangeFilters")),
		connect.WithHandlerOptions(opts...),
	)
	return "/changes.ChangesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChangesServiceListChangesProcedure:
			changesServiceListChangesHandler.ServeHTTP(w, r)
		case ChangesServiceListChangesByStatusProcedure:
			changesServiceListChangesByStatusHandler.ServeHTTP(w, r)
		case ChangesServiceCreateChangeProcedure:
			changesServiceCreateChangeHandler.ServeHTTP(w, r)
		case ChangesServiceGetChangeProcedure:
			changesServiceGetChangeHandler.ServeHTTP(w, r)
		case ChangesServiceGetChangeByTicketLinkProcedure:
			changesServiceGetChangeByTicketLinkHandler.ServeHTTP(w, r)
		case ChangesServiceGetChangeSummaryProcedure:
			changesServiceGetChangeSummaryHandler.ServeHTTP(w, r)
		case ChangesServiceGetChangeTimelineV2Procedure:
			changesServiceGetChangeTimelineV2Handler.ServeHTTP(w, r)
		case ChangesServiceGetChangeRisksProcedure:
			changesServiceGetChangeRisksHandler.ServeHTTP(w, r)
		case ChangesServiceUpdateChangeProcedure:
			changesServiceUpdateChangeHandler.ServeHTTP(w, r)
		case ChangesServiceDeleteChangeProcedure:
			changesServiceDeleteChangeHandler.ServeHTTP(w, r)
		case ChangesServiceListChangesBySnapshotUUIDProcedure:
			changesServiceListChangesBySnapshotUUIDHandler.ServeHTTP(w, r)
		case ChangesServiceRefreshStateProcedure:
			changesServiceRefreshStateHandler.ServeHTTP(w, r)
		case ChangesServiceStartChangeProcedure:
			changesServiceStartChangeHandler.ServeHTTP(w, r)
		case ChangesServiceEndChangeProcedure:
			changesServiceEndChangeHandler.ServeHTTP(w, r)
		case ChangesServiceListHomeChangesProcedure:
			changesServiceListHomeChangesHandler.ServeHTTP(w, r)
		case ChangesServiceStartChangeAnalysisProcedure:
			changesServiceStartChangeAnalysisHandler.ServeHTTP(w, r)
		case ChangesServiceListChangingItemsSummaryProcedure:
			changesServiceListChangingItemsSummaryHandler.ServeHTTP(w, r)
		case ChangesServiceGetDiffProcedure:
			changesServiceGetDiffHandler.ServeHTTP(w, r)
		case ChangesServicePopulateChangeFiltersProcedure:
			changesServicePopulateChangeFiltersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChangesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChangesServiceHandler struct{}

func (UnimplementedChangesServiceHandler) ListChanges(context.Context, *connect.Request[sdp_go.ListChangesRequest]) (*connect.Response[sdp_go.ListChangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.ListChanges is not implemented"))
}

func (UnimplementedChangesServiceHandler) ListChangesByStatus(context.Context, *connect.Request[sdp_go.ListChangesByStatusRequest]) (*connect.Response[sdp_go.ListChangesByStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.ListChangesByStatus is not implemented"))
}

func (UnimplementedChangesServiceHandler) CreateChange(context.Context, *connect.Request[sdp_go.CreateChangeRequest]) (*connect.Response[sdp_go.CreateChangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.CreateChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetChange(context.Context, *connect.Request[sdp_go.GetChangeRequest]) (*connect.Response[sdp_go.GetChangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.GetChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetChangeByTicketLink(context.Context, *connect.Request[sdp_go.GetChangeByTicketLinkRequest]) (*connect.Response[sdp_go.GetChangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.GetChangeByTicketLink is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetChangeSummary(context.Context, *connect.Request[sdp_go.GetChangeSummaryRequest]) (*connect.Response[sdp_go.GetChangeSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.GetChangeSummary is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetChangeTimelineV2(context.Context, *connect.Request[sdp_go.GetChangeTimelineV2Request]) (*connect.Response[sdp_go.GetChangeTimelineV2Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.GetChangeTimelineV2 is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetChangeRisks(context.Context, *connect.Request[sdp_go.GetChangeRisksRequest]) (*connect.Response[sdp_go.GetChangeRisksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.GetChangeRisks is not implemented"))
}

func (UnimplementedChangesServiceHandler) UpdateChange(context.Context, *connect.Request[sdp_go.UpdateChangeRequest]) (*connect.Response[sdp_go.UpdateChangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.UpdateChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) DeleteChange(context.Context, *connect.Request[sdp_go.DeleteChangeRequest]) (*connect.Response[sdp_go.DeleteChangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.DeleteChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) ListChangesBySnapshotUUID(context.Context, *connect.Request[sdp_go.ListChangesBySnapshotUUIDRequest]) (*connect.Response[sdp_go.ListChangesBySnapshotUUIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.ListChangesBySnapshotUUID is not implemented"))
}

func (UnimplementedChangesServiceHandler) RefreshState(context.Context, *connect.Request[sdp_go.RefreshStateRequest]) (*connect.Response[sdp_go.RefreshStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.RefreshState is not implemented"))
}

func (UnimplementedChangesServiceHandler) StartChange(context.Context, *connect.Request[sdp_go.StartChangeRequest], *connect.ServerStream[sdp_go.StartChangeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.StartChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) EndChange(context.Context, *connect.Request[sdp_go.EndChangeRequest], *connect.ServerStream[sdp_go.EndChangeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.EndChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) ListHomeChanges(context.Context, *connect.Request[sdp_go.ListHomeChangesRequest]) (*connect.Response[sdp_go.ListHomeChangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.ListHomeChanges is not implemented"))
}

func (UnimplementedChangesServiceHandler) StartChangeAnalysis(context.Context, *connect.Request[sdp_go.StartChangeAnalysisRequest]) (*connect.Response[sdp_go.StartChangeAnalysisResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.StartChangeAnalysis is not implemented"))
}

func (UnimplementedChangesServiceHandler) ListChangingItemsSummary(context.Context, *connect.Request[sdp_go.ListChangingItemsSummaryRequest]) (*connect.Response[sdp_go.ListChangingItemsSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.ListChangingItemsSummary is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetDiff(context.Context, *connect.Request[sdp_go.GetDiffRequest]) (*connect.Response[sdp_go.GetDiffResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.GetDiff is not implemented"))
}

func (UnimplementedChangesServiceHandler) PopulateChangeFilters(context.Context, *connect.Request[sdp_go.PopulateChangeFiltersRequest]) (*connect.Response[sdp_go.PopulateChangeFiltersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.ChangesService.PopulateChangeFilters is not implemented"))
}

// AutoTaggingServiceClient is a client for the changes.AutoTaggingService service.
type AutoTaggingServiceClient interface {
	// Used on the auto-tagging page to list all rules for an account
	// Returns a list of rules
	ListRules(context.Context, *connect.Request[sdp_go.ListRulesRequest]) (*connect.Response[sdp_go.ListRulesResponse], error)
	// Creates a new rule, with the provided properties. This will return a
	// CodeAlreadyExists error if the `tagKey` is not unique
	CreateRule(context.Context, *connect.Request[sdp_go.CreateRuleRequest]) (*connect.Response[sdp_go.CreateRuleResponse], error)
	// Get the details of a rule
	GetRule(context.Context, *connect.Request[sdp_go.GetRuleRequest]) (*connect.Response[sdp_go.GetRuleResponse], error)
	// Given a rule UUID, updates the rule properties. Note the key can be
	// updated, but it only applies to new changes. This will return a
	// CodeAlreadyExists error if the  new `tagKey` is not unique
	UpdateRule(context.Context, *connect.Request[sdp_go.UpdateRuleRequest]) (*connect.Response[sdp_go.UpdateRuleResponse], error)
	// Given a rule UUID permanently delete that rule, existing changes will not
	// be affected
	DeleteRule(context.Context, *connect.Request[sdp_go.DeleteRuleRequest]) (*connect.Response[sdp_go.DeleteRuleResponse], error)
	// Convert a rule's properties to a string that can be used in the rules
	// config file
	ExportRule(context.Context, *connect.Request[sdp_go.ExportRuleRequest]) (*connect.Response[sdp_go.ExportRuleResponse], error)
	// Given a rule, and a list of changes uuids
	// The response will contain the rule uuid and a list of changes and what tags they would have if the rule was applied
	TestRule(context.Context, *connect.Request[sdp_go.TestRuleRequest]) (*connect.ServerStreamForClient[sdp_go.TestRuleResponse], error)
}

// NewAutoTaggingServiceClient constructs a client for the changes.AutoTaggingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAutoTaggingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AutoTaggingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	autoTaggingServiceMethods := sdp_go.File_changes_proto.Services().ByName("AutoTaggingService").Methods()
	return &autoTaggingServiceClient{
		listRules: connect.NewClient[sdp_go.ListRulesRequest, sdp_go.ListRulesResponse](
			httpClient,
			baseURL+AutoTaggingServiceListRulesProcedure,
			connect.WithSchema(autoTaggingServiceMethods.ByName("ListRules")),
			connect.WithClientOptions(opts...),
		),
		createRule: connect.NewClient[sdp_go.CreateRuleRequest, sdp_go.CreateRuleResponse](
			httpClient,
			baseURL+AutoTaggingServiceCreateRuleProcedure,
			connect.WithSchema(autoTaggingServiceMethods.ByName("CreateRule")),
			connect.WithClientOptions(opts...),
		),
		getRule: connect.NewClient[sdp_go.GetRuleRequest, sdp_go.GetRuleResponse](
			httpClient,
			baseURL+AutoTaggingServiceGetRuleProcedure,
			connect.WithSchema(autoTaggingServiceMethods.ByName("GetRule")),
			connect.WithClientOptions(opts...),
		),
		updateRule: connect.NewClient[sdp_go.UpdateRuleRequest, sdp_go.UpdateRuleResponse](
			httpClient,
			baseURL+AutoTaggingServiceUpdateRuleProcedure,
			connect.WithSchema(autoTaggingServiceMethods.ByName("UpdateRule")),
			connect.WithClientOptions(opts...),
		),
		deleteRule: connect.NewClient[sdp_go.DeleteRuleRequest, sdp_go.DeleteRuleResponse](
			httpClient,
			baseURL+AutoTaggingServiceDeleteRuleProcedure,
			connect.WithSchema(autoTaggingServiceMethods.ByName("DeleteRule")),
			connect.WithClientOptions(opts...),
		),
		exportRule: connect.NewClient[sdp_go.ExportRuleRequest, sdp_go.ExportRuleResponse](
			httpClient,
			baseURL+AutoTaggingServiceExportRuleProcedure,
			connect.WithSchema(autoTaggingServiceMethods.ByName("ExportRule")),
			connect.WithClientOptions(opts...),
		),
		testRule: connect.NewClient[sdp_go.TestRuleRequest, sdp_go.TestRuleResponse](
			httpClient,
			baseURL+AutoTaggingServiceTestRuleProcedure,
			connect.WithSchema(autoTaggingServiceMethods.ByName("TestRule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// autoTaggingServiceClient implements AutoTaggingServiceClient.
type autoTaggingServiceClient struct {
	listRules  *connect.Client[sdp_go.ListRulesRequest, sdp_go.ListRulesResponse]
	createRule *connect.Client[sdp_go.CreateRuleRequest, sdp_go.CreateRuleResponse]
	getRule    *connect.Client[sdp_go.GetRuleRequest, sdp_go.GetRuleResponse]
	updateRule *connect.Client[sdp_go.UpdateRuleRequest, sdp_go.UpdateRuleResponse]
	deleteRule *connect.Client[sdp_go.DeleteRuleRequest, sdp_go.DeleteRuleResponse]
	exportRule *connect.Client[sdp_go.ExportRuleRequest, sdp_go.ExportRuleResponse]
	testRule   *connect.Client[sdp_go.TestRuleRequest, sdp_go.TestRuleResponse]
}

// ListRules calls changes.AutoTaggingService.ListRules.
func (c *autoTaggingServiceClient) ListRules(ctx context.Context, req *connect.Request[sdp_go.ListRulesRequest]) (*connect.Response[sdp_go.ListRulesResponse], error) {
	return c.listRules.CallUnary(ctx, req)
}

// CreateRule calls changes.AutoTaggingService.CreateRule.
func (c *autoTaggingServiceClient) CreateRule(ctx context.Context, req *connect.Request[sdp_go.CreateRuleRequest]) (*connect.Response[sdp_go.CreateRuleResponse], error) {
	return c.createRule.CallUnary(ctx, req)
}

// GetRule calls changes.AutoTaggingService.GetRule.
func (c *autoTaggingServiceClient) GetRule(ctx context.Context, req *connect.Request[sdp_go.GetRuleRequest]) (*connect.Response[sdp_go.GetRuleResponse], error) {
	return c.getRule.CallUnary(ctx, req)
}

// UpdateRule calls changes.AutoTaggingService.UpdateRule.
func (c *autoTaggingServiceClient) UpdateRule(ctx context.Context, req *connect.Request[sdp_go.UpdateRuleRequest]) (*connect.Response[sdp_go.UpdateRuleResponse], error) {
	return c.updateRule.CallUnary(ctx, req)
}

// DeleteRule calls changes.AutoTaggingService.DeleteRule.
func (c *autoTaggingServiceClient) DeleteRule(ctx context.Context, req *connect.Request[sdp_go.DeleteRuleRequest]) (*connect.Response[sdp_go.DeleteRuleResponse], error) {
	return c.deleteRule.CallUnary(ctx, req)
}

// ExportRule calls changes.AutoTaggingService.ExportRule.
func (c *autoTaggingServiceClient) ExportRule(ctx context.Context, req *connect.Request[sdp_go.ExportRuleRequest]) (*connect.Response[sdp_go.ExportRuleResponse], error) {
	return c.exportRule.CallUnary(ctx, req)
}

// TestRule calls changes.AutoTaggingService.TestRule.
func (c *autoTaggingServiceClient) TestRule(ctx context.Context, req *connect.Request[sdp_go.TestRuleRequest]) (*connect.ServerStreamForClient[sdp_go.TestRuleResponse], error) {
	return c.testRule.CallServerStream(ctx, req)
}

// AutoTaggingServiceHandler is an implementation of the changes.AutoTaggingService service.
type AutoTaggingServiceHandler interface {
	// Used on the auto-tagging page to list all rules for an account
	// Returns a list of rules
	ListRules(context.Context, *connect.Request[sdp_go.ListRulesRequest]) (*connect.Response[sdp_go.ListRulesResponse], error)
	// Creates a new rule, with the provided properties. This will return a
	// CodeAlreadyExists error if the `tagKey` is not unique
	CreateRule(context.Context, *connect.Request[sdp_go.CreateRuleRequest]) (*connect.Response[sdp_go.CreateRuleResponse], error)
	// Get the details of a rule
	GetRule(context.Context, *connect.Request[sdp_go.GetRuleRequest]) (*connect.Response[sdp_go.GetRuleResponse], error)
	// Given a rule UUID, updates the rule properties. Note the key can be
	// updated, but it only applies to new changes. This will return a
	// CodeAlreadyExists error if the  new `tagKey` is not unique
	UpdateRule(context.Context, *connect.Request[sdp_go.UpdateRuleRequest]) (*connect.Response[sdp_go.UpdateRuleResponse], error)
	// Given a rule UUID permanently delete that rule, existing changes will not
	// be affected
	DeleteRule(context.Context, *connect.Request[sdp_go.DeleteRuleRequest]) (*connect.Response[sdp_go.DeleteRuleResponse], error)
	// Convert a rule's properties to a string that can be used in the rules
	// config file
	ExportRule(context.Context, *connect.Request[sdp_go.ExportRuleRequest]) (*connect.Response[sdp_go.ExportRuleResponse], error)
	// Given a rule, and a list of changes uuids
	// The response will contain the rule uuid and a list of changes and what tags they would have if the rule was applied
	TestRule(context.Context, *connect.Request[sdp_go.TestRuleRequest], *connect.ServerStream[sdp_go.TestRuleResponse]) error
}

// NewAutoTaggingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAutoTaggingServiceHandler(svc AutoTaggingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	autoTaggingServiceMethods := sdp_go.File_changes_proto.Services().ByName("AutoTaggingService").Methods()
	autoTaggingServiceListRulesHandler := connect.NewUnaryHandler(
		AutoTaggingServiceListRulesProcedure,
		svc.ListRules,
		connect.WithSchema(autoTaggingServiceMethods.ByName("ListRules")),
		connect.WithHandlerOptions(opts...),
	)
	autoTaggingServiceCreateRuleHandler := connect.NewUnaryHandler(
		AutoTaggingServiceCreateRuleProcedure,
		svc.CreateRule,
		connect.WithSchema(autoTaggingServiceMethods.ByName("CreateRule")),
		connect.WithHandlerOptions(opts...),
	)
	autoTaggingServiceGetRuleHandler := connect.NewUnaryHandler(
		AutoTaggingServiceGetRuleProcedure,
		svc.GetRule,
		connect.WithSchema(autoTaggingServiceMethods.ByName("GetRule")),
		connect.WithHandlerOptions(opts...),
	)
	autoTaggingServiceUpdateRuleHandler := connect.NewUnaryHandler(
		AutoTaggingServiceUpdateRuleProcedure,
		svc.UpdateRule,
		connect.WithSchema(autoTaggingServiceMethods.ByName("UpdateRule")),
		connect.WithHandlerOptions(opts...),
	)
	autoTaggingServiceDeleteRuleHandler := connect.NewUnaryHandler(
		AutoTaggingServiceDeleteRuleProcedure,
		svc.DeleteRule,
		connect.WithSchema(autoTaggingServiceMethods.ByName("DeleteRule")),
		connect.WithHandlerOptions(opts...),
	)
	autoTaggingServiceExportRuleHandler := connect.NewUnaryHandler(
		AutoTaggingServiceExportRuleProcedure,
		svc.ExportRule,
		connect.WithSchema(autoTaggingServiceMethods.ByName("ExportRule")),
		connect.WithHandlerOptions(opts...),
	)
	autoTaggingServiceTestRuleHandler := connect.NewServerStreamHandler(
		AutoTaggingServiceTestRuleProcedure,
		svc.TestRule,
		connect.WithSchema(autoTaggingServiceMethods.ByName("TestRule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/changes.AutoTaggingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AutoTaggingServiceListRulesProcedure:
			autoTaggingServiceListRulesHandler.ServeHTTP(w, r)
		case AutoTaggingServiceCreateRuleProcedure:
			autoTaggingServiceCreateRuleHandler.ServeHTTP(w, r)
		case AutoTaggingServiceGetRuleProcedure:
			autoTaggingServiceGetRuleHandler.ServeHTTP(w, r)
		case AutoTaggingServiceUpdateRuleProcedure:
			autoTaggingServiceUpdateRuleHandler.ServeHTTP(w, r)
		case AutoTaggingServiceDeleteRuleProcedure:
			autoTaggingServiceDeleteRuleHandler.ServeHTTP(w, r)
		case AutoTaggingServiceExportRuleProcedure:
			autoTaggingServiceExportRuleHandler.ServeHTTP(w, r)
		case AutoTaggingServiceTestRuleProcedure:
			autoTaggingServiceTestRuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAutoTaggingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAutoTaggingServiceHandler struct{}

func (UnimplementedAutoTaggingServiceHandler) ListRules(context.Context, *connect.Request[sdp_go.ListRulesRequest]) (*connect.Response[sdp_go.ListRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.AutoTaggingService.ListRules is not implemented"))
}

func (UnimplementedAutoTaggingServiceHandler) CreateRule(context.Context, *connect.Request[sdp_go.CreateRuleRequest]) (*connect.Response[sdp_go.CreateRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.AutoTaggingService.CreateRule is not implemented"))
}

func (UnimplementedAutoTaggingServiceHandler) GetRule(context.Context, *connect.Request[sdp_go.GetRuleRequest]) (*connect.Response[sdp_go.GetRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.AutoTaggingService.GetRule is not implemented"))
}

func (UnimplementedAutoTaggingServiceHandler) UpdateRule(context.Context, *connect.Request[sdp_go.UpdateRuleRequest]) (*connect.Response[sdp_go.UpdateRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.AutoTaggingService.UpdateRule is not implemented"))
}

func (UnimplementedAutoTaggingServiceHandler) DeleteRule(context.Context, *connect.Request[sdp_go.DeleteRuleRequest]) (*connect.Response[sdp_go.DeleteRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.AutoTaggingService.DeleteRule is not implemented"))
}

func (UnimplementedAutoTaggingServiceHandler) ExportRule(context.Context, *connect.Request[sdp_go.ExportRuleRequest]) (*connect.Response[sdp_go.ExportRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("changes.AutoTaggingService.ExportRule is not implemented"))
}

func (UnimplementedAutoTaggingServiceHandler) TestRule(context.Context, *connect.Request[sdp_go.TestRuleRequest], *connect.ServerStream[sdp_go.TestRuleResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("changes.AutoTaggingService.TestRule is not implemented"))
}
