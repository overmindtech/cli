// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: account.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "account.AdminService"
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "account.ManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceListAccountsProcedure is the fully-qualified name of the AdminService's ListAccounts
	// RPC.
	AdminServiceListAccountsProcedure = "/account.AdminService/ListAccounts"
	// AdminServiceCreateAccountProcedure is the fully-qualified name of the AdminService's
	// CreateAccount RPC.
	AdminServiceCreateAccountProcedure = "/account.AdminService/CreateAccount"
	// AdminServiceUpdateAccountProcedure is the fully-qualified name of the AdminService's
	// UpdateAccount RPC.
	AdminServiceUpdateAccountProcedure = "/account.AdminService/UpdateAccount"
	// AdminServiceGetAccountProcedure is the fully-qualified name of the AdminService's GetAccount RPC.
	AdminServiceGetAccountProcedure = "/account.AdminService/GetAccount"
	// AdminServiceDeleteAccountProcedure is the fully-qualified name of the AdminService's
	// DeleteAccount RPC.
	AdminServiceDeleteAccountProcedure = "/account.AdminService/DeleteAccount"
	// AdminServiceListSourcesProcedure is the fully-qualified name of the AdminService's ListSources
	// RPC.
	AdminServiceListSourcesProcedure = "/account.AdminService/ListSources"
	// AdminServiceCreateSourceProcedure is the fully-qualified name of the AdminService's CreateSource
	// RPC.
	AdminServiceCreateSourceProcedure = "/account.AdminService/CreateSource"
	// AdminServiceGetSourceProcedure is the fully-qualified name of the AdminService's GetSource RPC.
	AdminServiceGetSourceProcedure = "/account.AdminService/GetSource"
	// AdminServiceUpdateSourceProcedure is the fully-qualified name of the AdminService's UpdateSource
	// RPC.
	AdminServiceUpdateSourceProcedure = "/account.AdminService/UpdateSource"
	// AdminServiceDeleteSourceProcedure is the fully-qualified name of the AdminService's DeleteSource
	// RPC.
	AdminServiceDeleteSourceProcedure = "/account.AdminService/DeleteSource"
	// AdminServiceKeepaliveSourcesProcedure is the fully-qualified name of the AdminService's
	// KeepaliveSources RPC.
	AdminServiceKeepaliveSourcesProcedure = "/account.AdminService/KeepaliveSources"
	// AdminServiceCreateTokenProcedure is the fully-qualified name of the AdminService's CreateToken
	// RPC.
	AdminServiceCreateTokenProcedure = "/account.AdminService/CreateToken"
	// ManagementServiceGetAccountProcedure is the fully-qualified name of the ManagementService's
	// GetAccount RPC.
	ManagementServiceGetAccountProcedure = "/account.ManagementService/GetAccount"
	// ManagementServiceDeleteAccountProcedure is the fully-qualified name of the ManagementService's
	// DeleteAccount RPC.
	ManagementServiceDeleteAccountProcedure = "/account.ManagementService/DeleteAccount"
	// ManagementServiceListSourcesProcedure is the fully-qualified name of the ManagementService's
	// ListSources RPC.
	ManagementServiceListSourcesProcedure = "/account.ManagementService/ListSources"
	// ManagementServiceCreateSourceProcedure is the fully-qualified name of the ManagementService's
	// CreateSource RPC.
	ManagementServiceCreateSourceProcedure = "/account.ManagementService/CreateSource"
	// ManagementServiceGetSourceProcedure is the fully-qualified name of the ManagementService's
	// GetSource RPC.
	ManagementServiceGetSourceProcedure = "/account.ManagementService/GetSource"
	// ManagementServiceUpdateSourceProcedure is the fully-qualified name of the ManagementService's
	// UpdateSource RPC.
	ManagementServiceUpdateSourceProcedure = "/account.ManagementService/UpdateSource"
	// ManagementServiceDeleteSourceProcedure is the fully-qualified name of the ManagementService's
	// DeleteSource RPC.
	ManagementServiceDeleteSourceProcedure = "/account.ManagementService/DeleteSource"
	// ManagementServiceListAllSourcesStatusProcedure is the fully-qualified name of the
	// ManagementService's ListAllSourcesStatus RPC.
	ManagementServiceListAllSourcesStatusProcedure = "/account.ManagementService/ListAllSourcesStatus"
	// ManagementServiceListActiveSourcesStatusProcedure is the fully-qualified name of the
	// ManagementService's ListActiveSourcesStatus RPC.
	ManagementServiceListActiveSourcesStatusProcedure = "/account.ManagementService/ListActiveSourcesStatus"
	// ManagementServiceSubmitSourceHeartbeatProcedure is the fully-qualified name of the
	// ManagementService's SubmitSourceHeartbeat RPC.
	ManagementServiceSubmitSourceHeartbeatProcedure = "/account.ManagementService/SubmitSourceHeartbeat"
	// ManagementServiceKeepaliveSourcesProcedure is the fully-qualified name of the ManagementService's
	// KeepaliveSources RPC.
	ManagementServiceKeepaliveSourcesProcedure = "/account.ManagementService/KeepaliveSources"
	// ManagementServiceCreateTokenProcedure is the fully-qualified name of the ManagementService's
	// CreateToken RPC.
	ManagementServiceCreateTokenProcedure = "/account.ManagementService/CreateToken"
	// ManagementServiceRevlinkWarmupProcedure is the fully-qualified name of the ManagementService's
	// RevlinkWarmup RPC.
	ManagementServiceRevlinkWarmupProcedure = "/account.ManagementService/RevlinkWarmup"
	// ManagementServiceGetTrialEndProcedure is the fully-qualified name of the ManagementService's
	// GetTrialEnd RPC.
	ManagementServiceGetTrialEndProcedure = "/account.ManagementService/GetTrialEnd"
	// ManagementServiceListAvailableItemTypesProcedure is the fully-qualified name of the
	// ManagementService's ListAvailableItemTypes RPC.
	ManagementServiceListAvailableItemTypesProcedure = "/account.ManagementService/ListAvailableItemTypes"
)

// AdminServiceClient is a client for the account.AdminService service.
type AdminServiceClient interface {
	// Lists the details of all NATS Accounts
	ListAccounts(context.Context, *connect.Request[sdp_go.ListAccountsRequest]) (*connect.Response[sdp_go.ListAccountsResponse], error)
	// Creates a new account, public_nkey will be autogenerated
	CreateAccount(context.Context, *connect.Request[sdp_go.CreateAccountRequest]) (*connect.Response[sdp_go.CreateAccountResponse], error)
	// Updates account details, returns the account
	UpdateAccount(context.Context, *connect.Request[sdp_go.AdminUpdateAccountRequest]) (*connect.Response[sdp_go.UpdateAccountResponse], error)
	// Get the details of a given account
	GetAccount(context.Context, *connect.Request[sdp_go.AdminGetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error)
	// Completely deletes an account. This includes all of the data in that
	// account, bookmarks, changes etc. It also deletes all users from Auth0
	// that are associated with this account
	DeleteAccount(context.Context, *connect.Request[sdp_go.AdminDeleteAccountRequest]) (*connect.Response[sdp_go.AdminDeleteAccountResponse], error)
	// Lists all sources within the chosen account
	ListSources(context.Context, *connect.Request[sdp_go.AdminListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error)
	// Creates a new source within the chosen account
	CreateSource(context.Context, *connect.Request[sdp_go.AdminCreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error)
	// Get the details of a source within the chosen account
	GetSource(context.Context, *connect.Request[sdp_go.AdminGetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error)
	// Update the details of a source within the chosen account
	UpdateSource(context.Context, *connect.Request[sdp_go.AdminUpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error)
	// Deletes a source from a chosen account
	DeleteSource(context.Context, *connect.Request[sdp_go.AdminDeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error)
	// Updates sources to keep them running in the background. This can be used
	// to add explicit action, when the built-in keepalives are not sufficient.
	KeepaliveSources(context.Context, *connect.Request[sdp_go.AdminKeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error)
	// Create a new NATS token for a given public NKey. The user requesting must
	// control the associated private key also in order to connect to NATS as
	// the token is not enough on its own
	CreateToken(context.Context, *connect.Request[sdp_go.AdminCreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error)
}

// NewAdminServiceClient constructs a client for the account.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := sdp_go.File_account_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		listAccounts: connect.NewClient[sdp_go.ListAccountsRequest, sdp_go.ListAccountsResponse](
			httpClient,
			baseURL+AdminServiceListAccountsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListAccounts")),
			connect.WithClientOptions(opts...),
		),
		createAccount: connect.NewClient[sdp_go.CreateAccountRequest, sdp_go.CreateAccountResponse](
			httpClient,
			baseURL+AdminServiceCreateAccountProcedure,
			connect.WithSchema(adminServiceMethods.ByName("CreateAccount")),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[sdp_go.AdminUpdateAccountRequest, sdp_go.UpdateAccountResponse](
			httpClient,
			baseURL+AdminServiceUpdateAccountProcedure,
			connect.WithSchema(adminServiceMethods.ByName("UpdateAccount")),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[sdp_go.AdminGetAccountRequest, sdp_go.GetAccountResponse](
			httpClient,
			baseURL+AdminServiceGetAccountProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[sdp_go.AdminDeleteAccountRequest, sdp_go.AdminDeleteAccountResponse](
			httpClient,
			baseURL+AdminServiceDeleteAccountProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		listSources: connect.NewClient[sdp_go.AdminListSourcesRequest, sdp_go.ListSourcesResponse](
			httpClient,
			baseURL+AdminServiceListSourcesProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListSources")),
			connect.WithClientOptions(opts...),
		),
		createSource: connect.NewClient[sdp_go.AdminCreateSourceRequest, sdp_go.CreateSourceResponse](
			httpClient,
			baseURL+AdminServiceCreateSourceProcedure,
			connect.WithSchema(adminServiceMethods.ByName("CreateSource")),
			connect.WithClientOptions(opts...),
		),
		getSource: connect.NewClient[sdp_go.AdminGetSourceRequest, sdp_go.GetSourceResponse](
			httpClient,
			baseURL+AdminServiceGetSourceProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetSource")),
			connect.WithClientOptions(opts...),
		),
		updateSource: connect.NewClient[sdp_go.AdminUpdateSourceRequest, sdp_go.UpdateSourceResponse](
			httpClient,
			baseURL+AdminServiceUpdateSourceProcedure,
			connect.WithSchema(adminServiceMethods.ByName("UpdateSource")),
			connect.WithClientOptions(opts...),
		),
		deleteSource: connect.NewClient[sdp_go.AdminDeleteSourceRequest, sdp_go.DeleteSourceResponse](
			httpClient,
			baseURL+AdminServiceDeleteSourceProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DeleteSource")),
			connect.WithClientOptions(opts...),
		),
		keepaliveSources: connect.NewClient[sdp_go.AdminKeepaliveSourcesRequest, sdp_go.KeepaliveSourcesResponse](
			httpClient,
			baseURL+AdminServiceKeepaliveSourcesProcedure,
			connect.WithSchema(adminServiceMethods.ByName("KeepaliveSources")),
			connect.WithClientOptions(opts...),
		),
		createToken: connect.NewClient[sdp_go.AdminCreateTokenRequest, sdp_go.CreateTokenResponse](
			httpClient,
			baseURL+AdminServiceCreateTokenProcedure,
			connect.WithSchema(adminServiceMethods.ByName("CreateToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	listAccounts     *connect.Client[sdp_go.ListAccountsRequest, sdp_go.ListAccountsResponse]
	createAccount    *connect.Client[sdp_go.CreateAccountRequest, sdp_go.CreateAccountResponse]
	updateAccount    *connect.Client[sdp_go.AdminUpdateAccountRequest, sdp_go.UpdateAccountResponse]
	getAccount       *connect.Client[sdp_go.AdminGetAccountRequest, sdp_go.GetAccountResponse]
	deleteAccount    *connect.Client[sdp_go.AdminDeleteAccountRequest, sdp_go.AdminDeleteAccountResponse]
	listSources      *connect.Client[sdp_go.AdminListSourcesRequest, sdp_go.ListSourcesResponse]
	createSource     *connect.Client[sdp_go.AdminCreateSourceRequest, sdp_go.CreateSourceResponse]
	getSource        *connect.Client[sdp_go.AdminGetSourceRequest, sdp_go.GetSourceResponse]
	updateSource     *connect.Client[sdp_go.AdminUpdateSourceRequest, sdp_go.UpdateSourceResponse]
	deleteSource     *connect.Client[sdp_go.AdminDeleteSourceRequest, sdp_go.DeleteSourceResponse]
	keepaliveSources *connect.Client[sdp_go.AdminKeepaliveSourcesRequest, sdp_go.KeepaliveSourcesResponse]
	createToken      *connect.Client[sdp_go.AdminCreateTokenRequest, sdp_go.CreateTokenResponse]
}

// ListAccounts calls account.AdminService.ListAccounts.
func (c *adminServiceClient) ListAccounts(ctx context.Context, req *connect.Request[sdp_go.ListAccountsRequest]) (*connect.Response[sdp_go.ListAccountsResponse], error) {
	return c.listAccounts.CallUnary(ctx, req)
}

// CreateAccount calls account.AdminService.CreateAccount.
func (c *adminServiceClient) CreateAccount(ctx context.Context, req *connect.Request[sdp_go.CreateAccountRequest]) (*connect.Response[sdp_go.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// UpdateAccount calls account.AdminService.UpdateAccount.
func (c *adminServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[sdp_go.AdminUpdateAccountRequest]) (*connect.Response[sdp_go.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// GetAccount calls account.AdminService.GetAccount.
func (c *adminServiceClient) GetAccount(ctx context.Context, req *connect.Request[sdp_go.AdminGetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// DeleteAccount calls account.AdminService.DeleteAccount.
func (c *adminServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[sdp_go.AdminDeleteAccountRequest]) (*connect.Response[sdp_go.AdminDeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// ListSources calls account.AdminService.ListSources.
func (c *adminServiceClient) ListSources(ctx context.Context, req *connect.Request[sdp_go.AdminListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error) {
	return c.listSources.CallUnary(ctx, req)
}

// CreateSource calls account.AdminService.CreateSource.
func (c *adminServiceClient) CreateSource(ctx context.Context, req *connect.Request[sdp_go.AdminCreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error) {
	return c.createSource.CallUnary(ctx, req)
}

// GetSource calls account.AdminService.GetSource.
func (c *adminServiceClient) GetSource(ctx context.Context, req *connect.Request[sdp_go.AdminGetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error) {
	return c.getSource.CallUnary(ctx, req)
}

// UpdateSource calls account.AdminService.UpdateSource.
func (c *adminServiceClient) UpdateSource(ctx context.Context, req *connect.Request[sdp_go.AdminUpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error) {
	return c.updateSource.CallUnary(ctx, req)
}

// DeleteSource calls account.AdminService.DeleteSource.
func (c *adminServiceClient) DeleteSource(ctx context.Context, req *connect.Request[sdp_go.AdminDeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error) {
	return c.deleteSource.CallUnary(ctx, req)
}

// KeepaliveSources calls account.AdminService.KeepaliveSources.
func (c *adminServiceClient) KeepaliveSources(ctx context.Context, req *connect.Request[sdp_go.AdminKeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error) {
	return c.keepaliveSources.CallUnary(ctx, req)
}

// CreateToken calls account.AdminService.CreateToken.
func (c *adminServiceClient) CreateToken(ctx context.Context, req *connect.Request[sdp_go.AdminCreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error) {
	return c.createToken.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the account.AdminService service.
type AdminServiceHandler interface {
	// Lists the details of all NATS Accounts
	ListAccounts(context.Context, *connect.Request[sdp_go.ListAccountsRequest]) (*connect.Response[sdp_go.ListAccountsResponse], error)
	// Creates a new account, public_nkey will be autogenerated
	CreateAccount(context.Context, *connect.Request[sdp_go.CreateAccountRequest]) (*connect.Response[sdp_go.CreateAccountResponse], error)
	// Updates account details, returns the account
	UpdateAccount(context.Context, *connect.Request[sdp_go.AdminUpdateAccountRequest]) (*connect.Response[sdp_go.UpdateAccountResponse], error)
	// Get the details of a given account
	GetAccount(context.Context, *connect.Request[sdp_go.AdminGetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error)
	// Completely deletes an account. This includes all of the data in that
	// account, bookmarks, changes etc. It also deletes all users from Auth0
	// that are associated with this account
	DeleteAccount(context.Context, *connect.Request[sdp_go.AdminDeleteAccountRequest]) (*connect.Response[sdp_go.AdminDeleteAccountResponse], error)
	// Lists all sources within the chosen account
	ListSources(context.Context, *connect.Request[sdp_go.AdminListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error)
	// Creates a new source within the chosen account
	CreateSource(context.Context, *connect.Request[sdp_go.AdminCreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error)
	// Get the details of a source within the chosen account
	GetSource(context.Context, *connect.Request[sdp_go.AdminGetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error)
	// Update the details of a source within the chosen account
	UpdateSource(context.Context, *connect.Request[sdp_go.AdminUpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error)
	// Deletes a source from a chosen account
	DeleteSource(context.Context, *connect.Request[sdp_go.AdminDeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error)
	// Updates sources to keep them running in the background. This can be used
	// to add explicit action, when the built-in keepalives are not sufficient.
	KeepaliveSources(context.Context, *connect.Request[sdp_go.AdminKeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error)
	// Create a new NATS token for a given public NKey. The user requesting must
	// control the associated private key also in order to connect to NATS as
	// the token is not enough on its own
	CreateToken(context.Context, *connect.Request[sdp_go.AdminCreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := sdp_go.File_account_proto.Services().ByName("AdminService").Methods()
	adminServiceListAccountsHandler := connect.NewUnaryHandler(
		AdminServiceListAccountsProcedure,
		svc.ListAccounts,
		connect.WithSchema(adminServiceMethods.ByName("ListAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateAccountHandler := connect.NewUnaryHandler(
		AdminServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(adminServiceMethods.ByName("CreateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateAccountHandler := connect.NewUnaryHandler(
		AdminServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(adminServiceMethods.ByName("UpdateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetAccountHandler := connect.NewUnaryHandler(
		AdminServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(adminServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AdminServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(adminServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListSourcesHandler := connect.NewUnaryHandler(
		AdminServiceListSourcesProcedure,
		svc.ListSources,
		connect.WithSchema(adminServiceMethods.ByName("ListSources")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateSourceHandler := connect.NewUnaryHandler(
		AdminServiceCreateSourceProcedure,
		svc.CreateSource,
		connect.WithSchema(adminServiceMethods.ByName("CreateSource")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetSourceHandler := connect.NewUnaryHandler(
		AdminServiceGetSourceProcedure,
		svc.GetSource,
		connect.WithSchema(adminServiceMethods.ByName("GetSource")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateSourceHandler := connect.NewUnaryHandler(
		AdminServiceUpdateSourceProcedure,
		svc.UpdateSource,
		connect.WithSchema(adminServiceMethods.ByName("UpdateSource")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteSourceHandler := connect.NewUnaryHandler(
		AdminServiceDeleteSourceProcedure,
		svc.DeleteSource,
		connect.WithSchema(adminServiceMethods.ByName("DeleteSource")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceKeepaliveSourcesHandler := connect.NewUnaryHandler(
		AdminServiceKeepaliveSourcesProcedure,
		svc.KeepaliveSources,
		connect.WithSchema(adminServiceMethods.ByName("KeepaliveSources")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateTokenHandler := connect.NewUnaryHandler(
		AdminServiceCreateTokenProcedure,
		svc.CreateToken,
		connect.WithSchema(adminServiceMethods.ByName("CreateToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/account.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceListAccountsProcedure:
			adminServiceListAccountsHandler.ServeHTTP(w, r)
		case AdminServiceCreateAccountProcedure:
			adminServiceCreateAccountHandler.ServeHTTP(w, r)
		case AdminServiceUpdateAccountProcedure:
			adminServiceUpdateAccountHandler.ServeHTTP(w, r)
		case AdminServiceGetAccountProcedure:
			adminServiceGetAccountHandler.ServeHTTP(w, r)
		case AdminServiceDeleteAccountProcedure:
			adminServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AdminServiceListSourcesProcedure:
			adminServiceListSourcesHandler.ServeHTTP(w, r)
		case AdminServiceCreateSourceProcedure:
			adminServiceCreateSourceHandler.ServeHTTP(w, r)
		case AdminServiceGetSourceProcedure:
			adminServiceGetSourceHandler.ServeHTTP(w, r)
		case AdminServiceUpdateSourceProcedure:
			adminServiceUpdateSourceHandler.ServeHTTP(w, r)
		case AdminServiceDeleteSourceProcedure:
			adminServiceDeleteSourceHandler.ServeHTTP(w, r)
		case AdminServiceKeepaliveSourcesProcedure:
			adminServiceKeepaliveSourcesHandler.ServeHTTP(w, r)
		case AdminServiceCreateTokenProcedure:
			adminServiceCreateTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) ListAccounts(context.Context, *connect.Request[sdp_go.ListAccountsRequest]) (*connect.Response[sdp_go.ListAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.ListAccounts is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateAccount(context.Context, *connect.Request[sdp_go.CreateAccountRequest]) (*connect.Response[sdp_go.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.CreateAccount is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateAccount(context.Context, *connect.Request[sdp_go.AdminUpdateAccountRequest]) (*connect.Response[sdp_go.UpdateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.UpdateAccount is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetAccount(context.Context, *connect.Request[sdp_go.AdminGetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.GetAccount is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteAccount(context.Context, *connect.Request[sdp_go.AdminDeleteAccountRequest]) (*connect.Response[sdp_go.AdminDeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.DeleteAccount is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListSources(context.Context, *connect.Request[sdp_go.AdminListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.ListSources is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateSource(context.Context, *connect.Request[sdp_go.AdminCreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.CreateSource is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSource(context.Context, *connect.Request[sdp_go.AdminGetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.GetSource is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateSource(context.Context, *connect.Request[sdp_go.AdminUpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.UpdateSource is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteSource(context.Context, *connect.Request[sdp_go.AdminDeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.DeleteSource is not implemented"))
}

func (UnimplementedAdminServiceHandler) KeepaliveSources(context.Context, *connect.Request[sdp_go.AdminKeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.KeepaliveSources is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateToken(context.Context, *connect.Request[sdp_go.AdminCreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.AdminService.CreateToken is not implemented"))
}

// ManagementServiceClient is a client for the account.ManagementService service.
type ManagementServiceClient interface {
	// Get the details of the account that this user belongs to
	GetAccount(context.Context, *connect.Request[sdp_go.GetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error)
	// Completely deletes the user's account. This includes all of the data in
	// that account, bookmarks, changes etc. It also deletes the current user,
	// and all other users in that account from Auth0
	DeleteAccount(context.Context, *connect.Request[sdp_go.DeleteAccountRequest]) (*connect.Response[sdp_go.DeleteAccountResponse], error)
	// Lists all sources within the user's account
	ListSources(context.Context, *connect.Request[sdp_go.ListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error)
	// Creates a new source within the user's account
	CreateSource(context.Context, *connect.Request[sdp_go.CreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error)
	// Get the details of a source
	GetSource(context.Context, *connect.Request[sdp_go.GetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error)
	// Update the details of a source
	UpdateSource(context.Context, *connect.Request[sdp_go.UpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error)
	// Deletes a source from a user's account
	DeleteSource(context.Context, *connect.Request[sdp_go.DeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error)
	// Sources heartbeat and health
	// List of all recently active sources and their health, includes information from srcman
	// meaning that it can show the status of managed sources that have not started and
	// connected yet
	ListAllSourcesStatus(context.Context, *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error)
	// Lists all active sources and their health. This should be used to determine
	// what types, scopes etc are available rather than `ListAllSourcesStatus` since
	// this endpoint only include running, available sources
	ListActiveSourcesStatus(context.Context, *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error)
	// Heartbeat from a source to keep it registered and healthy
	SubmitSourceHeartbeat(context.Context, *connect.Request[sdp_go.SubmitSourceHeartbeatRequest]) (*connect.Response[sdp_go.SubmitSourceHeartbeatResponse], error)
	// Updates sources to keep them running in the background. This can be used
	// to add explicit action, when the built-in keepalives are not sufficient.
	KeepaliveSources(context.Context, *connect.Request[sdp_go.KeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error)
	// Create a new NATS token for a given public NKey. The user requesting must
	// control the associated private key also in order to connect to NATS as
	// the token is not enough on its own
	CreateToken(context.Context, *connect.Request[sdp_go.CreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error)
	// Ensure that all reverse links are populated. This does internal debouncing
	// so the actual logic does only run when required.
	RevlinkWarmup(context.Context, *connect.Request[sdp_go.RevlinkWarmupRequest]) (*connect.ServerStreamForClient[sdp_go.RevlinkWarmupResponse], error)
	GetTrialEnd(context.Context, *connect.Request[sdp_go.GetTrialEndRequest]) (*connect.Response[sdp_go.GetTrialEndResponse], error)
	// Lists all the available item types that can be discovered by sources that are running and healthy
	ListAvailableItemTypes(context.Context, *connect.Request[sdp_go.ListAvailableItemTypesRequest]) (*connect.Response[sdp_go.ListAvailableItemTypesResponse], error)
}

// NewManagementServiceClient constructs a client for the account.ManagementService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	managementServiceMethods := sdp_go.File_account_proto.Services().ByName("ManagementService").Methods()
	return &managementServiceClient{
		getAccount: connect.NewClient[sdp_go.GetAccountRequest, sdp_go.GetAccountResponse](
			httpClient,
			baseURL+ManagementServiceGetAccountProcedure,
			connect.WithSchema(managementServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[sdp_go.DeleteAccountRequest, sdp_go.DeleteAccountResponse](
			httpClient,
			baseURL+ManagementServiceDeleteAccountProcedure,
			connect.WithSchema(managementServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		listSources: connect.NewClient[sdp_go.ListSourcesRequest, sdp_go.ListSourcesResponse](
			httpClient,
			baseURL+ManagementServiceListSourcesProcedure,
			connect.WithSchema(managementServiceMethods.ByName("ListSources")),
			connect.WithClientOptions(opts...),
		),
		createSource: connect.NewClient[sdp_go.CreateSourceRequest, sdp_go.CreateSourceResponse](
			httpClient,
			baseURL+ManagementServiceCreateSourceProcedure,
			connect.WithSchema(managementServiceMethods.ByName("CreateSource")),
			connect.WithClientOptions(opts...),
		),
		getSource: connect.NewClient[sdp_go.GetSourceRequest, sdp_go.GetSourceResponse](
			httpClient,
			baseURL+ManagementServiceGetSourceProcedure,
			connect.WithSchema(managementServiceMethods.ByName("GetSource")),
			connect.WithClientOptions(opts...),
		),
		updateSource: connect.NewClient[sdp_go.UpdateSourceRequest, sdp_go.UpdateSourceResponse](
			httpClient,
			baseURL+ManagementServiceUpdateSourceProcedure,
			connect.WithSchema(managementServiceMethods.ByName("UpdateSource")),
			connect.WithClientOptions(opts...),
		),
		deleteSource: connect.NewClient[sdp_go.DeleteSourceRequest, sdp_go.DeleteSourceResponse](
			httpClient,
			baseURL+ManagementServiceDeleteSourceProcedure,
			connect.WithSchema(managementServiceMethods.ByName("DeleteSource")),
			connect.WithClientOptions(opts...),
		),
		listAllSourcesStatus: connect.NewClient[sdp_go.ListAllSourcesStatusRequest, sdp_go.ListAllSourcesStatusResponse](
			httpClient,
			baseURL+ManagementServiceListAllSourcesStatusProcedure,
			connect.WithSchema(managementServiceMethods.ByName("ListAllSourcesStatus")),
			connect.WithClientOptions(opts...),
		),
		listActiveSourcesStatus: connect.NewClient[sdp_go.ListAllSourcesStatusRequest, sdp_go.ListAllSourcesStatusResponse](
			httpClient,
			baseURL+ManagementServiceListActiveSourcesStatusProcedure,
			connect.WithSchema(managementServiceMethods.ByName("ListActiveSourcesStatus")),
			connect.WithClientOptions(opts...),
		),
		submitSourceHeartbeat: connect.NewClient[sdp_go.SubmitSourceHeartbeatRequest, sdp_go.SubmitSourceHeartbeatResponse](
			httpClient,
			baseURL+ManagementServiceSubmitSourceHeartbeatProcedure,
			connect.WithSchema(managementServiceMethods.ByName("SubmitSourceHeartbeat")),
			connect.WithClientOptions(opts...),
		),
		keepaliveSources: connect.NewClient[sdp_go.KeepaliveSourcesRequest, sdp_go.KeepaliveSourcesResponse](
			httpClient,
			baseURL+ManagementServiceKeepaliveSourcesProcedure,
			connect.WithSchema(managementServiceMethods.ByName("KeepaliveSources")),
			connect.WithClientOptions(opts...),
		),
		createToken: connect.NewClient[sdp_go.CreateTokenRequest, sdp_go.CreateTokenResponse](
			httpClient,
			baseURL+ManagementServiceCreateTokenProcedure,
			connect.WithSchema(managementServiceMethods.ByName("CreateToken")),
			connect.WithClientOptions(opts...),
		),
		revlinkWarmup: connect.NewClient[sdp_go.RevlinkWarmupRequest, sdp_go.RevlinkWarmupResponse](
			httpClient,
			baseURL+ManagementServiceRevlinkWarmupProcedure,
			connect.WithSchema(managementServiceMethods.ByName("RevlinkWarmup")),
			connect.WithClientOptions(opts...),
		),
		getTrialEnd: connect.NewClient[sdp_go.GetTrialEndRequest, sdp_go.GetTrialEndResponse](
			httpClient,
			baseURL+ManagementServiceGetTrialEndProcedure,
			connect.WithSchema(managementServiceMethods.ByName("GetTrialEnd")),
			connect.WithClientOptions(opts...),
		),
		listAvailableItemTypes: connect.NewClient[sdp_go.ListAvailableItemTypesRequest, sdp_go.ListAvailableItemTypesResponse](
			httpClient,
			baseURL+ManagementServiceListAvailableItemTypesProcedure,
			connect.WithSchema(managementServiceMethods.ByName("ListAvailableItemTypes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	getAccount              *connect.Client[sdp_go.GetAccountRequest, sdp_go.GetAccountResponse]
	deleteAccount           *connect.Client[sdp_go.DeleteAccountRequest, sdp_go.DeleteAccountResponse]
	listSources             *connect.Client[sdp_go.ListSourcesRequest, sdp_go.ListSourcesResponse]
	createSource            *connect.Client[sdp_go.CreateSourceRequest, sdp_go.CreateSourceResponse]
	getSource               *connect.Client[sdp_go.GetSourceRequest, sdp_go.GetSourceResponse]
	updateSource            *connect.Client[sdp_go.UpdateSourceRequest, sdp_go.UpdateSourceResponse]
	deleteSource            *connect.Client[sdp_go.DeleteSourceRequest, sdp_go.DeleteSourceResponse]
	listAllSourcesStatus    *connect.Client[sdp_go.ListAllSourcesStatusRequest, sdp_go.ListAllSourcesStatusResponse]
	listActiveSourcesStatus *connect.Client[sdp_go.ListAllSourcesStatusRequest, sdp_go.ListAllSourcesStatusResponse]
	submitSourceHeartbeat   *connect.Client[sdp_go.SubmitSourceHeartbeatRequest, sdp_go.SubmitSourceHeartbeatResponse]
	keepaliveSources        *connect.Client[sdp_go.KeepaliveSourcesRequest, sdp_go.KeepaliveSourcesResponse]
	createToken             *connect.Client[sdp_go.CreateTokenRequest, sdp_go.CreateTokenResponse]
	revlinkWarmup           *connect.Client[sdp_go.RevlinkWarmupRequest, sdp_go.RevlinkWarmupResponse]
	getTrialEnd             *connect.Client[sdp_go.GetTrialEndRequest, sdp_go.GetTrialEndResponse]
	listAvailableItemTypes  *connect.Client[sdp_go.ListAvailableItemTypesRequest, sdp_go.ListAvailableItemTypesResponse]
}

// GetAccount calls account.ManagementService.GetAccount.
func (c *managementServiceClient) GetAccount(ctx context.Context, req *connect.Request[sdp_go.GetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// DeleteAccount calls account.ManagementService.DeleteAccount.
func (c *managementServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[sdp_go.DeleteAccountRequest]) (*connect.Response[sdp_go.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// ListSources calls account.ManagementService.ListSources.
func (c *managementServiceClient) ListSources(ctx context.Context, req *connect.Request[sdp_go.ListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error) {
	return c.listSources.CallUnary(ctx, req)
}

// CreateSource calls account.ManagementService.CreateSource.
func (c *managementServiceClient) CreateSource(ctx context.Context, req *connect.Request[sdp_go.CreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error) {
	return c.createSource.CallUnary(ctx, req)
}

// GetSource calls account.ManagementService.GetSource.
func (c *managementServiceClient) GetSource(ctx context.Context, req *connect.Request[sdp_go.GetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error) {
	return c.getSource.CallUnary(ctx, req)
}

// UpdateSource calls account.ManagementService.UpdateSource.
func (c *managementServiceClient) UpdateSource(ctx context.Context, req *connect.Request[sdp_go.UpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error) {
	return c.updateSource.CallUnary(ctx, req)
}

// DeleteSource calls account.ManagementService.DeleteSource.
func (c *managementServiceClient) DeleteSource(ctx context.Context, req *connect.Request[sdp_go.DeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error) {
	return c.deleteSource.CallUnary(ctx, req)
}

// ListAllSourcesStatus calls account.ManagementService.ListAllSourcesStatus.
func (c *managementServiceClient) ListAllSourcesStatus(ctx context.Context, req *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error) {
	return c.listAllSourcesStatus.CallUnary(ctx, req)
}

// ListActiveSourcesStatus calls account.ManagementService.ListActiveSourcesStatus.
func (c *managementServiceClient) ListActiveSourcesStatus(ctx context.Context, req *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error) {
	return c.listActiveSourcesStatus.CallUnary(ctx, req)
}

// SubmitSourceHeartbeat calls account.ManagementService.SubmitSourceHeartbeat.
func (c *managementServiceClient) SubmitSourceHeartbeat(ctx context.Context, req *connect.Request[sdp_go.SubmitSourceHeartbeatRequest]) (*connect.Response[sdp_go.SubmitSourceHeartbeatResponse], error) {
	return c.submitSourceHeartbeat.CallUnary(ctx, req)
}

// KeepaliveSources calls account.ManagementService.KeepaliveSources.
func (c *managementServiceClient) KeepaliveSources(ctx context.Context, req *connect.Request[sdp_go.KeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error) {
	return c.keepaliveSources.CallUnary(ctx, req)
}

// CreateToken calls account.ManagementService.CreateToken.
func (c *managementServiceClient) CreateToken(ctx context.Context, req *connect.Request[sdp_go.CreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error) {
	return c.createToken.CallUnary(ctx, req)
}

// RevlinkWarmup calls account.ManagementService.RevlinkWarmup.
func (c *managementServiceClient) RevlinkWarmup(ctx context.Context, req *connect.Request[sdp_go.RevlinkWarmupRequest]) (*connect.ServerStreamForClient[sdp_go.RevlinkWarmupResponse], error) {
	return c.revlinkWarmup.CallServerStream(ctx, req)
}

// GetTrialEnd calls account.ManagementService.GetTrialEnd.
func (c *managementServiceClient) GetTrialEnd(ctx context.Context, req *connect.Request[sdp_go.GetTrialEndRequest]) (*connect.Response[sdp_go.GetTrialEndResponse], error) {
	return c.getTrialEnd.CallUnary(ctx, req)
}

// ListAvailableItemTypes calls account.ManagementService.ListAvailableItemTypes.
func (c *managementServiceClient) ListAvailableItemTypes(ctx context.Context, req *connect.Request[sdp_go.ListAvailableItemTypesRequest]) (*connect.Response[sdp_go.ListAvailableItemTypesResponse], error) {
	return c.listAvailableItemTypes.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the account.ManagementService service.
type ManagementServiceHandler interface {
	// Get the details of the account that this user belongs to
	GetAccount(context.Context, *connect.Request[sdp_go.GetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error)
	// Completely deletes the user's account. This includes all of the data in
	// that account, bookmarks, changes etc. It also deletes the current user,
	// and all other users in that account from Auth0
	DeleteAccount(context.Context, *connect.Request[sdp_go.DeleteAccountRequest]) (*connect.Response[sdp_go.DeleteAccountResponse], error)
	// Lists all sources within the user's account
	ListSources(context.Context, *connect.Request[sdp_go.ListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error)
	// Creates a new source within the user's account
	CreateSource(context.Context, *connect.Request[sdp_go.CreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error)
	// Get the details of a source
	GetSource(context.Context, *connect.Request[sdp_go.GetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error)
	// Update the details of a source
	UpdateSource(context.Context, *connect.Request[sdp_go.UpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error)
	// Deletes a source from a user's account
	DeleteSource(context.Context, *connect.Request[sdp_go.DeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error)
	// Sources heartbeat and health
	// List of all recently active sources and their health, includes information from srcman
	// meaning that it can show the status of managed sources that have not started and
	// connected yet
	ListAllSourcesStatus(context.Context, *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error)
	// Lists all active sources and their health. This should be used to determine
	// what types, scopes etc are available rather than `ListAllSourcesStatus` since
	// this endpoint only include running, available sources
	ListActiveSourcesStatus(context.Context, *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error)
	// Heartbeat from a source to keep it registered and healthy
	SubmitSourceHeartbeat(context.Context, *connect.Request[sdp_go.SubmitSourceHeartbeatRequest]) (*connect.Response[sdp_go.SubmitSourceHeartbeatResponse], error)
	// Updates sources to keep them running in the background. This can be used
	// to add explicit action, when the built-in keepalives are not sufficient.
	KeepaliveSources(context.Context, *connect.Request[sdp_go.KeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error)
	// Create a new NATS token for a given public NKey. The user requesting must
	// control the associated private key also in order to connect to NATS as
	// the token is not enough on its own
	CreateToken(context.Context, *connect.Request[sdp_go.CreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error)
	// Ensure that all reverse links are populated. This does internal debouncing
	// so the actual logic does only run when required.
	RevlinkWarmup(context.Context, *connect.Request[sdp_go.RevlinkWarmupRequest], *connect.ServerStream[sdp_go.RevlinkWarmupResponse]) error
	GetTrialEnd(context.Context, *connect.Request[sdp_go.GetTrialEndRequest]) (*connect.Response[sdp_go.GetTrialEndResponse], error)
	// Lists all the available item types that can be discovered by sources that are running and healthy
	ListAvailableItemTypes(context.Context, *connect.Request[sdp_go.ListAvailableItemTypesRequest]) (*connect.Response[sdp_go.ListAvailableItemTypesResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementServiceMethods := sdp_go.File_account_proto.Services().ByName("ManagementService").Methods()
	managementServiceGetAccountHandler := connect.NewUnaryHandler(
		ManagementServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(managementServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceDeleteAccountHandler := connect.NewUnaryHandler(
		ManagementServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(managementServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceListSourcesHandler := connect.NewUnaryHandler(
		ManagementServiceListSourcesProcedure,
		svc.ListSources,
		connect.WithSchema(managementServiceMethods.ByName("ListSources")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceCreateSourceHandler := connect.NewUnaryHandler(
		ManagementServiceCreateSourceProcedure,
		svc.CreateSource,
		connect.WithSchema(managementServiceMethods.ByName("CreateSource")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetSourceHandler := connect.NewUnaryHandler(
		ManagementServiceGetSourceProcedure,
		svc.GetSource,
		connect.WithSchema(managementServiceMethods.ByName("GetSource")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceUpdateSourceHandler := connect.NewUnaryHandler(
		ManagementServiceUpdateSourceProcedure,
		svc.UpdateSource,
		connect.WithSchema(managementServiceMethods.ByName("UpdateSource")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceDeleteSourceHandler := connect.NewUnaryHandler(
		ManagementServiceDeleteSourceProcedure,
		svc.DeleteSource,
		connect.WithSchema(managementServiceMethods.ByName("DeleteSource")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceListAllSourcesStatusHandler := connect.NewUnaryHandler(
		ManagementServiceListAllSourcesStatusProcedure,
		svc.ListAllSourcesStatus,
		connect.WithSchema(managementServiceMethods.ByName("ListAllSourcesStatus")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceListActiveSourcesStatusHandler := connect.NewUnaryHandler(
		ManagementServiceListActiveSourcesStatusProcedure,
		svc.ListActiveSourcesStatus,
		connect.WithSchema(managementServiceMethods.ByName("ListActiveSourcesStatus")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceSubmitSourceHeartbeatHandler := connect.NewUnaryHandler(
		ManagementServiceSubmitSourceHeartbeatProcedure,
		svc.SubmitSourceHeartbeat,
		connect.WithSchema(managementServiceMethods.ByName("SubmitSourceHeartbeat")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceKeepaliveSourcesHandler := connect.NewUnaryHandler(
		ManagementServiceKeepaliveSourcesProcedure,
		svc.KeepaliveSources,
		connect.WithSchema(managementServiceMethods.ByName("KeepaliveSources")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceCreateTokenHandler := connect.NewUnaryHandler(
		ManagementServiceCreateTokenProcedure,
		svc.CreateToken,
		connect.WithSchema(managementServiceMethods.ByName("CreateToken")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceRevlinkWarmupHandler := connect.NewServerStreamHandler(
		ManagementServiceRevlinkWarmupProcedure,
		svc.RevlinkWarmup,
		connect.WithSchema(managementServiceMethods.ByName("RevlinkWarmup")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceGetTrialEndHandler := connect.NewUnaryHandler(
		ManagementServiceGetTrialEndProcedure,
		svc.GetTrialEnd,
		connect.WithSchema(managementServiceMethods.ByName("GetTrialEnd")),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceListAvailableItemTypesHandler := connect.NewUnaryHandler(
		ManagementServiceListAvailableItemTypesProcedure,
		svc.ListAvailableItemTypes,
		connect.WithSchema(managementServiceMethods.ByName("ListAvailableItemTypes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/account.ManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementServiceGetAccountProcedure:
			managementServiceGetAccountHandler.ServeHTTP(w, r)
		case ManagementServiceDeleteAccountProcedure:
			managementServiceDeleteAccountHandler.ServeHTTP(w, r)
		case ManagementServiceListSourcesProcedure:
			managementServiceListSourcesHandler.ServeHTTP(w, r)
		case ManagementServiceCreateSourceProcedure:
			managementServiceCreateSourceHandler.ServeHTTP(w, r)
		case ManagementServiceGetSourceProcedure:
			managementServiceGetSourceHandler.ServeHTTP(w, r)
		case ManagementServiceUpdateSourceProcedure:
			managementServiceUpdateSourceHandler.ServeHTTP(w, r)
		case ManagementServiceDeleteSourceProcedure:
			managementServiceDeleteSourceHandler.ServeHTTP(w, r)
		case ManagementServiceListAllSourcesStatusProcedure:
			managementServiceListAllSourcesStatusHandler.ServeHTTP(w, r)
		case ManagementServiceListActiveSourcesStatusProcedure:
			managementServiceListActiveSourcesStatusHandler.ServeHTTP(w, r)
		case ManagementServiceSubmitSourceHeartbeatProcedure:
			managementServiceSubmitSourceHeartbeatHandler.ServeHTTP(w, r)
		case ManagementServiceKeepaliveSourcesProcedure:
			managementServiceKeepaliveSourcesHandler.ServeHTTP(w, r)
		case ManagementServiceCreateTokenProcedure:
			managementServiceCreateTokenHandler.ServeHTTP(w, r)
		case ManagementServiceRevlinkWarmupProcedure:
			managementServiceRevlinkWarmupHandler.ServeHTTP(w, r)
		case ManagementServiceGetTrialEndProcedure:
			managementServiceGetTrialEndHandler.ServeHTTP(w, r)
		case ManagementServiceListAvailableItemTypesProcedure:
			managementServiceListAvailableItemTypesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) GetAccount(context.Context, *connect.Request[sdp_go.GetAccountRequest]) (*connect.Response[sdp_go.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.GetAccount is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteAccount(context.Context, *connect.Request[sdp_go.DeleteAccountRequest]) (*connect.Response[sdp_go.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.DeleteAccount is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListSources(context.Context, *connect.Request[sdp_go.ListSourcesRequest]) (*connect.Response[sdp_go.ListSourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.ListSources is not implemented"))
}

func (UnimplementedManagementServiceHandler) CreateSource(context.Context, *connect.Request[sdp_go.CreateSourceRequest]) (*connect.Response[sdp_go.CreateSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.CreateSource is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetSource(context.Context, *connect.Request[sdp_go.GetSourceRequest]) (*connect.Response[sdp_go.GetSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.GetSource is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateSource(context.Context, *connect.Request[sdp_go.UpdateSourceRequest]) (*connect.Response[sdp_go.UpdateSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.UpdateSource is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteSource(context.Context, *connect.Request[sdp_go.DeleteSourceRequest]) (*connect.Response[sdp_go.DeleteSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.DeleteSource is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListAllSourcesStatus(context.Context, *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.ListAllSourcesStatus is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListActiveSourcesStatus(context.Context, *connect.Request[sdp_go.ListAllSourcesStatusRequest]) (*connect.Response[sdp_go.ListAllSourcesStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.ListActiveSourcesStatus is not implemented"))
}

func (UnimplementedManagementServiceHandler) SubmitSourceHeartbeat(context.Context, *connect.Request[sdp_go.SubmitSourceHeartbeatRequest]) (*connect.Response[sdp_go.SubmitSourceHeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.SubmitSourceHeartbeat is not implemented"))
}

func (UnimplementedManagementServiceHandler) KeepaliveSources(context.Context, *connect.Request[sdp_go.KeepaliveSourcesRequest]) (*connect.Response[sdp_go.KeepaliveSourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.KeepaliveSources is not implemented"))
}

func (UnimplementedManagementServiceHandler) CreateToken(context.Context, *connect.Request[sdp_go.CreateTokenRequest]) (*connect.Response[sdp_go.CreateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.CreateToken is not implemented"))
}

func (UnimplementedManagementServiceHandler) RevlinkWarmup(context.Context, *connect.Request[sdp_go.RevlinkWarmupRequest], *connect.ServerStream[sdp_go.RevlinkWarmupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.RevlinkWarmup is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetTrialEnd(context.Context, *connect.Request[sdp_go.GetTrialEndRequest]) (*connect.Response[sdp_go.GetTrialEndResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.GetTrialEnd is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListAvailableItemTypes(context.Context, *connect.Request[sdp_go.ListAvailableItemTypesRequest]) (*connect.Response[sdp_go.ListAvailableItemTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.ManagementService.ListAvailableItemTypes is not implemented"))
}
