// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bookmarks.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookmarksServiceName is the fully-qualified name of the BookmarksService service.
	BookmarksServiceName = "bookmarks.BookmarksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookmarksServiceListBookmarksProcedure is the fully-qualified name of the BookmarksService's
	// ListBookmarks RPC.
	BookmarksServiceListBookmarksProcedure = "/bookmarks.BookmarksService/ListBookmarks"
	// BookmarksServiceCreateBookmarkProcedure is the fully-qualified name of the BookmarksService's
	// CreateBookmark RPC.
	BookmarksServiceCreateBookmarkProcedure = "/bookmarks.BookmarksService/CreateBookmark"
	// BookmarksServiceGetBookmarkProcedure is the fully-qualified name of the BookmarksService's
	// GetBookmark RPC.
	BookmarksServiceGetBookmarkProcedure = "/bookmarks.BookmarksService/GetBookmark"
	// BookmarksServiceUpdateBookmarkProcedure is the fully-qualified name of the BookmarksService's
	// UpdateBookmark RPC.
	BookmarksServiceUpdateBookmarkProcedure = "/bookmarks.BookmarksService/UpdateBookmark"
	// BookmarksServiceDeleteBookmarkProcedure is the fully-qualified name of the BookmarksService's
	// DeleteBookmark RPC.
	BookmarksServiceDeleteBookmarkProcedure = "/bookmarks.BookmarksService/DeleteBookmark"
	// BookmarksServiceGetAffectedBookmarksProcedure is the fully-qualified name of the
	// BookmarksService's GetAffectedBookmarks RPC.
	BookmarksServiceGetAffectedBookmarksProcedure = "/bookmarks.BookmarksService/GetAffectedBookmarks"
)

// BookmarksServiceClient is a client for the bookmarks.BookmarksService service.
type BookmarksServiceClient interface {
	// ListBookmarks returns all bookmarks of the current user. note that this does not include the actual bookmark data, use GetBookmark for that
	ListBookmarks(context.Context, *connect.Request[sdp_go.ListBookmarksRequest]) (*connect.Response[sdp_go.ListBookmarkResponse], error)
	// CreateBookmark creates a new bookmark
	CreateBookmark(context.Context, *connect.Request[sdp_go.CreateBookmarkRequest]) (*connect.Response[sdp_go.CreateBookmarkResponse], error)
	// GetBookmark returns the bookmark with the given UUID. This can also return snapshots as bookmarks and will strip the stored items from the response.
	GetBookmark(context.Context, *connect.Request[sdp_go.GetBookmarkRequest]) (*connect.Response[sdp_go.GetBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect.Request[sdp_go.UpdateBookmarkRequest]) (*connect.Response[sdp_go.UpdateBookmarkResponse], error)
	DeleteBookmark(context.Context, *connect.Request[sdp_go.DeleteBookmarkRequest]) (*connect.Response[sdp_go.DeleteBookmarkResponse], error)
	// a helper method to find all affected apps for a given blast radius snapshot
	GetAffectedBookmarks(context.Context, *connect.Request[sdp_go.GetAffectedBookmarksRequest]) (*connect.Response[sdp_go.GetAffectedBookmarksResponse], error)
}

// NewBookmarksServiceClient constructs a client for the bookmarks.BookmarksService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookmarksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookmarksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bookmarksServiceMethods := sdp_go.File_bookmarks_proto.Services().ByName("BookmarksService").Methods()
	return &bookmarksServiceClient{
		listBookmarks: connect.NewClient[sdp_go.ListBookmarksRequest, sdp_go.ListBookmarkResponse](
			httpClient,
			baseURL+BookmarksServiceListBookmarksProcedure,
			connect.WithSchema(bookmarksServiceMethods.ByName("ListBookmarks")),
			connect.WithClientOptions(opts...),
		),
		createBookmark: connect.NewClient[sdp_go.CreateBookmarkRequest, sdp_go.CreateBookmarkResponse](
			httpClient,
			baseURL+BookmarksServiceCreateBookmarkProcedure,
			connect.WithSchema(bookmarksServiceMethods.ByName("CreateBookmark")),
			connect.WithClientOptions(opts...),
		),
		getBookmark: connect.NewClient[sdp_go.GetBookmarkRequest, sdp_go.GetBookmarkResponse](
			httpClient,
			baseURL+BookmarksServiceGetBookmarkProcedure,
			connect.WithSchema(bookmarksServiceMethods.ByName("GetBookmark")),
			connect.WithClientOptions(opts...),
		),
		updateBookmark: connect.NewClient[sdp_go.UpdateBookmarkRequest, sdp_go.UpdateBookmarkResponse](
			httpClient,
			baseURL+BookmarksServiceUpdateBookmarkProcedure,
			connect.WithSchema(bookmarksServiceMethods.ByName("UpdateBookmark")),
			connect.WithClientOptions(opts...),
		),
		deleteBookmark: connect.NewClient[sdp_go.DeleteBookmarkRequest, sdp_go.DeleteBookmarkResponse](
			httpClient,
			baseURL+BookmarksServiceDeleteBookmarkProcedure,
			connect.WithSchema(bookmarksServiceMethods.ByName("DeleteBookmark")),
			connect.WithClientOptions(opts...),
		),
		getAffectedBookmarks: connect.NewClient[sdp_go.GetAffectedBookmarksRequest, sdp_go.GetAffectedBookmarksResponse](
			httpClient,
			baseURL+BookmarksServiceGetAffectedBookmarksProcedure,
			connect.WithSchema(bookmarksServiceMethods.ByName("GetAffectedBookmarks")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookmarksServiceClient implements BookmarksServiceClient.
type bookmarksServiceClient struct {
	listBookmarks        *connect.Client[sdp_go.ListBookmarksRequest, sdp_go.ListBookmarkResponse]
	createBookmark       *connect.Client[sdp_go.CreateBookmarkRequest, sdp_go.CreateBookmarkResponse]
	getBookmark          *connect.Client[sdp_go.GetBookmarkRequest, sdp_go.GetBookmarkResponse]
	updateBookmark       *connect.Client[sdp_go.UpdateBookmarkRequest, sdp_go.UpdateBookmarkResponse]
	deleteBookmark       *connect.Client[sdp_go.DeleteBookmarkRequest, sdp_go.DeleteBookmarkResponse]
	getAffectedBookmarks *connect.Client[sdp_go.GetAffectedBookmarksRequest, sdp_go.GetAffectedBookmarksResponse]
}

// ListBookmarks calls bookmarks.BookmarksService.ListBookmarks.
func (c *bookmarksServiceClient) ListBookmarks(ctx context.Context, req *connect.Request[sdp_go.ListBookmarksRequest]) (*connect.Response[sdp_go.ListBookmarkResponse], error) {
	return c.listBookmarks.CallUnary(ctx, req)
}

// CreateBookmark calls bookmarks.BookmarksService.CreateBookmark.
func (c *bookmarksServiceClient) CreateBookmark(ctx context.Context, req *connect.Request[sdp_go.CreateBookmarkRequest]) (*connect.Response[sdp_go.CreateBookmarkResponse], error) {
	return c.createBookmark.CallUnary(ctx, req)
}

// GetBookmark calls bookmarks.BookmarksService.GetBookmark.
func (c *bookmarksServiceClient) GetBookmark(ctx context.Context, req *connect.Request[sdp_go.GetBookmarkRequest]) (*connect.Response[sdp_go.GetBookmarkResponse], error) {
	return c.getBookmark.CallUnary(ctx, req)
}

// UpdateBookmark calls bookmarks.BookmarksService.UpdateBookmark.
func (c *bookmarksServiceClient) UpdateBookmark(ctx context.Context, req *connect.Request[sdp_go.UpdateBookmarkRequest]) (*connect.Response[sdp_go.UpdateBookmarkResponse], error) {
	return c.updateBookmark.CallUnary(ctx, req)
}

// DeleteBookmark calls bookmarks.BookmarksService.DeleteBookmark.
func (c *bookmarksServiceClient) DeleteBookmark(ctx context.Context, req *connect.Request[sdp_go.DeleteBookmarkRequest]) (*connect.Response[sdp_go.DeleteBookmarkResponse], error) {
	return c.deleteBookmark.CallUnary(ctx, req)
}

// GetAffectedBookmarks calls bookmarks.BookmarksService.GetAffectedBookmarks.
func (c *bookmarksServiceClient) GetAffectedBookmarks(ctx context.Context, req *connect.Request[sdp_go.GetAffectedBookmarksRequest]) (*connect.Response[sdp_go.GetAffectedBookmarksResponse], error) {
	return c.getAffectedBookmarks.CallUnary(ctx, req)
}

// BookmarksServiceHandler is an implementation of the bookmarks.BookmarksService service.
type BookmarksServiceHandler interface {
	// ListBookmarks returns all bookmarks of the current user. note that this does not include the actual bookmark data, use GetBookmark for that
	ListBookmarks(context.Context, *connect.Request[sdp_go.ListBookmarksRequest]) (*connect.Response[sdp_go.ListBookmarkResponse], error)
	// CreateBookmark creates a new bookmark
	CreateBookmark(context.Context, *connect.Request[sdp_go.CreateBookmarkRequest]) (*connect.Response[sdp_go.CreateBookmarkResponse], error)
	// GetBookmark returns the bookmark with the given UUID. This can also return snapshots as bookmarks and will strip the stored items from the response.
	GetBookmark(context.Context, *connect.Request[sdp_go.GetBookmarkRequest]) (*connect.Response[sdp_go.GetBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect.Request[sdp_go.UpdateBookmarkRequest]) (*connect.Response[sdp_go.UpdateBookmarkResponse], error)
	DeleteBookmark(context.Context, *connect.Request[sdp_go.DeleteBookmarkRequest]) (*connect.Response[sdp_go.DeleteBookmarkResponse], error)
	// a helper method to find all affected apps for a given blast radius snapshot
	GetAffectedBookmarks(context.Context, *connect.Request[sdp_go.GetAffectedBookmarksRequest]) (*connect.Response[sdp_go.GetAffectedBookmarksResponse], error)
}

// NewBookmarksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookmarksServiceHandler(svc BookmarksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookmarksServiceMethods := sdp_go.File_bookmarks_proto.Services().ByName("BookmarksService").Methods()
	bookmarksServiceListBookmarksHandler := connect.NewUnaryHandler(
		BookmarksServiceListBookmarksProcedure,
		svc.ListBookmarks,
		connect.WithSchema(bookmarksServiceMethods.ByName("ListBookmarks")),
		connect.WithHandlerOptions(opts...),
	)
	bookmarksServiceCreateBookmarkHandler := connect.NewUnaryHandler(
		BookmarksServiceCreateBookmarkProcedure,
		svc.CreateBookmark,
		connect.WithSchema(bookmarksServiceMethods.ByName("CreateBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	bookmarksServiceGetBookmarkHandler := connect.NewUnaryHandler(
		BookmarksServiceGetBookmarkProcedure,
		svc.GetBookmark,
		connect.WithSchema(bookmarksServiceMethods.ByName("GetBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	bookmarksServiceUpdateBookmarkHandler := connect.NewUnaryHandler(
		BookmarksServiceUpdateBookmarkProcedure,
		svc.UpdateBookmark,
		connect.WithSchema(bookmarksServiceMethods.ByName("UpdateBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	bookmarksServiceDeleteBookmarkHandler := connect.NewUnaryHandler(
		BookmarksServiceDeleteBookmarkProcedure,
		svc.DeleteBookmark,
		connect.WithSchema(bookmarksServiceMethods.ByName("DeleteBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	bookmarksServiceGetAffectedBookmarksHandler := connect.NewUnaryHandler(
		BookmarksServiceGetAffectedBookmarksProcedure,
		svc.GetAffectedBookmarks,
		connect.WithSchema(bookmarksServiceMethods.ByName("GetAffectedBookmarks")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bookmarks.BookmarksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookmarksServiceListBookmarksProcedure:
			bookmarksServiceListBookmarksHandler.ServeHTTP(w, r)
		case BookmarksServiceCreateBookmarkProcedure:
			bookmarksServiceCreateBookmarkHandler.ServeHTTP(w, r)
		case BookmarksServiceGetBookmarkProcedure:
			bookmarksServiceGetBookmarkHandler.ServeHTTP(w, r)
		case BookmarksServiceUpdateBookmarkProcedure:
			bookmarksServiceUpdateBookmarkHandler.ServeHTTP(w, r)
		case BookmarksServiceDeleteBookmarkProcedure:
			bookmarksServiceDeleteBookmarkHandler.ServeHTTP(w, r)
		case BookmarksServiceGetAffectedBookmarksProcedure:
			bookmarksServiceGetAffectedBookmarksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookmarksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookmarksServiceHandler struct{}

func (UnimplementedBookmarksServiceHandler) ListBookmarks(context.Context, *connect.Request[sdp_go.ListBookmarksRequest]) (*connect.Response[sdp_go.ListBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookmarks.BookmarksService.ListBookmarks is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) CreateBookmark(context.Context, *connect.Request[sdp_go.CreateBookmarkRequest]) (*connect.Response[sdp_go.CreateBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookmarks.BookmarksService.CreateBookmark is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) GetBookmark(context.Context, *connect.Request[sdp_go.GetBookmarkRequest]) (*connect.Response[sdp_go.GetBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookmarks.BookmarksService.GetBookmark is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) UpdateBookmark(context.Context, *connect.Request[sdp_go.UpdateBookmarkRequest]) (*connect.Response[sdp_go.UpdateBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookmarks.BookmarksService.UpdateBookmark is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) DeleteBookmark(context.Context, *connect.Request[sdp_go.DeleteBookmarkRequest]) (*connect.Response[sdp_go.DeleteBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookmarks.BookmarksService.DeleteBookmark is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) GetAffectedBookmarks(context.Context, *connect.Request[sdp_go.GetAffectedBookmarksRequest]) (*connect.Response[sdp_go.GetAffectedBookmarksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bookmarks.BookmarksService.GetAffectedBookmarks is not implemented"))
}
