// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: invites.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InviteServiceName is the fully-qualified name of the InviteService service.
	InviteServiceName = "invites.InviteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InviteServiceCreateInviteProcedure is the fully-qualified name of the InviteService's
	// CreateInvite RPC.
	InviteServiceCreateInviteProcedure = "/invites.InviteService/CreateInvite"
	// InviteServiceListInvitesProcedure is the fully-qualified name of the InviteService's ListInvites
	// RPC.
	InviteServiceListInvitesProcedure = "/invites.InviteService/ListInvites"
	// InviteServiceRevokeInviteProcedure is the fully-qualified name of the InviteService's
	// RevokeInvite RPC.
	InviteServiceRevokeInviteProcedure = "/invites.InviteService/RevokeInvite"
	// InviteServiceResendInviteProcedure is the fully-qualified name of the InviteService's
	// ResendInvite RPC.
	InviteServiceResendInviteProcedure = "/invites.InviteService/ResendInvite"
)

// InviteServiceClient is a client for the invites.InviteService service.
type InviteServiceClient interface {
	CreateInvite(context.Context, *connect.Request[sdp_go.CreateInviteRequest]) (*connect.Response[sdp_go.CreateInviteResponse], error)
	ListInvites(context.Context, *connect.Request[sdp_go.ListInvitesRequest]) (*connect.Response[sdp_go.ListInvitesResponse], error)
	RevokeInvite(context.Context, *connect.Request[sdp_go.RevokeInviteRequest]) (*connect.Response[sdp_go.RevokeInviteResponse], error)
	ResendInvite(context.Context, *connect.Request[sdp_go.ResendInviteRequest]) (*connect.Response[sdp_go.ResendInviteResponse], error)
}

// NewInviteServiceClient constructs a client for the invites.InviteService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInviteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InviteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	inviteServiceMethods := sdp_go.File_invites_proto.Services().ByName("InviteService").Methods()
	return &inviteServiceClient{
		createInvite: connect.NewClient[sdp_go.CreateInviteRequest, sdp_go.CreateInviteResponse](
			httpClient,
			baseURL+InviteServiceCreateInviteProcedure,
			connect.WithSchema(inviteServiceMethods.ByName("CreateInvite")),
			connect.WithClientOptions(opts...),
		),
		listInvites: connect.NewClient[sdp_go.ListInvitesRequest, sdp_go.ListInvitesResponse](
			httpClient,
			baseURL+InviteServiceListInvitesProcedure,
			connect.WithSchema(inviteServiceMethods.ByName("ListInvites")),
			connect.WithClientOptions(opts...),
		),
		revokeInvite: connect.NewClient[sdp_go.RevokeInviteRequest, sdp_go.RevokeInviteResponse](
			httpClient,
			baseURL+InviteServiceRevokeInviteProcedure,
			connect.WithSchema(inviteServiceMethods.ByName("RevokeInvite")),
			connect.WithClientOptions(opts...),
		),
		resendInvite: connect.NewClient[sdp_go.ResendInviteRequest, sdp_go.ResendInviteResponse](
			httpClient,
			baseURL+InviteServiceResendInviteProcedure,
			connect.WithSchema(inviteServiceMethods.ByName("ResendInvite")),
			connect.WithClientOptions(opts...),
		),
	}
}

// inviteServiceClient implements InviteServiceClient.
type inviteServiceClient struct {
	createInvite *connect.Client[sdp_go.CreateInviteRequest, sdp_go.CreateInviteResponse]
	listInvites  *connect.Client[sdp_go.ListInvitesRequest, sdp_go.ListInvitesResponse]
	revokeInvite *connect.Client[sdp_go.RevokeInviteRequest, sdp_go.RevokeInviteResponse]
	resendInvite *connect.Client[sdp_go.ResendInviteRequest, sdp_go.ResendInviteResponse]
}

// CreateInvite calls invites.InviteService.CreateInvite.
func (c *inviteServiceClient) CreateInvite(ctx context.Context, req *connect.Request[sdp_go.CreateInviteRequest]) (*connect.Response[sdp_go.CreateInviteResponse], error) {
	return c.createInvite.CallUnary(ctx, req)
}

// ListInvites calls invites.InviteService.ListInvites.
func (c *inviteServiceClient) ListInvites(ctx context.Context, req *connect.Request[sdp_go.ListInvitesRequest]) (*connect.Response[sdp_go.ListInvitesResponse], error) {
	return c.listInvites.CallUnary(ctx, req)
}

// RevokeInvite calls invites.InviteService.RevokeInvite.
func (c *inviteServiceClient) RevokeInvite(ctx context.Context, req *connect.Request[sdp_go.RevokeInviteRequest]) (*connect.Response[sdp_go.RevokeInviteResponse], error) {
	return c.revokeInvite.CallUnary(ctx, req)
}

// ResendInvite calls invites.InviteService.ResendInvite.
func (c *inviteServiceClient) ResendInvite(ctx context.Context, req *connect.Request[sdp_go.ResendInviteRequest]) (*connect.Response[sdp_go.ResendInviteResponse], error) {
	return c.resendInvite.CallUnary(ctx, req)
}

// InviteServiceHandler is an implementation of the invites.InviteService service.
type InviteServiceHandler interface {
	CreateInvite(context.Context, *connect.Request[sdp_go.CreateInviteRequest]) (*connect.Response[sdp_go.CreateInviteResponse], error)
	ListInvites(context.Context, *connect.Request[sdp_go.ListInvitesRequest]) (*connect.Response[sdp_go.ListInvitesResponse], error)
	RevokeInvite(context.Context, *connect.Request[sdp_go.RevokeInviteRequest]) (*connect.Response[sdp_go.RevokeInviteResponse], error)
	ResendInvite(context.Context, *connect.Request[sdp_go.ResendInviteRequest]) (*connect.Response[sdp_go.ResendInviteResponse], error)
}

// NewInviteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInviteServiceHandler(svc InviteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inviteServiceMethods := sdp_go.File_invites_proto.Services().ByName("InviteService").Methods()
	inviteServiceCreateInviteHandler := connect.NewUnaryHandler(
		InviteServiceCreateInviteProcedure,
		svc.CreateInvite,
		connect.WithSchema(inviteServiceMethods.ByName("CreateInvite")),
		connect.WithHandlerOptions(opts...),
	)
	inviteServiceListInvitesHandler := connect.NewUnaryHandler(
		InviteServiceListInvitesProcedure,
		svc.ListInvites,
		connect.WithSchema(inviteServiceMethods.ByName("ListInvites")),
		connect.WithHandlerOptions(opts...),
	)
	inviteServiceRevokeInviteHandler := connect.NewUnaryHandler(
		InviteServiceRevokeInviteProcedure,
		svc.RevokeInvite,
		connect.WithSchema(inviteServiceMethods.ByName("RevokeInvite")),
		connect.WithHandlerOptions(opts...),
	)
	inviteServiceResendInviteHandler := connect.NewUnaryHandler(
		InviteServiceResendInviteProcedure,
		svc.ResendInvite,
		connect.WithSchema(inviteServiceMethods.ByName("ResendInvite")),
		connect.WithHandlerOptions(opts...),
	)
	return "/invites.InviteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InviteServiceCreateInviteProcedure:
			inviteServiceCreateInviteHandler.ServeHTTP(w, r)
		case InviteServiceListInvitesProcedure:
			inviteServiceListInvitesHandler.ServeHTTP(w, r)
		case InviteServiceRevokeInviteProcedure:
			inviteServiceRevokeInviteHandler.ServeHTTP(w, r)
		case InviteServiceResendInviteProcedure:
			inviteServiceResendInviteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInviteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInviteServiceHandler struct{}

func (UnimplementedInviteServiceHandler) CreateInvite(context.Context, *connect.Request[sdp_go.CreateInviteRequest]) (*connect.Response[sdp_go.CreateInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("invites.InviteService.CreateInvite is not implemented"))
}

func (UnimplementedInviteServiceHandler) ListInvites(context.Context, *connect.Request[sdp_go.ListInvitesRequest]) (*connect.Response[sdp_go.ListInvitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("invites.InviteService.ListInvites is not implemented"))
}

func (UnimplementedInviteServiceHandler) RevokeInvite(context.Context, *connect.Request[sdp_go.RevokeInviteRequest]) (*connect.Response[sdp_go.RevokeInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("invites.InviteService.RevokeInvite is not implemented"))
}

func (UnimplementedInviteServiceHandler) ResendInvite(context.Context, *connect.Request[sdp_go.ResendInviteRequest]) (*connect.Response[sdp_go.ResendInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("invites.InviteService.ResendInvite is not implemented"))
}
