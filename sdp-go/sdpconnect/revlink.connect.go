// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: revlink.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/cli/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RevlinkServiceName is the fully-qualified name of the RevlinkService service.
	RevlinkServiceName = "revlink.RevlinkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RevlinkServiceGetReverseEdgesProcedure is the fully-qualified name of the RevlinkService's
	// GetReverseEdges RPC.
	RevlinkServiceGetReverseEdgesProcedure = "/revlink.RevlinkService/GetReverseEdges"
	// RevlinkServiceIngestGatewayResponsesProcedure is the fully-qualified name of the RevlinkService's
	// IngestGatewayResponses RPC.
	RevlinkServiceIngestGatewayResponsesProcedure = "/revlink.RevlinkService/IngestGatewayResponses"
	// RevlinkServiceCheckpointProcedure is the fully-qualified name of the RevlinkService's Checkpoint
	// RPC.
	RevlinkServiceCheckpointProcedure = "/revlink.RevlinkService/Checkpoint"
)

// RevlinkServiceClient is a client for the revlink.RevlinkService service.
type RevlinkServiceClient interface {
	// Gets reverse edges for a given item
	GetReverseEdges(context.Context, *connect.Request[sdp_go.GetReverseEdgesRequest]) (*connect.Response[sdp_go.GetReverseEdgesResponse], error)
	// Ingests a stream of gateway responses
	IngestGatewayResponses(context.Context) *connect.ClientStreamForClient[sdp_go.IngestGatewayResponseRequest, sdp_go.IngestGatewayResponsesResponse]
	// Waits until all currently submitted gateway responses are committed to
	// the database. This is primarily intended for tests to ensure that setup
	// was completed.
	//
	// Note that this does only count the first try of each insertion; retries
	// are not considered.
	//
	// Note2 that this is implemented in memory, so there is no guarantee
	// that this will work in a distributed environment.
	Checkpoint(context.Context, *connect.Request[sdp_go.CheckpointRequest]) (*connect.Response[sdp_go.CheckpointResponse], error)
}

// NewRevlinkServiceClient constructs a client for the revlink.RevlinkService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRevlinkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RevlinkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	revlinkServiceMethods := sdp_go.File_revlink_proto.Services().ByName("RevlinkService").Methods()
	return &revlinkServiceClient{
		getReverseEdges: connect.NewClient[sdp_go.GetReverseEdgesRequest, sdp_go.GetReverseEdgesResponse](
			httpClient,
			baseURL+RevlinkServiceGetReverseEdgesProcedure,
			connect.WithSchema(revlinkServiceMethods.ByName("GetReverseEdges")),
			connect.WithClientOptions(opts...),
		),
		ingestGatewayResponses: connect.NewClient[sdp_go.IngestGatewayResponseRequest, sdp_go.IngestGatewayResponsesResponse](
			httpClient,
			baseURL+RevlinkServiceIngestGatewayResponsesProcedure,
			connect.WithSchema(revlinkServiceMethods.ByName("IngestGatewayResponses")),
			connect.WithClientOptions(opts...),
		),
		checkpoint: connect.NewClient[sdp_go.CheckpointRequest, sdp_go.CheckpointResponse](
			httpClient,
			baseURL+RevlinkServiceCheckpointProcedure,
			connect.WithSchema(revlinkServiceMethods.ByName("Checkpoint")),
			connect.WithClientOptions(opts...),
		),
	}
}

// revlinkServiceClient implements RevlinkServiceClient.
type revlinkServiceClient struct {
	getReverseEdges        *connect.Client[sdp_go.GetReverseEdgesRequest, sdp_go.GetReverseEdgesResponse]
	ingestGatewayResponses *connect.Client[sdp_go.IngestGatewayResponseRequest, sdp_go.IngestGatewayResponsesResponse]
	checkpoint             *connect.Client[sdp_go.CheckpointRequest, sdp_go.CheckpointResponse]
}

// GetReverseEdges calls revlink.RevlinkService.GetReverseEdges.
func (c *revlinkServiceClient) GetReverseEdges(ctx context.Context, req *connect.Request[sdp_go.GetReverseEdgesRequest]) (*connect.Response[sdp_go.GetReverseEdgesResponse], error) {
	return c.getReverseEdges.CallUnary(ctx, req)
}

// IngestGatewayResponses calls revlink.RevlinkService.IngestGatewayResponses.
func (c *revlinkServiceClient) IngestGatewayResponses(ctx context.Context) *connect.ClientStreamForClient[sdp_go.IngestGatewayResponseRequest, sdp_go.IngestGatewayResponsesResponse] {
	return c.ingestGatewayResponses.CallClientStream(ctx)
}

// Checkpoint calls revlink.RevlinkService.Checkpoint.
func (c *revlinkServiceClient) Checkpoint(ctx context.Context, req *connect.Request[sdp_go.CheckpointRequest]) (*connect.Response[sdp_go.CheckpointResponse], error) {
	return c.checkpoint.CallUnary(ctx, req)
}

// RevlinkServiceHandler is an implementation of the revlink.RevlinkService service.
type RevlinkServiceHandler interface {
	// Gets reverse edges for a given item
	GetReverseEdges(context.Context, *connect.Request[sdp_go.GetReverseEdgesRequest]) (*connect.Response[sdp_go.GetReverseEdgesResponse], error)
	// Ingests a stream of gateway responses
	IngestGatewayResponses(context.Context, *connect.ClientStream[sdp_go.IngestGatewayResponseRequest]) (*connect.Response[sdp_go.IngestGatewayResponsesResponse], error)
	// Waits until all currently submitted gateway responses are committed to
	// the database. This is primarily intended for tests to ensure that setup
	// was completed.
	//
	// Note that this does only count the first try of each insertion; retries
	// are not considered.
	//
	// Note2 that this is implemented in memory, so there is no guarantee
	// that this will work in a distributed environment.
	Checkpoint(context.Context, *connect.Request[sdp_go.CheckpointRequest]) (*connect.Response[sdp_go.CheckpointResponse], error)
}

// NewRevlinkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRevlinkServiceHandler(svc RevlinkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	revlinkServiceMethods := sdp_go.File_revlink_proto.Services().ByName("RevlinkService").Methods()
	revlinkServiceGetReverseEdgesHandler := connect.NewUnaryHandler(
		RevlinkServiceGetReverseEdgesProcedure,
		svc.GetReverseEdges,
		connect.WithSchema(revlinkServiceMethods.ByName("GetReverseEdges")),
		connect.WithHandlerOptions(opts...),
	)
	revlinkServiceIngestGatewayResponsesHandler := connect.NewClientStreamHandler(
		RevlinkServiceIngestGatewayResponsesProcedure,
		svc.IngestGatewayResponses,
		connect.WithSchema(revlinkServiceMethods.ByName("IngestGatewayResponses")),
		connect.WithHandlerOptions(opts...),
	)
	revlinkServiceCheckpointHandler := connect.NewUnaryHandler(
		RevlinkServiceCheckpointProcedure,
		svc.Checkpoint,
		connect.WithSchema(revlinkServiceMethods.ByName("Checkpoint")),
		connect.WithHandlerOptions(opts...),
	)
	return "/revlink.RevlinkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RevlinkServiceGetReverseEdgesProcedure:
			revlinkServiceGetReverseEdgesHandler.ServeHTTP(w, r)
		case RevlinkServiceIngestGatewayResponsesProcedure:
			revlinkServiceIngestGatewayResponsesHandler.ServeHTTP(w, r)
		case RevlinkServiceCheckpointProcedure:
			revlinkServiceCheckpointHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRevlinkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRevlinkServiceHandler struct{}

func (UnimplementedRevlinkServiceHandler) GetReverseEdges(context.Context, *connect.Request[sdp_go.GetReverseEdgesRequest]) (*connect.Response[sdp_go.GetReverseEdgesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revlink.RevlinkService.GetReverseEdges is not implemented"))
}

func (UnimplementedRevlinkServiceHandler) IngestGatewayResponses(context.Context, *connect.ClientStream[sdp_go.IngestGatewayResponseRequest]) (*connect.Response[sdp_go.IngestGatewayResponsesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revlink.RevlinkService.IngestGatewayResponses is not implemented"))
}

func (UnimplementedRevlinkServiceHandler) Checkpoint(context.Context, *connect.Request[sdp_go.CheckpointRequest]) (*connect.Response[sdp_go.CheckpointResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("revlink.RevlinkService.Checkpoint is not implemented"))
}
