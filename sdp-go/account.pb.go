// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: account.proto

package sdp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SourceStatus int32

const (
	SourceStatus_STATUS_UNSPECIFIED SourceStatus = 0
	// The source is starting or updating. This is only applicable to managed
	// sources where Overmind manages the source's lifecycle
	SourceStatus_STATUS_PROGRESSING SourceStatus = 1
	// The source is healthy
	SourceStatus_STATUS_HEALTHY SourceStatus = 2
	// The source is unhealthy
	SourceStatus_STATUS_UNHEALTHY SourceStatus = 3
	// The source is sleeping due to inactivity. It will be woken up before it
	// is needed. This is only applicable to managed sources where Overmind
	// manages the source's lifecycle
	SourceStatus_STATUS_SLEEPING SourceStatus = 4
	// The source is disconnected and therefore not able to handle requests.
	// This will only be returned for non-managed sources that have recently
	// stopped sending heartbeats such as a user running the CLI that has
	// recently disconnected
	SourceStatus_STATUS_DISCONNECTED SourceStatus = 5
)

// Enum value maps for SourceStatus.
var (
	SourceStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PROGRESSING",
		2: "STATUS_HEALTHY",
		3: "STATUS_UNHEALTHY",
		4: "STATUS_SLEEPING",
		5: "STATUS_DISCONNECTED",
	}
	SourceStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED":  0,
		"STATUS_PROGRESSING":  1,
		"STATUS_HEALTHY":      2,
		"STATUS_UNHEALTHY":    3,
		"STATUS_SLEEPING":     4,
		"STATUS_DISCONNECTED": 5,
	}
)

func (x SourceStatus) Enum() *SourceStatus {
	p := new(SourceStatus)
	*p = x
	return p
}

func (x SourceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[0].Descriptor()
}

func (SourceStatus) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[0]
}

func (x SourceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceStatus.Descriptor instead.
func (SourceStatus) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

// Whether the source is managed by srcman or was created by the user locally
type SourceManaged int32

const (
	SourceManaged_LOCAL   SourceManaged = 0 // Local is the default
	SourceManaged_MANAGED SourceManaged = 1
)

// Enum value maps for SourceManaged.
var (
	SourceManaged_name = map[int32]string{
		0: "LOCAL",
		1: "MANAGED",
	}
	SourceManaged_value = map[string]int32{
		"LOCAL":   0,
		"MANAGED": 1,
	}
)

func (x SourceManaged) Enum() *SourceManaged {
	p := new(SourceManaged)
	*p = x
	return p
}

func (x SourceManaged) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceManaged) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[1].Descriptor()
}

func (SourceManaged) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[1]
}

func (x SourceManaged) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceManaged.Descriptor instead.
func (SourceManaged) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

type AdapterCategory int32

const (
	// Fall-back category for resources that do not fit into any other category
	AdapterCategory_ADAPTER_CATEGORY_OTHER AdapterCategory = 0
	// This category includes resources that provide processing power and host
	// applications or services. Examples are virtual machines, containers,
	// serverless functions, and application hosting platforms. If the primary
	// purpose of a resource is to execute workloads, run code, or host
	// applications, it should belong here.
	AdapterCategory_ADAPTER_CATEGORY_COMPUTE_APPLICATION AdapterCategory = 1
	// Encompassing resources designed to store, archive, and manage data, this
	// category includes object storage, block storage, file storage, and data
	// backup solutions. Select this category when the core function of a
	// resource is persistent data storage or management
	AdapterCategory_ADAPTER_CATEGORY_STORAGE AdapterCategory = 2
	// This category covers resources that facilitate connectivity and
	// communication within cloud environments. Typical resources include
	// virtual networks, load balancers, VPNs, and DNS services. Assign
	// resources here if their primary role is related to communication,
	// connectivity, or traffic management
	AdapterCategory_ADAPTER_CATEGORY_NETWORK AdapterCategory = 3
	// Resources in this category focus on safeguarding data, applications, and
	// cloud infrastructure. Examples include firewalls, identity and access
	// management, encryption services, and security monitoring tools. Choose
	// this category if a resource's main function is security, access control,
	// or compliance
	AdapterCategory_ADAPTER_CATEGORY_SECURITY AdapterCategory = 4
	// This category includes resources aimed at monitoring, tracing, and
	// logging applications and cloud infrastructure. Examples are monitoring
	// tools, logging services, and performance management solutions. Use this
	// category for resources that provide insights into system performance and
	// health
	AdapterCategory_ADAPTER_CATEGORY_OBSERVABILITY AdapterCategory = 5
	// Focused on structured data storage and management, this category includes
	// relational, NoSQL, and in-memory databases, along with data warehousing
	// solutions. Choose this category for resources specifically designed for
	// data querying, transaction processing, or complex data operations. This
	// differs from "storage" in that "databases" have compute associated with
	// them rather than just storing data.
	AdapterCategory_ADAPTER_CATEGORY_DATABASE AdapterCategory = 6
	// This category includes resources designed for managing configurations and
	// deployments. Examples are infrastructure as code tools, configuration
	// management services, and deployment orchestration solutions. Classify
	// resources here if they primarily handle configuration, environment
	// management, or automated deployment
	AdapterCategory_ADAPTER_CATEGORY_CONFIGURATION AdapterCategory = 7
	// This category is dedicated to resources for developing, training, and
	// deploying artificial intelligence models and machine learning
	// applications. Include machine learning platforms, AI services, and data
	// labeling tools here. Select this category if a resource's principal
	// function involves AI or machine learning processes
	AdapterCategory_ADAPTER_CATEGORY_AI AdapterCategory = 8
)

// Enum value maps for AdapterCategory.
var (
	AdapterCategory_name = map[int32]string{
		0: "ADAPTER_CATEGORY_OTHER",
		1: "ADAPTER_CATEGORY_COMPUTE_APPLICATION",
		2: "ADAPTER_CATEGORY_STORAGE",
		3: "ADAPTER_CATEGORY_NETWORK",
		4: "ADAPTER_CATEGORY_SECURITY",
		5: "ADAPTER_CATEGORY_OBSERVABILITY",
		6: "ADAPTER_CATEGORY_DATABASE",
		7: "ADAPTER_CATEGORY_CONFIGURATION",
		8: "ADAPTER_CATEGORY_AI",
	}
	AdapterCategory_value = map[string]int32{
		"ADAPTER_CATEGORY_OTHER":               0,
		"ADAPTER_CATEGORY_COMPUTE_APPLICATION": 1,
		"ADAPTER_CATEGORY_STORAGE":             2,
		"ADAPTER_CATEGORY_NETWORK":             3,
		"ADAPTER_CATEGORY_SECURITY":            4,
		"ADAPTER_CATEGORY_OBSERVABILITY":       5,
		"ADAPTER_CATEGORY_DATABASE":            6,
		"ADAPTER_CATEGORY_CONFIGURATION":       7,
		"ADAPTER_CATEGORY_AI":                  8,
	}
)

func (x AdapterCategory) Enum() *AdapterCategory {
	p := new(AdapterCategory)
	*p = x
	return p
}

func (x AdapterCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdapterCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_account_proto_enumTypes[2].Descriptor()
}

func (AdapterCategory) Type() protoreflect.EnumType {
	return &file_account_proto_enumTypes[2]
}

func (x AdapterCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdapterCategory.Descriptor instead.
func (AdapterCategory) EnumDescriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

type ListAccountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	mi := &file_account_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

type ListAccountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      []*Account             `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	mi := &file_account_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *ListAccountsResponse) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CreateAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Properties    *AccountProperties     `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	mi := &file_account_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAccountRequest) GetProperties() *AccountProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreateAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *Account               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccountResponse) Reset() {
	*x = CreateAccountResponse{}
	mi := &file_account_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountResponse) ProtoMessage() {}

func (x *CreateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAccountResponse) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type UpdateAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Properties    *AccountProperties     `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAccountRequest) Reset() {
	*x = UpdateAccountRequest{}
	mi := &file_account_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRequest) ProtoMessage() {}

func (x *UpdateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAccountRequest) GetProperties() *AccountProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type UpdateAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *Account               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAccountResponse) Reset() {
	*x = UpdateAccountResponse{}
	mi := &file_account_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountResponse) ProtoMessage() {}

func (x *UpdateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountResponse.ProtoReflect.Descriptor instead.
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAccountResponse) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type AdminUpdateAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the account to update
	Name          string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Request       *UpdateAccountRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateAccountRequest) Reset() {
	*x = AdminUpdateAccountRequest{}
	mi := &file_account_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateAccountRequest) ProtoMessage() {}

func (x *AdminUpdateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateAccountRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{6}
}

func (x *AdminUpdateAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminUpdateAccountRequest) GetRequest() *UpdateAccountRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AdminGetAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the account to get
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminGetAccountRequest) Reset() {
	*x = AdminGetAccountRequest{}
	mi := &file_account_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminGetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAccountRequest) ProtoMessage() {}

func (x *AdminGetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAccountRequest.ProtoReflect.Descriptor instead.
func (*AdminGetAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{7}
}

func (x *AdminGetAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AdminDeleteAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the account to delete
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDeleteAccountRequest) Reset() {
	*x = AdminDeleteAccountRequest{}
	mi := &file_account_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAccountRequest) ProtoMessage() {}

func (x *AdminDeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{8}
}

func (x *AdminDeleteAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AdminDeleteAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDeleteAccountResponse) Reset() {
	*x = AdminDeleteAccountResponse{}
	mi := &file_account_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDeleteAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAccountResponse) ProtoMessage() {}

func (x *AdminDeleteAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAccountResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{9}
}

type AdminListSourcesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Request       *ListSourcesRequest    `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminListSourcesRequest) Reset() {
	*x = AdminListSourcesRequest{}
	mi := &file_account_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminListSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListSourcesRequest) ProtoMessage() {}

func (x *AdminListSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListSourcesRequest.ProtoReflect.Descriptor instead.
func (*AdminListSourcesRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{10}
}

func (x *AdminListSourcesRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminListSourcesRequest) GetRequest() *ListSourcesRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AdminCreateSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Request       *CreateSourceRequest   `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminCreateSourceRequest) Reset() {
	*x = AdminCreateSourceRequest{}
	mi := &file_account_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminCreateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateSourceRequest) ProtoMessage() {}

func (x *AdminCreateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateSourceRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{11}
}

func (x *AdminCreateSourceRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminCreateSourceRequest) GetRequest() *CreateSourceRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AdminGetSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Request       *GetSourceRequest      `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminGetSourceRequest) Reset() {
	*x = AdminGetSourceRequest{}
	mi := &file_account_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminGetSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetSourceRequest) ProtoMessage() {}

func (x *AdminGetSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetSourceRequest.ProtoReflect.Descriptor instead.
func (*AdminGetSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{12}
}

func (x *AdminGetSourceRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminGetSourceRequest) GetRequest() *GetSourceRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AdminUpdateSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Request       *UpdateSourceRequest   `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateSourceRequest) Reset() {
	*x = AdminUpdateSourceRequest{}
	mi := &file_account_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateSourceRequest) ProtoMessage() {}

func (x *AdminUpdateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateSourceRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{13}
}

func (x *AdminUpdateSourceRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminUpdateSourceRequest) GetRequest() *UpdateSourceRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AdminDeleteSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Request       *DeleteSourceRequest   `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminDeleteSourceRequest) Reset() {
	*x = AdminDeleteSourceRequest{}
	mi := &file_account_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminDeleteSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteSourceRequest) ProtoMessage() {}

func (x *AdminDeleteSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteSourceRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{14}
}

func (x *AdminDeleteSourceRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminDeleteSourceRequest) GetRequest() *DeleteSourceRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AdminKeepaliveSourcesRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Account       string                   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Request       *KeepaliveSourcesRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminKeepaliveSourcesRequest) Reset() {
	*x = AdminKeepaliveSourcesRequest{}
	mi := &file_account_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminKeepaliveSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminKeepaliveSourcesRequest) ProtoMessage() {}

func (x *AdminKeepaliveSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminKeepaliveSourcesRequest.ProtoReflect.Descriptor instead.
func (*AdminKeepaliveSourcesRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{15}
}

func (x *AdminKeepaliveSourcesRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminKeepaliveSourcesRequest) GetRequest() *KeepaliveSourcesRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AdminCreateTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Request       *CreateTokenRequest    `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminCreateTokenRequest) Reset() {
	*x = AdminCreateTokenRequest{}
	mi := &file_account_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminCreateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateTokenRequest) ProtoMessage() {}

func (x *AdminCreateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateTokenRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateTokenRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{16}
}

func (x *AdminCreateTokenRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AdminCreateTokenRequest) GetRequest() *CreateTokenRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *SourceMetadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Properties    *SourceProperties      `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_account_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{17}
}

func (x *Source) GetMetadata() *SourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Source) GetProperties() *SourceProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type SourceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	UUID  []byte                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"` // TODO: Change to ID along with everything else
	// The name of the NATS JWT that has been generated for this source
	TokenName string `protobuf:"bytes,2,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	// When the NATS JWT expires (unix time)
	TokenExpiry *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=TokenExpiry,proto3" json:"TokenExpiry,omitempty"`
	// The public NKey associated with the NATS JWT
	PublicNkey string `protobuf:"bytes,5,opt,name=PublicNkey,proto3" json:"PublicNkey,omitempty"`
	// Status of the source
	Status SourceStatus `protobuf:"varint,9,opt,name=Status,proto3,enum=account.SourceStatus" json:"Status,omitempty"`
	// The error message if the source is unhealthy
	Error         string `protobuf:"bytes,10,opt,name=Error,proto3" json:"Error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceMetadata) Reset() {
	*x = SourceMetadata{}
	mi := &file_account_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceMetadata) ProtoMessage() {}

func (x *SourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceMetadata.ProtoReflect.Descriptor instead.
func (*SourceMetadata) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{18}
}

func (x *SourceMetadata) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *SourceMetadata) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *SourceMetadata) GetTokenExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.TokenExpiry
	}
	return nil
}

func (x *SourceMetadata) GetPublicNkey() string {
	if x != nil {
		return x.PublicNkey
	}
	return ""
}

func (x *SourceMetadata) GetStatus() SourceStatus {
	if x != nil {
		return x.Status
	}
	return SourceStatus_STATUS_UNSPECIFIED
}

func (x *SourceMetadata) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// A source that is capable of discovering items
type SourceProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The descriptive name of the source
	DescriptiveName string `protobuf:"bytes,1,opt,name=DescriptiveName,proto3" json:"DescriptiveName,omitempty"`
	// What source to configure. Currently either "stdlib" or "aws"
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Config for this source. See the source documentation for what
	// source-specific config is available/required. This will be supplied
	// directly to viper via a config file at `/etc/srcman/config/source.yaml`
	Config *structpb.Struct `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
	// Additional config options that should be passed to the source. The keys
	// of this object should be file names, and the values should be their
	// content. These files will be made available to the source at runtime.
	// Check the source's documentation for what to configure here if required
	AdditionalConfig *structpb.Struct `protobuf:"bytes,4,opt,name=AdditionalConfig,proto3" json:"AdditionalConfig,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SourceProperties) Reset() {
	*x = SourceProperties{}
	mi := &file_account_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceProperties) ProtoMessage() {}

func (x *SourceProperties) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceProperties.ProtoReflect.Descriptor instead.
func (*SourceProperties) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{19}
}

func (x *SourceProperties) GetDescriptiveName() string {
	if x != nil {
		return x.DescriptiveName
	}
	return ""
}

func (x *SourceProperties) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SourceProperties) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SourceProperties) GetAdditionalConfig() *structpb.Struct {
	if x != nil {
		return x.AdditionalConfig
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *AccountMetadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Properties    *AccountProperties     `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_account_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{20}
}

func (x *Account) GetMetadata() *AccountMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Account) GetProperties() *AccountProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type AccountMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The public Nkey which signs all NATS "user" tokens
	PublicNkey    string `protobuf:"bytes,2,opt,name=PublicNkey,proto3" json:"PublicNkey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountMetadata) Reset() {
	*x = AccountMetadata{}
	mi := &file_account_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMetadata) ProtoMessage() {}

func (x *AccountMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMetadata.ProtoReflect.Descriptor instead.
func (*AccountMetadata) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{21}
}

func (x *AccountMetadata) GetPublicNkey() string {
	if x != nil {
		return x.PublicNkey
	}
	return ""
}

type AccountProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the account
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// The Customer ID within Stripe
	StripeCustomerID string `protobuf:"bytes,2,opt,name=StripeCustomerID,proto3" json:"StripeCustomerID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AccountProperties) Reset() {
	*x = AccountProperties{}
	mi := &file_account_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountProperties) ProtoMessage() {}

func (x *AccountProperties) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountProperties.ProtoReflect.Descriptor instead.
func (*AccountProperties) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{22}
}

func (x *AccountProperties) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountProperties) GetStripeCustomerID() string {
	if x != nil {
		return x.StripeCustomerID
	}
	return ""
}

type GetAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	mi := &file_account_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{23}
}

type GetAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *Account               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	mi := &file_account_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{24}
}

func (x *GetAccountResponse) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type DeleteAccountRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set to true to confirm that the user is sure they want to delete their
	// account. This is to prevent accidental deletions
	IAmSure       bool `protobuf:"varint,1,opt,name=iAmSure,proto3" json:"iAmSure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	mi := &file_account_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteAccountRequest) GetIAmSure() bool {
	if x != nil {
		return x.IAmSure
	}
	return false
}

type DeleteAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAccountResponse) Reset() {
	*x = DeleteAccountResponse{}
	mi := &file_account_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountResponse) ProtoMessage() {}

func (x *DeleteAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{26}
}

type ListSourcesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSourcesRequest) Reset() {
	*x = ListSourcesRequest{}
	mi := &file_account_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSourcesRequest) ProtoMessage() {}

func (x *ListSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSourcesRequest.ProtoReflect.Descriptor instead.
func (*ListSourcesRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27}
}

type ListSourcesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sources       []*Source              `protobuf:"bytes,1,rep,name=Sources,proto3" json:"Sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSourcesResponse) Reset() {
	*x = ListSourcesResponse{}
	mi := &file_account_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSourcesResponse) ProtoMessage() {}

func (x *ListSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSourcesResponse.ProtoReflect.Descriptor instead.
func (*ListSourcesResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{28}
}

func (x *ListSourcesResponse) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type CreateSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Properties    *SourceProperties      `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSourceRequest) Reset() {
	*x = CreateSourceRequest{}
	mi := &file_account_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSourceRequest) ProtoMessage() {}

func (x *CreateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSourceRequest.ProtoReflect.Descriptor instead.
func (*CreateSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{29}
}

func (x *CreateSourceRequest) GetProperties() *SourceProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CreateSourceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Source                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSourceResponse) Reset() {
	*x = CreateSourceResponse{}
	mi := &file_account_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSourceResponse) ProtoMessage() {}

func (x *CreateSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSourceResponse.ProtoReflect.Descriptor instead.
func (*CreateSourceResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{30}
}

func (x *CreateSourceResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type GetSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UUID          []byte                 `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourceRequest) Reset() {
	*x = GetSourceRequest{}
	mi := &file_account_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourceRequest) ProtoMessage() {}

func (x *GetSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourceRequest.ProtoReflect.Descriptor instead.
func (*GetSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{31}
}

func (x *GetSourceRequest) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

type GetSourceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Source                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSourceResponse) Reset() {
	*x = GetSourceResponse{}
	mi := &file_account_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSourceResponse) ProtoMessage() {}

func (x *GetSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSourceResponse.ProtoReflect.Descriptor instead.
func (*GetSourceResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{32}
}

func (x *GetSourceResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type UpdateSourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the source to update
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Properties to update
	Properties    *SourceProperties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSourceRequest) Reset() {
	*x = UpdateSourceRequest{}
	mi := &file_account_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSourceRequest) ProtoMessage() {}

func (x *UpdateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateSourceRequest) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *UpdateSourceRequest) GetProperties() *SourceProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type UpdateSourceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Source                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSourceResponse) Reset() {
	*x = UpdateSourceResponse{}
	mi := &file_account_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSourceResponse) ProtoMessage() {}

func (x *UpdateSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSourceResponse.ProtoReflect.Descriptor instead.
func (*UpdateSourceResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateSourceResponse) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type DeleteSourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID if the source to delete
	UUID          []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSourceRequest) Reset() {
	*x = DeleteSourceRequest{}
	mi := &file_account_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSourceRequest) ProtoMessage() {}

func (x *DeleteSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteSourceRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteSourceRequest) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

type DeleteSourceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSourceResponse) Reset() {
	*x = DeleteSourceResponse{}
	mi := &file_account_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSourceResponse) ProtoMessage() {}

func (x *DeleteSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSourceResponse.ProtoReflect.Descriptor instead.
func (*DeleteSourceResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{36}
}

type SourceKeepaliveResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the source that was kept alive
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// The status of the source
	Status SourceStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=account.SourceStatus" json:"Status,omitempty"`
	// The error message if the source is unhealthy
	Error         string `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceKeepaliveResult) Reset() {
	*x = SourceKeepaliveResult{}
	mi := &file_account_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceKeepaliveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceKeepaliveResult) ProtoMessage() {}

func (x *SourceKeepaliveResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceKeepaliveResult.ProtoReflect.Descriptor instead.
func (*SourceKeepaliveResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{37}
}

func (x *SourceKeepaliveResult) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *SourceKeepaliveResult) GetStatus() SourceStatus {
	if x != nil {
		return x.Status
	}
	return SourceStatus_STATUS_UNSPECIFIED
}

func (x *SourceKeepaliveResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListAllSourcesStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAllSourcesStatusRequest) Reset() {
	*x = ListAllSourcesStatusRequest{}
	mi := &file_account_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllSourcesStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllSourcesStatusRequest) ProtoMessage() {}

func (x *ListAllSourcesStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllSourcesStatusRequest.ProtoReflect.Descriptor instead.
func (*ListAllSourcesStatusRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{38}
}

type SourceHealth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the source
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// The version of the source
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The name of the source
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The error message if the source is unhealthy
	Error *string `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	// The status of the source, this is calculated based on the last heartbeat received and if there is an error
	Status SourceStatus `protobuf:"varint,5,opt,name=status,proto3,enum=account.SourceStatus" json:"status,omitempty"`
	// Created at time
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// The last time we received a heartbeat from the source
	LastHeartbeat *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastHeartbeat,proto3" json:"lastHeartbeat,omitempty"`
	// The next time we expect to receive a heartbeat from the source
	NextHeartbeat *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=nextHeartbeat,proto3" json:"nextHeartbeat,omitempty"`
	// The type of the source, AWS or Stdlib or Kubernetes
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Whether the source is managed, or local
	Managed SourceManaged `protobuf:"varint,10,opt,name=managed,proto3,enum=account.SourceManaged" json:"managed,omitempty"`
	// The types of sources that this source can discover
	AvailableTypes []string `protobuf:"bytes,11,rep,name=availableTypes,proto3" json:"availableTypes,omitempty"`
	// The scopes that this source can discover
	AvailableScopes []string `protobuf:"bytes,12,rep,name=availableScopes,proto3" json:"availableScopes,omitempty"`
	// AdapterMetadata is a map of metadata that the source can send to the API
	AdapterMetadata []*AdapterMetadata `protobuf:"bytes,13,rep,name=adapterMetadata,proto3" json:"adapterMetadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SourceHealth) Reset() {
	*x = SourceHealth{}
	mi := &file_account_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceHealth) ProtoMessage() {}

func (x *SourceHealth) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceHealth.ProtoReflect.Descriptor instead.
func (*SourceHealth) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{39}
}

func (x *SourceHealth) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *SourceHealth) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SourceHealth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceHealth) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *SourceHealth) GetStatus() SourceStatus {
	if x != nil {
		return x.Status
	}
	return SourceStatus_STATUS_UNSPECIFIED
}

func (x *SourceHealth) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SourceHealth) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

func (x *SourceHealth) GetNextHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.NextHeartbeat
	}
	return nil
}

func (x *SourceHealth) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SourceHealth) GetManaged() SourceManaged {
	if x != nil {
		return x.Managed
	}
	return SourceManaged_LOCAL
}

func (x *SourceHealth) GetAvailableTypes() []string {
	if x != nil {
		return x.AvailableTypes
	}
	return nil
}

func (x *SourceHealth) GetAvailableScopes() []string {
	if x != nil {
		return x.AvailableScopes
	}
	return nil
}

func (x *SourceHealth) GetAdapterMetadata() []*AdapterMetadata {
	if x != nil {
		return x.AdapterMetadata
	}
	return nil
}

type ListAllSourcesStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sources       []*SourceHealth        `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAllSourcesStatusResponse) Reset() {
	*x = ListAllSourcesStatusResponse{}
	mi := &file_account_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAllSourcesStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllSourcesStatusResponse) ProtoMessage() {}

func (x *ListAllSourcesStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllSourcesStatusResponse.ProtoReflect.Descriptor instead.
func (*ListAllSourcesStatusResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{40}
}

func (x *ListAllSourcesStatusResponse) GetSources() []*SourceHealth {
	if x != nil {
		return x.Sources
	}
	return nil
}

// The source sends a heartbeat to the API to let it know that it is still alive, note it does not give a status.
type SubmitSourceHeartbeatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the source that is sending the heartbeat
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// The version of the source
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The name of the source
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The error message if the source is unhealthy
	Error *string `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	// The maximum time between heartbeats that the source can send to the api-server. Otherwise, the source will be marked as unhealthy. eg 30s
	NextHeartbeatMax *durationpb.Duration `protobuf:"bytes,5,opt,name=nextHeartbeatMax,proto3" json:"nextHeartbeatMax,omitempty"`
	// The type of the source, AWS or Stdlib or Kubernetes
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Whether the source is managed, or local
	Managed SourceManaged `protobuf:"varint,7,opt,name=managed,proto3,enum=account.SourceManaged" json:"managed,omitempty"`
	// The scopes that this source can discover
	AvailableScopes []string `protobuf:"bytes,9,rep,name=availableScopes,proto3" json:"availableScopes,omitempty"`
	// AdapterMetadata is a map of metadata that the source can send to the API
	AdapterMetadata []*AdapterMetadata `protobuf:"bytes,10,rep,name=adapterMetadata,proto3" json:"adapterMetadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubmitSourceHeartbeatRequest) Reset() {
	*x = SubmitSourceHeartbeatRequest{}
	mi := &file_account_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitSourceHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSourceHeartbeatRequest) ProtoMessage() {}

func (x *SubmitSourceHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSourceHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*SubmitSourceHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{41}
}

func (x *SubmitSourceHeartbeatRequest) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *SubmitSourceHeartbeatRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SubmitSourceHeartbeatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmitSourceHeartbeatRequest) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *SubmitSourceHeartbeatRequest) GetNextHeartbeatMax() *durationpb.Duration {
	if x != nil {
		return x.NextHeartbeatMax
	}
	return nil
}

func (x *SubmitSourceHeartbeatRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SubmitSourceHeartbeatRequest) GetManaged() SourceManaged {
	if x != nil {
		return x.Managed
	}
	return SourceManaged_LOCAL
}

func (x *SubmitSourceHeartbeatRequest) GetAvailableScopes() []string {
	if x != nil {
		return x.AvailableScopes
	}
	return nil
}

func (x *SubmitSourceHeartbeatRequest) GetAdapterMetadata() []*AdapterMetadata {
	if x != nil {
		return x.AdapterMetadata
	}
	return nil
}

type AdapterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of item that this adapter returns e.g. eks-cluster
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The category that these items fall under
	Category AdapterCategory `protobuf:"varint,2,opt,name=category,proto3,enum=account.AdapterCategory" json:"category,omitempty"`
	// The list of other types that this can be linked to, eg eks-cluster ->
	// eks-node-group
	PotentialLinks []string `protobuf:"bytes,3,rep,name=potentialLinks,proto3" json:"potentialLinks,omitempty"`
	// A descriptive name of the types of items that are returned by this
	// adapter e.g. "EKS Cluster"
	DescriptiveName string `protobuf:"bytes,4,opt,name=descriptiveName,proto3" json:"descriptiveName,omitempty"`
	// The supported query methods for this adapter
	SupportedQueryMethods *AdapterSupportedQueryMethods `protobuf:"bytes,5,opt,name=supportedQueryMethods,proto3" json:"supportedQueryMethods,omitempty"`
	// The terraform mappings for this adapter, this is optional
	TerraformMappings []*TerraformMapping `protobuf:"bytes,6,rep,name=terraformMappings,proto3" json:"terraformMappings,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AdapterMetadata) Reset() {
	*x = AdapterMetadata{}
	mi := &file_account_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdapterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdapterMetadata) ProtoMessage() {}

func (x *AdapterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdapterMetadata.ProtoReflect.Descriptor instead.
func (*AdapterMetadata) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{42}
}

func (x *AdapterMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AdapterMetadata) GetCategory() AdapterCategory {
	if x != nil {
		return x.Category
	}
	return AdapterCategory_ADAPTER_CATEGORY_OTHER
}

func (x *AdapterMetadata) GetPotentialLinks() []string {
	if x != nil {
		return x.PotentialLinks
	}
	return nil
}

func (x *AdapterMetadata) GetDescriptiveName() string {
	if x != nil {
		return x.DescriptiveName
	}
	return ""
}

func (x *AdapterMetadata) GetSupportedQueryMethods() *AdapterSupportedQueryMethods {
	if x != nil {
		return x.SupportedQueryMethods
	}
	return nil
}

func (x *AdapterMetadata) GetTerraformMappings() []*TerraformMapping {
	if x != nil {
		return x.TerraformMappings
	}
	return nil
}

// The methods that this adapter supports, and the description of how to use
// them
type AdapterSupportedQueryMethods struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not the GET method is supported
	Get bool `protobuf:"varint,1,opt,name=get,proto3" json:"get,omitempty"`
	// Description of the query that should be passed to the GET method
	GetDescription string `protobuf:"bytes,2,opt,name=getDescription,proto3" json:"getDescription,omitempty"`
	// Whether or not the LIST method is supported
	List bool `protobuf:"varint,3,opt,name=list,proto3" json:"list,omitempty"`
	// Description of how the LIST method works
	ListDescription string `protobuf:"bytes,4,opt,name=listDescription,proto3" json:"listDescription,omitempty"`
	// Whether or not the SEARCH method is supported
	Search bool `protobuf:"varint,5,opt,name=search,proto3" json:"search,omitempty"`
	// Description of the query that should be passed to the SEARCH method
	SearchDescription string `protobuf:"bytes,6,opt,name=searchDescription,proto3" json:"searchDescription,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AdapterSupportedQueryMethods) Reset() {
	*x = AdapterSupportedQueryMethods{}
	mi := &file_account_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdapterSupportedQueryMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdapterSupportedQueryMethods) ProtoMessage() {}

func (x *AdapterSupportedQueryMethods) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdapterSupportedQueryMethods.ProtoReflect.Descriptor instead.
func (*AdapterSupportedQueryMethods) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{43}
}

func (x *AdapterSupportedQueryMethods) GetGet() bool {
	if x != nil {
		return x.Get
	}
	return false
}

func (x *AdapterSupportedQueryMethods) GetGetDescription() string {
	if x != nil {
		return x.GetDescription
	}
	return ""
}

func (x *AdapterSupportedQueryMethods) GetList() bool {
	if x != nil {
		return x.List
	}
	return false
}

func (x *AdapterSupportedQueryMethods) GetListDescription() string {
	if x != nil {
		return x.ListDescription
	}
	return ""
}

func (x *AdapterSupportedQueryMethods) GetSearch() bool {
	if x != nil {
		return x.Search
	}
	return false
}

func (x *AdapterSupportedQueryMethods) GetSearchDescription() string {
	if x != nil {
		return x.SearchDescription
	}
	return ""
}

// When Overmind ingests Terraform changes, it needs to be able to map from a
// given Terraform resource, to that same resource in Overmind. This is achieved
// by using the TerraformMapping object. It translates the details of a Terraform
// resource into a query that Overmind can run.
//
// NOTE: The queries that are generated by this mapping use the wildcard scope
// `*` and therefore could return multiple items. Overmind will compare the
// attributes of these items to determine the most likely candidate for a mch
// and select that.
type TerraformMapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The method that the query should use
	TerraformMethod QueryMethod `protobuf:"varint,1,opt,name=terraformMethod,proto3,enum=QueryMethod" json:"terraformMethod,omitempty"`
	// How to map data from the terraform resource to the "query" field in the
	// resulting mapping query. This uses HCL syntax  e.g.
	// resource_type.attribute_name
	//
	// Usually this will be the attribute that uniquely identifies the resource
	// such as `aws_instance.id` or `aws_iam_role.arn`. You can also index into
	// arrays e.g. `kubernetes_replication_controller.metadata[0].name`
	TerraformQueryMap string `protobuf:"bytes,2,opt,name=terraformQueryMap,proto3" json:"terraformQueryMap,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TerraformMapping) Reset() {
	*x = TerraformMapping{}
	mi := &file_account_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerraformMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformMapping) ProtoMessage() {}

func (x *TerraformMapping) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformMapping.ProtoReflect.Descriptor instead.
func (*TerraformMapping) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{44}
}

func (x *TerraformMapping) GetTerraformMethod() QueryMethod {
	if x != nil {
		return x.TerraformMethod
	}
	return QueryMethod_GET
}

func (x *TerraformMapping) GetTerraformQueryMap() string {
	if x != nil {
		return x.TerraformQueryMap
	}
	return ""
}

type SubmitSourceHeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitSourceHeartbeatResponse) Reset() {
	*x = SubmitSourceHeartbeatResponse{}
	mi := &file_account_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitSourceHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitSourceHeartbeatResponse) ProtoMessage() {}

func (x *SubmitSourceHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitSourceHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*SubmitSourceHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{45}
}

type KeepaliveSourcesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set to true to have the API call wait until the source is up and healthy
	WaitForHealthy bool `protobuf:"varint,1,opt,name=waitForHealthy,proto3" json:"waitForHealthy,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KeepaliveSourcesRequest) Reset() {
	*x = KeepaliveSourcesRequest{}
	mi := &file_account_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepaliveSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepaliveSourcesRequest) ProtoMessage() {}

func (x *KeepaliveSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepaliveSourcesRequest.ProtoReflect.Descriptor instead.
func (*KeepaliveSourcesRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{46}
}

func (x *KeepaliveSourcesRequest) GetWaitForHealthy() bool {
	if x != nil {
		return x.WaitForHealthy
	}
	return false
}

type KeepaliveSourcesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If the user requested to wait for the sources to be healthy, this will
	// contain information about the sources that came up. If the user did not
	// request to wait, this will be empty
	Sources       []*SourceKeepaliveResult `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeepaliveSourcesResponse) Reset() {
	*x = KeepaliveSourcesResponse{}
	mi := &file_account_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepaliveSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepaliveSourcesResponse) ProtoMessage() {}

func (x *KeepaliveSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepaliveSourcesResponse.ProtoReflect.Descriptor instead.
func (*KeepaliveSourcesResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{47}
}

func (x *KeepaliveSourcesResponse) GetSources() []*SourceKeepaliveResult {
	if x != nil {
		return x.Sources
	}
	return nil
}

type CreateTokenRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Public NKey of the user that is requesting a token
	UserPublicNkey string `protobuf:"bytes,1,opt,name=userPublicNkey,proto3" json:"userPublicNkey,omitempty"`
	// Friendly user name
	UserName      string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTokenRequest) Reset() {
	*x = CreateTokenRequest{}
	mi := &file_account_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenRequest) ProtoMessage() {}

func (x *CreateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateTokenRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{48}
}

func (x *CreateTokenRequest) GetUserPublicNkey() string {
	if x != nil {
		return x.UserPublicNkey
	}
	return ""
}

func (x *CreateTokenRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type CreateTokenResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The JWT as a raw string
	Token         string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTokenResponse) Reset() {
	*x = CreateTokenResponse{}
	mi := &file_account_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenResponse) ProtoMessage() {}

func (x *CreateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateTokenResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{49}
}

func (x *CreateTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RevlinkWarmupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevlinkWarmupRequest) Reset() {
	*x = RevlinkWarmupRequest{}
	mi := &file_account_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevlinkWarmupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevlinkWarmupRequest) ProtoMessage() {}

func (x *RevlinkWarmupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevlinkWarmupRequest.ProtoReflect.Descriptor instead.
func (*RevlinkWarmupRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{50}
}

type RevlinkWarmupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Items         int32                  `protobuf:"varint,2,opt,name=items,proto3" json:"items,omitempty"`
	Edges         int32                  `protobuf:"varint,3,opt,name=edges,proto3" json:"edges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevlinkWarmupResponse) Reset() {
	*x = RevlinkWarmupResponse{}
	mi := &file_account_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevlinkWarmupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevlinkWarmupResponse) ProtoMessage() {}

func (x *RevlinkWarmupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevlinkWarmupResponse.ProtoReflect.Descriptor instead.
func (*RevlinkWarmupResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{51}
}

func (x *RevlinkWarmupResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RevlinkWarmupResponse) GetItems() int32 {
	if x != nil {
		return x.Items
	}
	return 0
}

func (x *RevlinkWarmupResponse) GetEdges() int32 {
	if x != nil {
		return x.Edges
	}
	return 0
}

type GetTrialEndRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrialEndRequest) Reset() {
	*x = GetTrialEndRequest{}
	mi := &file_account_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrialEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrialEndRequest) ProtoMessage() {}

func (x *GetTrialEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrialEndRequest.ProtoReflect.Descriptor instead.
func (*GetTrialEndRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{52}
}

type GetTrialEndResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EndsAt        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=endsAt,proto3" json:"endsAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrialEndResponse) Reset() {
	*x = GetTrialEndResponse{}
	mi := &file_account_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrialEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrialEndResponse) ProtoMessage() {}

func (x *GetTrialEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrialEndResponse.ProtoReflect.Descriptor instead.
func (*GetTrialEndResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{53}
}

func (x *GetTrialEndResponse) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

type AvailableItemType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of item that this adapter returns e.g. eks-cluster
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The category that these items fall under
	Category AdapterCategory `protobuf:"varint,2,opt,name=category,proto3,enum=account.AdapterCategory" json:"category,omitempty"`
	// A descriptive name of the types of items that are returned by this
	// adapter e.g. "EKS Cluster"
	DescriptiveName string `protobuf:"bytes,3,opt,name=descriptiveName,proto3" json:"descriptiveName,omitempty"`
	// The supported query methods for this adapter
	SupportedQueryMethods *AdapterSupportedQueryMethods `protobuf:"bytes,4,opt,name=supportedQueryMethods,proto3" json:"supportedQueryMethods,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AvailableItemType) Reset() {
	*x = AvailableItemType{}
	mi := &file_account_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailableItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableItemType) ProtoMessage() {}

func (x *AvailableItemType) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableItemType.ProtoReflect.Descriptor instead.
func (*AvailableItemType) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{54}
}

func (x *AvailableItemType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AvailableItemType) GetCategory() AdapterCategory {
	if x != nil {
		return x.Category
	}
	return AdapterCategory_ADAPTER_CATEGORY_OTHER
}

func (x *AvailableItemType) GetDescriptiveName() string {
	if x != nil {
		return x.DescriptiveName
	}
	return ""
}

func (x *AvailableItemType) GetSupportedQueryMethods() *AdapterSupportedQueryMethods {
	if x != nil {
		return x.SupportedQueryMethods
	}
	return nil
}

type ListAvailableItemTypesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAvailableItemTypesRequest) Reset() {
	*x = ListAvailableItemTypesRequest{}
	mi := &file_account_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableItemTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableItemTypesRequest) ProtoMessage() {}

func (x *ListAvailableItemTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableItemTypesRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableItemTypesRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{55}
}

type ListAvailableItemTypesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Types         []*AvailableItemType   `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAvailableItemTypesResponse) Reset() {
	*x = ListAvailableItemTypesResponse{}
	mi := &file_account_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAvailableItemTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableItemTypesResponse) ProtoMessage() {}

func (x *ListAvailableItemTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableItemTypesResponse.ProtoReflect.Descriptor instead.
func (*ListAvailableItemTypesResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{56}
}

func (x *ListAvailableItemTypesResponse) GetTypes() []*AvailableItemType {
	if x != nil {
		return x.Types
	}
	return nil
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x43,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a,
	0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x17, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x18,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x18, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x1c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a,
	0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4e, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4e, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc6, 0x01, 0x0a,
	0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x43, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x10, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7b, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x31, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4e, 0x6b, 0x65, 0x79, 0x22, 0x53, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x41, 0x6d,
	0x53, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x41, 0x6d, 0x53,
	0x75, 0x72, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x64, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x15, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbe, 0x04, 0x0a, 0x0c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x1c, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x07, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x0f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x04, 0x08,
	0x08, 0x10, 0x09, 0x22, 0xd3, 0x02, 0x0a, 0x0f, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x12, 0x47, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x1c, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x72,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0f,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x61, 0x70, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x54, 0x0a, 0x18,
	0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x76,
	0x6c, 0x69, 0x6e, 0x6b, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5b, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x57, 0x61, 0x72, 0x6d,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x14,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65,
	0x6e, 0x64, 0x73, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x22,
	0xe4, 0x01, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52,
	0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2a, 0x96, 0x01, 0x0a, 0x0c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x2a, 0x27, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xb2, 0x02,
	0x0a, 0x0f, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x49,
	0x10, 0x08, 0x32, 0xe1, 0x07, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfe, 0x09, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x25,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x10, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x57, 0x61, 0x72, 0x6d, 0x75,
	0x70, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x6c,
	0x69, 0x6e, 0x6b, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x6c, 0x69,
	0x6e, 0x6b, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e,
	0x64, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x64, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x64, 0x70,
	0x2d, 0x67, 0x6f, 0x3b, 0x73, 0x64, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData []byte
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_account_proto_rawDesc), len(file_account_proto_rawDesc)))
	})
	return file_account_proto_rawDescData
}

var file_account_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_account_proto_goTypes = []any{
	(SourceStatus)(0),                      // 0: account.SourceStatus
	(SourceManaged)(0),                     // 1: account.SourceManaged
	(AdapterCategory)(0),                   // 2: account.AdapterCategory
	(*ListAccountsRequest)(nil),            // 3: account.ListAccountsRequest
	(*ListAccountsResponse)(nil),           // 4: account.ListAccountsResponse
	(*CreateAccountRequest)(nil),           // 5: account.CreateAccountRequest
	(*CreateAccountResponse)(nil),          // 6: account.CreateAccountResponse
	(*UpdateAccountRequest)(nil),           // 7: account.UpdateAccountRequest
	(*UpdateAccountResponse)(nil),          // 8: account.UpdateAccountResponse
	(*AdminUpdateAccountRequest)(nil),      // 9: account.AdminUpdateAccountRequest
	(*AdminGetAccountRequest)(nil),         // 10: account.AdminGetAccountRequest
	(*AdminDeleteAccountRequest)(nil),      // 11: account.AdminDeleteAccountRequest
	(*AdminDeleteAccountResponse)(nil),     // 12: account.AdminDeleteAccountResponse
	(*AdminListSourcesRequest)(nil),        // 13: account.AdminListSourcesRequest
	(*AdminCreateSourceRequest)(nil),       // 14: account.AdminCreateSourceRequest
	(*AdminGetSourceRequest)(nil),          // 15: account.AdminGetSourceRequest
	(*AdminUpdateSourceRequest)(nil),       // 16: account.AdminUpdateSourceRequest
	(*AdminDeleteSourceRequest)(nil),       // 17: account.AdminDeleteSourceRequest
	(*AdminKeepaliveSourcesRequest)(nil),   // 18: account.AdminKeepaliveSourcesRequest
	(*AdminCreateTokenRequest)(nil),        // 19: account.AdminCreateTokenRequest
	(*Source)(nil),                         // 20: account.Source
	(*SourceMetadata)(nil),                 // 21: account.SourceMetadata
	(*SourceProperties)(nil),               // 22: account.SourceProperties
	(*Account)(nil),                        // 23: account.Account
	(*AccountMetadata)(nil),                // 24: account.AccountMetadata
	(*AccountProperties)(nil),              // 25: account.AccountProperties
	(*GetAccountRequest)(nil),              // 26: account.GetAccountRequest
	(*GetAccountResponse)(nil),             // 27: account.GetAccountResponse
	(*DeleteAccountRequest)(nil),           // 28: account.DeleteAccountRequest
	(*DeleteAccountResponse)(nil),          // 29: account.DeleteAccountResponse
	(*ListSourcesRequest)(nil),             // 30: account.ListSourcesRequest
	(*ListSourcesResponse)(nil),            // 31: account.ListSourcesResponse
	(*CreateSourceRequest)(nil),            // 32: account.CreateSourceRequest
	(*CreateSourceResponse)(nil),           // 33: account.CreateSourceResponse
	(*GetSourceRequest)(nil),               // 34: account.GetSourceRequest
	(*GetSourceResponse)(nil),              // 35: account.GetSourceResponse
	(*UpdateSourceRequest)(nil),            // 36: account.UpdateSourceRequest
	(*UpdateSourceResponse)(nil),           // 37: account.UpdateSourceResponse
	(*DeleteSourceRequest)(nil),            // 38: account.DeleteSourceRequest
	(*DeleteSourceResponse)(nil),           // 39: account.DeleteSourceResponse
	(*SourceKeepaliveResult)(nil),          // 40: account.SourceKeepaliveResult
	(*ListAllSourcesStatusRequest)(nil),    // 41: account.ListAllSourcesStatusRequest
	(*SourceHealth)(nil),                   // 42: account.SourceHealth
	(*ListAllSourcesStatusResponse)(nil),   // 43: account.ListAllSourcesStatusResponse
	(*SubmitSourceHeartbeatRequest)(nil),   // 44: account.SubmitSourceHeartbeatRequest
	(*AdapterMetadata)(nil),                // 45: account.AdapterMetadata
	(*AdapterSupportedQueryMethods)(nil),   // 46: account.AdapterSupportedQueryMethods
	(*TerraformMapping)(nil),               // 47: account.TerraformMapping
	(*SubmitSourceHeartbeatResponse)(nil),  // 48: account.SubmitSourceHeartbeatResponse
	(*KeepaliveSourcesRequest)(nil),        // 49: account.KeepaliveSourcesRequest
	(*KeepaliveSourcesResponse)(nil),       // 50: account.KeepaliveSourcesResponse
	(*CreateTokenRequest)(nil),             // 51: account.CreateTokenRequest
	(*CreateTokenResponse)(nil),            // 52: account.CreateTokenResponse
	(*RevlinkWarmupRequest)(nil),           // 53: account.RevlinkWarmupRequest
	(*RevlinkWarmupResponse)(nil),          // 54: account.RevlinkWarmupResponse
	(*GetTrialEndRequest)(nil),             // 55: account.GetTrialEndRequest
	(*GetTrialEndResponse)(nil),            // 56: account.GetTrialEndResponse
	(*AvailableItemType)(nil),              // 57: account.AvailableItemType
	(*ListAvailableItemTypesRequest)(nil),  // 58: account.ListAvailableItemTypesRequest
	(*ListAvailableItemTypesResponse)(nil), // 59: account.ListAvailableItemTypesResponse
	(*timestamppb.Timestamp)(nil),          // 60: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                // 61: google.protobuf.Struct
	(*durationpb.Duration)(nil),            // 62: google.protobuf.Duration
	(QueryMethod)(0),                       // 63: QueryMethod
}
var file_account_proto_depIdxs = []int32{
	23, // 0: account.ListAccountsResponse.accounts:type_name -> account.Account
	25, // 1: account.CreateAccountRequest.properties:type_name -> account.AccountProperties
	23, // 2: account.CreateAccountResponse.account:type_name -> account.Account
	25, // 3: account.UpdateAccountRequest.properties:type_name -> account.AccountProperties
	23, // 4: account.UpdateAccountResponse.account:type_name -> account.Account
	7,  // 5: account.AdminUpdateAccountRequest.request:type_name -> account.UpdateAccountRequest
	30, // 6: account.AdminListSourcesRequest.request:type_name -> account.ListSourcesRequest
	32, // 7: account.AdminCreateSourceRequest.request:type_name -> account.CreateSourceRequest
	34, // 8: account.AdminGetSourceRequest.request:type_name -> account.GetSourceRequest
	36, // 9: account.AdminUpdateSourceRequest.request:type_name -> account.UpdateSourceRequest
	38, // 10: account.AdminDeleteSourceRequest.request:type_name -> account.DeleteSourceRequest
	49, // 11: account.AdminKeepaliveSourcesRequest.request:type_name -> account.KeepaliveSourcesRequest
	51, // 12: account.AdminCreateTokenRequest.request:type_name -> account.CreateTokenRequest
	21, // 13: account.Source.metadata:type_name -> account.SourceMetadata
	22, // 14: account.Source.properties:type_name -> account.SourceProperties
	60, // 15: account.SourceMetadata.TokenExpiry:type_name -> google.protobuf.Timestamp
	0,  // 16: account.SourceMetadata.Status:type_name -> account.SourceStatus
	61, // 17: account.SourceProperties.Config:type_name -> google.protobuf.Struct
	61, // 18: account.SourceProperties.AdditionalConfig:type_name -> google.protobuf.Struct
	24, // 19: account.Account.metadata:type_name -> account.AccountMetadata
	25, // 20: account.Account.properties:type_name -> account.AccountProperties
	23, // 21: account.GetAccountResponse.account:type_name -> account.Account
	20, // 22: account.ListSourcesResponse.Sources:type_name -> account.Source
	22, // 23: account.CreateSourceRequest.properties:type_name -> account.SourceProperties
	20, // 24: account.CreateSourceResponse.source:type_name -> account.Source
	20, // 25: account.GetSourceResponse.source:type_name -> account.Source
	22, // 26: account.UpdateSourceRequest.properties:type_name -> account.SourceProperties
	20, // 27: account.UpdateSourceResponse.source:type_name -> account.Source
	0,  // 28: account.SourceKeepaliveResult.Status:type_name -> account.SourceStatus
	0,  // 29: account.SourceHealth.status:type_name -> account.SourceStatus
	60, // 30: account.SourceHealth.createdAt:type_name -> google.protobuf.Timestamp
	60, // 31: account.SourceHealth.lastHeartbeat:type_name -> google.protobuf.Timestamp
	60, // 32: account.SourceHealth.nextHeartbeat:type_name -> google.protobuf.Timestamp
	1,  // 33: account.SourceHealth.managed:type_name -> account.SourceManaged
	45, // 34: account.SourceHealth.adapterMetadata:type_name -> account.AdapterMetadata
	42, // 35: account.ListAllSourcesStatusResponse.sources:type_name -> account.SourceHealth
	62, // 36: account.SubmitSourceHeartbeatRequest.nextHeartbeatMax:type_name -> google.protobuf.Duration
	1,  // 37: account.SubmitSourceHeartbeatRequest.managed:type_name -> account.SourceManaged
	45, // 38: account.SubmitSourceHeartbeatRequest.adapterMetadata:type_name -> account.AdapterMetadata
	2,  // 39: account.AdapterMetadata.category:type_name -> account.AdapterCategory
	46, // 40: account.AdapterMetadata.supportedQueryMethods:type_name -> account.AdapterSupportedQueryMethods
	47, // 41: account.AdapterMetadata.terraformMappings:type_name -> account.TerraformMapping
	63, // 42: account.TerraformMapping.terraformMethod:type_name -> QueryMethod
	40, // 43: account.KeepaliveSourcesResponse.sources:type_name -> account.SourceKeepaliveResult
	60, // 44: account.GetTrialEndResponse.endsAt:type_name -> google.protobuf.Timestamp
	2,  // 45: account.AvailableItemType.category:type_name -> account.AdapterCategory
	46, // 46: account.AvailableItemType.supportedQueryMethods:type_name -> account.AdapterSupportedQueryMethods
	57, // 47: account.ListAvailableItemTypesResponse.types:type_name -> account.AvailableItemType
	3,  // 48: account.AdminService.ListAccounts:input_type -> account.ListAccountsRequest
	5,  // 49: account.AdminService.CreateAccount:input_type -> account.CreateAccountRequest
	9,  // 50: account.AdminService.UpdateAccount:input_type -> account.AdminUpdateAccountRequest
	10, // 51: account.AdminService.GetAccount:input_type -> account.AdminGetAccountRequest
	11, // 52: account.AdminService.DeleteAccount:input_type -> account.AdminDeleteAccountRequest
	13, // 53: account.AdminService.ListSources:input_type -> account.AdminListSourcesRequest
	14, // 54: account.AdminService.CreateSource:input_type -> account.AdminCreateSourceRequest
	15, // 55: account.AdminService.GetSource:input_type -> account.AdminGetSourceRequest
	16, // 56: account.AdminService.UpdateSource:input_type -> account.AdminUpdateSourceRequest
	17, // 57: account.AdminService.DeleteSource:input_type -> account.AdminDeleteSourceRequest
	18, // 58: account.AdminService.KeepaliveSources:input_type -> account.AdminKeepaliveSourcesRequest
	19, // 59: account.AdminService.CreateToken:input_type -> account.AdminCreateTokenRequest
	26, // 60: account.ManagementService.GetAccount:input_type -> account.GetAccountRequest
	28, // 61: account.ManagementService.DeleteAccount:input_type -> account.DeleteAccountRequest
	30, // 62: account.ManagementService.ListSources:input_type -> account.ListSourcesRequest
	32, // 63: account.ManagementService.CreateSource:input_type -> account.CreateSourceRequest
	34, // 64: account.ManagementService.GetSource:input_type -> account.GetSourceRequest
	36, // 65: account.ManagementService.UpdateSource:input_type -> account.UpdateSourceRequest
	38, // 66: account.ManagementService.DeleteSource:input_type -> account.DeleteSourceRequest
	41, // 67: account.ManagementService.ListAllSourcesStatus:input_type -> account.ListAllSourcesStatusRequest
	41, // 68: account.ManagementService.ListActiveSourcesStatus:input_type -> account.ListAllSourcesStatusRequest
	44, // 69: account.ManagementService.SubmitSourceHeartbeat:input_type -> account.SubmitSourceHeartbeatRequest
	49, // 70: account.ManagementService.KeepaliveSources:input_type -> account.KeepaliveSourcesRequest
	51, // 71: account.ManagementService.CreateToken:input_type -> account.CreateTokenRequest
	53, // 72: account.ManagementService.RevlinkWarmup:input_type -> account.RevlinkWarmupRequest
	55, // 73: account.ManagementService.GetTrialEnd:input_type -> account.GetTrialEndRequest
	58, // 74: account.ManagementService.ListAvailableItemTypes:input_type -> account.ListAvailableItemTypesRequest
	4,  // 75: account.AdminService.ListAccounts:output_type -> account.ListAccountsResponse
	6,  // 76: account.AdminService.CreateAccount:output_type -> account.CreateAccountResponse
	8,  // 77: account.AdminService.UpdateAccount:output_type -> account.UpdateAccountResponse
	27, // 78: account.AdminService.GetAccount:output_type -> account.GetAccountResponse
	12, // 79: account.AdminService.DeleteAccount:output_type -> account.AdminDeleteAccountResponse
	31, // 80: account.AdminService.ListSources:output_type -> account.ListSourcesResponse
	33, // 81: account.AdminService.CreateSource:output_type -> account.CreateSourceResponse
	35, // 82: account.AdminService.GetSource:output_type -> account.GetSourceResponse
	37, // 83: account.AdminService.UpdateSource:output_type -> account.UpdateSourceResponse
	39, // 84: account.AdminService.DeleteSource:output_type -> account.DeleteSourceResponse
	50, // 85: account.AdminService.KeepaliveSources:output_type -> account.KeepaliveSourcesResponse
	52, // 86: account.AdminService.CreateToken:output_type -> account.CreateTokenResponse
	27, // 87: account.ManagementService.GetAccount:output_type -> account.GetAccountResponse
	29, // 88: account.ManagementService.DeleteAccount:output_type -> account.DeleteAccountResponse
	31, // 89: account.ManagementService.ListSources:output_type -> account.ListSourcesResponse
	33, // 90: account.ManagementService.CreateSource:output_type -> account.CreateSourceResponse
	35, // 91: account.ManagementService.GetSource:output_type -> account.GetSourceResponse
	37, // 92: account.ManagementService.UpdateSource:output_type -> account.UpdateSourceResponse
	39, // 93: account.ManagementService.DeleteSource:output_type -> account.DeleteSourceResponse
	43, // 94: account.ManagementService.ListAllSourcesStatus:output_type -> account.ListAllSourcesStatusResponse
	43, // 95: account.ManagementService.ListActiveSourcesStatus:output_type -> account.ListAllSourcesStatusResponse
	48, // 96: account.ManagementService.SubmitSourceHeartbeat:output_type -> account.SubmitSourceHeartbeatResponse
	50, // 97: account.ManagementService.KeepaliveSources:output_type -> account.KeepaliveSourcesResponse
	52, // 98: account.ManagementService.CreateToken:output_type -> account.CreateTokenResponse
	54, // 99: account.ManagementService.RevlinkWarmup:output_type -> account.RevlinkWarmupResponse
	56, // 100: account.ManagementService.GetTrialEnd:output_type -> account.GetTrialEndResponse
	59, // 101: account.ManagementService.ListAvailableItemTypes:output_type -> account.ListAvailableItemTypesResponse
	75, // [75:102] is the sub-list for method output_type
	48, // [48:75] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	file_items_proto_init()
	file_account_proto_msgTypes[39].OneofWrappers = []any{}
	file_account_proto_msgTypes[41].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_account_proto_rawDesc), len(file_account_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		EnumInfos:         file_account_proto_enumTypes,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
