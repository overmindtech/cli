// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: items.proto

package sdp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the health of something, the meaning of each state may depend on
// the context in which it is used but should be reasonably obvious
type Health int32

const (
	Health_HEALTH_UNKNOWN Health = 0 // The health could not be determined
	Health_HEALTH_OK      Health = 1 // Functioning normally
	Health_HEALTH_WARNING Health = 2 // Functioning, but degraded
	Health_HEALTH_ERROR   Health = 3 // Not functioning
	Health_HEALTH_PENDING Health = 4 // Health state is transitioning, such as when something is first provisioned
)

// Enum value maps for Health.
var (
	Health_name = map[int32]string{
		0: "HEALTH_UNKNOWN",
		1: "HEALTH_OK",
		2: "HEALTH_WARNING",
		3: "HEALTH_ERROR",
		4: "HEALTH_PENDING",
	}
	Health_value = map[string]int32{
		"HEALTH_UNKNOWN": 0,
		"HEALTH_OK":      1,
		"HEALTH_WARNING": 2,
		"HEALTH_ERROR":   3,
		"HEALTH_PENDING": 4,
	}
)

func (x Health) Enum() *Health {
	p := new(Health)
	*p = x
	return p
}

func (x Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Health) Descriptor() protoreflect.EnumDescriptor {
	return file_items_proto_enumTypes[0].Descriptor()
}

func (Health) Type() protoreflect.EnumType {
	return &file_items_proto_enumTypes[0]
}

func (x Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Health.Descriptor instead.
func (Health) EnumDescriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{0}
}

// QueryMethod represents the available query methods. The details of these
// methods are:
//
// GET: This takes a single unique query and should only return a single item.
//
//	If an item matching the parameter passed doesn't exist the server should
//	fail
//
// LIST: This takes no query (or ignores it) and should return all items that it
//
//	can find
//
// SEARCH: This takes a non-unique query which is designed to be used as a
//
//	search term. It should return some number of items (or zero) which
//	match the query
type QueryMethod int32

const (
	QueryMethod_GET    QueryMethod = 0
	QueryMethod_LIST   QueryMethod = 1
	QueryMethod_SEARCH QueryMethod = 2
)

// Enum value maps for QueryMethod.
var (
	QueryMethod_name = map[int32]string{
		0: "GET",
		1: "LIST",
		2: "SEARCH",
	}
	QueryMethod_value = map[string]int32{
		"GET":    0,
		"LIST":   1,
		"SEARCH": 2,
	}
)

func (x QueryMethod) Enum() *QueryMethod {
	p := new(QueryMethod)
	*p = x
	return p
}

func (x QueryMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_items_proto_enumTypes[1].Descriptor()
}

func (QueryMethod) Type() protoreflect.EnumType {
	return &file_items_proto_enumTypes[1]
}

func (x QueryMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryMethod.Descriptor instead.
func (QueryMethod) EnumDescriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{1}
}

// The error type. Any types in here will be gracefully handled unless the
// type os "OTHER"
type QueryStatus_Status int32

const (
	// the status has not been specified
	QueryStatus_UNSPECIFIED QueryStatus_Status = 0
	// the query has been started
	QueryStatus_STARTED QueryStatus_Status = 1
	// the query has been cancelled.
	// This is a final state.
	QueryStatus_CANCELLED QueryStatus_Status = 3
	// the query has finished with an error status. expect a separate QueryError describing that.
	// This is a final state.
	// TODO: fold the error details into this message
	QueryStatus_ERRORED QueryStatus_Status = 4
	// The query has finished and all results have been sent over the wire
	// This is a final state.
	QueryStatus_FINISHED QueryStatus_Status = 5
)

// Enum value maps for QueryStatus_Status.
var (
	QueryStatus_Status_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "STARTED",
		3: "CANCELLED",
		4: "ERRORED",
		5: "FINISHED",
	}
	QueryStatus_Status_value = map[string]int32{
		"UNSPECIFIED": 0,
		"STARTED":     1,
		"CANCELLED":   3,
		"ERRORED":     4,
		"FINISHED":    5,
	}
)

func (x QueryStatus_Status) Enum() *QueryStatus_Status {
	p := new(QueryStatus_Status)
	*p = x
	return p
}

func (x QueryStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_items_proto_enumTypes[2].Descriptor()
}

func (QueryStatus_Status) Type() protoreflect.EnumType {
	return &file_items_proto_enumTypes[2]
}

func (x QueryStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryStatus_Status.Descriptor instead.
func (QueryStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{10, 0}
}

// The error type. Any types in here will be gracefully handled unless the
// type os "OTHER"
type QueryError_ErrorType int32

const (
	// This should be used of all other failure modes, such as timeouts,
	// unexpected failures when querying state, permissions errors etc. Errors
	// that return this type should not be cached as the error may be transient.
	QueryError_OTHER QueryError_ErrorType = 0
	// NOTFOUND means that the item was not found. This is only returned as the
	// result of a GET query since all other queries would return an empty
	// list instead
	QueryError_NOTFOUND QueryError_ErrorType = 1
	// NOSCOPE means that the item was not found because we don't have
	// access to the requested scope. This should not be interpreted as "The
	// item doesn't exist" (as with a NOTFOUND error) but rather as "We can't
	// tell you whether or not the item exists"
	QueryError_NOSCOPE QueryError_ErrorType = 2
	// TIMEOUT means that the source times out when trying to query the item.
	// The timeout is provided in the original query
	QueryError_TIMEOUT QueryError_ErrorType = 3
)

// Enum value maps for QueryError_ErrorType.
var (
	QueryError_ErrorType_name = map[int32]string{
		0: "OTHER",
		1: "NOTFOUND",
		2: "NOSCOPE",
		3: "TIMEOUT",
	}
	QueryError_ErrorType_value = map[string]int32{
		"OTHER":    0,
		"NOTFOUND": 1,
		"NOSCOPE":  2,
		"TIMEOUT":  3,
	}
)

func (x QueryError_ErrorType) Enum() *QueryError_ErrorType {
	p := new(QueryError_ErrorType)
	*p = x
	return p
}

func (x QueryError_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryError_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_items_proto_enumTypes[3].Descriptor()
}

func (QueryError_ErrorType) Type() protoreflect.EnumType {
	return &file_items_proto_enumTypes[3]
}

func (x QueryError_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryError_ErrorType.Descriptor instead.
func (QueryError_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{11, 0}
}

// This message stores additional information on Edges (and edge-like constructs) to determine how configuration changes can impact
// the linked items.
//
//	Blast Propagation options:
//
// |-------|-------|----------------------
// |   in  |  out  | result
// |-------|-------|----------------------
// | false | false | no change in any item can affect the other
// | false | true  | a change to this item can affect its linked items
// |       |       | example: a change to an EC2 instance can affect its DNS name (in the sense that other items depending on that DNS name will see the impact)
// | true  | false | a change to linked items can affect this item
// |       |       | example: changing the KMS key used by a DynamoDB table can impact the table, but no change to the table can impact the key
// | true  | true  | changes on both sides of the link can affect the other
// |       |       | example: changes to both EC2 Instances and their volumes can affect the other side of the relation.
type BlastPropagation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// is true if changes on linked items can affect this item
	In bool `protobuf:"varint,1,opt,name=in,proto3" json:"in,omitempty"`
	// is true if changes on this item can affect linked items
	Out           bool `protobuf:"varint,2,opt,name=out,proto3" json:"out,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlastPropagation) Reset() {
	*x = BlastPropagation{}
	mi := &file_items_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlastPropagation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlastPropagation) ProtoMessage() {}

func (x *BlastPropagation) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlastPropagation.ProtoReflect.Descriptor instead.
func (*BlastPropagation) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{0}
}

func (x *BlastPropagation) GetIn() bool {
	if x != nil {
		return x.In
	}
	return false
}

func (x *BlastPropagation) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

// An annotated query to indicate potential linked items.
type LinkedItemQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the query that would find linked items
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// how configuration changes (i.e. the "blast") propagates over this link
	BlastPropagation *BlastPropagation `protobuf:"bytes,2,opt,name=blastPropagation,proto3" json:"blastPropagation,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LinkedItemQuery) Reset() {
	*x = LinkedItemQuery{}
	mi := &file_items_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkedItemQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedItemQuery) ProtoMessage() {}

func (x *LinkedItemQuery) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedItemQuery.ProtoReflect.Descriptor instead.
func (*LinkedItemQuery) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{1}
}

func (x *LinkedItemQuery) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LinkedItemQuery) GetBlastPropagation() *BlastPropagation {
	if x != nil {
		return x.BlastPropagation
	}
	return nil
}

// An annotated reference to list linked items.
type LinkedItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the linked item
	Item *Reference `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// how configuration changes (i.e. the "blast") propagates over this link
	BlastPropagation *BlastPropagation `protobuf:"bytes,2,opt,name=blastPropagation,proto3" json:"blastPropagation,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LinkedItem) Reset() {
	*x = LinkedItem{}
	mi := &file_items_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedItem) ProtoMessage() {}

func (x *LinkedItem) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedItem.ProtoReflect.Descriptor instead.
func (*LinkedItem) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{2}
}

func (x *LinkedItem) GetItem() *Reference {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *LinkedItem) GetBlastPropagation() *BlastPropagation {
	if x != nil {
		return x.BlastPropagation
	}
	return nil
}

// This is the same as Item within the package with a couple of exceptions, no
// real reason why this whole thing couldn't be modelled in protobuf though if
// required. Just need to decide what if anything should remain private
type Item struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Type            string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	UniqueAttribute string                 `protobuf:"bytes,2,opt,name=uniqueAttribute,proto3" json:"uniqueAttribute,omitempty"`
	Attributes      *ItemAttributes        `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Metadata        *Metadata              `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The scope within which the item is unique. Item uniqueness is determined
	// by the combination of type and uniqueAttribute value. However it is
	// possible for the same item to exist in many scopes. There is not formal
	// definition for what a scope should be other than the fact that it should
	// be somewhat descriptive and should ensure item uniqueness
	Scope string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	// Not all items will have relatedItems we are are using a two byte
	// integer to save one byte integers for more common things
	LinkedItemQueries []*LinkedItemQuery `protobuf:"bytes,16,rep,name=linkedItemQueries,proto3" json:"linkedItemQueries,omitempty"`
	// Linked items
	LinkedItems []*LinkedItem `protobuf:"bytes,17,rep,name=linkedItems,proto3" json:"linkedItems,omitempty"`
	// (optional) Represents the health of the item. Only items that have a
	// clearly relevant health attribute should return a value for health
	Health *Health `protobuf:"varint,18,opt,name=health,proto3,enum=Health,oneof" json:"health,omitempty"`
	// Arbitrary key-value pairs that can be used to store additional information.
	// These tags are retrieved from the source and map to the target's definition
	// of a tag (e.g. AWS tags, Kubernetes labels, etc.)
	Tags map[string]string `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The available log streams for this item, if any. Use the Logs service to
	// access the actual contents.
	LogStreams    []*LogStreamDetails `protobuf:"bytes,20,rep,name=logStreams,proto3" json:"logStreams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_items_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{3}
}

func (x *Item) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Item) GetUniqueAttribute() string {
	if x != nil {
		return x.UniqueAttribute
	}
	return ""
}

func (x *Item) GetAttributes() *ItemAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Item) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Item) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Item) GetLinkedItemQueries() []*LinkedItemQuery {
	if x != nil {
		return x.LinkedItemQueries
	}
	return nil
}

func (x *Item) GetLinkedItems() []*LinkedItem {
	if x != nil {
		return x.LinkedItems
	}
	return nil
}

func (x *Item) GetHealth() Health {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return Health_HEALTH_UNKNOWN
}

func (x *Item) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Item) GetLogStreams() []*LogStreamDetails {
	if x != nil {
		return x.LogStreams
	}
	return nil
}

// ItemAttributes represents the known attributes for an item. These are likely
// to be common to a given type, but even this is not guaranteed. All items must
// have at least one attribute however as it needs something to uniquely
// identify it
type ItemAttributes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AttrStruct    *structpb.Struct       `protobuf:"bytes,1,opt,name=attrStruct,proto3" json:"attrStruct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemAttributes) Reset() {
	*x = ItemAttributes{}
	mi := &file_items_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemAttributes) ProtoMessage() {}

func (x *ItemAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemAttributes.ProtoReflect.Descriptor instead.
func (*ItemAttributes) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{4}
}

func (x *ItemAttributes) GetAttrStruct() *structpb.Struct {
	if x != nil {
		return x.AttrStruct
	}
	return nil
}

// Metadata about the item. Where it came from, how long it took, etc.
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the name of the source that was used to find the item.
	SourceName string `protobuf:"bytes,2,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
	// The query that caused this item to be found. This is for gateway-internal use and will not be exposed to the frontend.
	SourceQuery *Query `protobuf:"bytes,3,opt,name=sourceQuery,proto3" json:"sourceQuery,omitempty"`
	// The time that the item was found
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// How long the source took to execute in total when processing the Query.
	//
	// (deprecated) This is no longer sent as streaming responses make this metric
	// impossible to calculate on a per-item basis
	//
	// Deprecated: Marked as deprecated in items.proto.
	SourceDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=sourceDuration,proto3" json:"sourceDuration,omitempty"`
	// How long the source took to execute per item when processing the
	// Query
	//
	// (deprecated) This is no longer sent
	//
	// Deprecated: Marked as deprecated in items.proto.
	SourceDurationPerItem *durationpb.Duration `protobuf:"bytes,6,opt,name=sourceDurationPerItem,proto3" json:"sourceDurationPerItem,omitempty"`
	// Whether the item should be hidden/ignored by user-facing things such as
	// GUIs and databases.
	//
	// Some types of items are only relevant in calculating higher-layer
	// abstractions and are therefore always hidden. A good example of this would
	// be the output of a command. This could be used by a remote source to gather
	// information, but we don't actually want to show the user all the commands
	// that were run, just the final item returned by the source
	Hidden        bool `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_items_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{5}
}

func (x *Metadata) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *Metadata) GetSourceQuery() *Query {
	if x != nil {
		return x.SourceQuery
	}
	return nil
}

func (x *Metadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in items.proto.
func (x *Metadata) GetSourceDuration() *durationpb.Duration {
	if x != nil {
		return x.SourceDuration
	}
	return nil
}

// Deprecated: Marked as deprecated in items.proto.
func (x *Metadata) GetSourceDurationPerItem() *durationpb.Duration {
	if x != nil {
		return x.SourceDurationPerItem
	}
	return nil
}

func (x *Metadata) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

// This is a list of items, like a List() would return
type Items struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Item                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Items) Reset() {
	*x = Items{}
	mi := &file_items_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Items) ProtoMessage() {}

func (x *Items) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Items.ProtoReflect.Descriptor instead.
func (*Items) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{6}
}

func (x *Items) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// describes the details of a Log Stream for an item
type LogStreamDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The descriptive name for display purposes
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the source scope for this log stream. Has to be a specific scope, not
	// wildcarded.
	Scope string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	// The query that should pe passed back to the upstream
	// API to get log lines from this stream
	Query         string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogStreamDetails) Reset() {
	*x = LogStreamDetails{}
	mi := &file_items_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogStreamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStreamDetails) ProtoMessage() {}

func (x *LogStreamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStreamDetails.ProtoReflect.Descriptor instead.
func (*LogStreamDetails) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{7}
}

func (x *LogStreamDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogStreamDetails) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *LogStreamDetails) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Query represents a query for an item or a list of items.
type Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of item to search for. "*" means all types
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Which method to use when looking for it
	Method QueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=QueryMethod" json:"method,omitempty"`
	// What query should be passed to that method
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// Defines how this query should behave when finding new items
	RecursionBehaviour *Query_RecursionBehaviour `protobuf:"bytes,4,opt,name=recursionBehaviour,proto3" json:"recursionBehaviour,omitempty"`
	// The scope for which we are requesting. To query all scopes use the the
	// wildcard '*'
	Scope string `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	// Whether to ignore the cache and execute the query regardless.
	//
	// By default sources will implement some level of caching, this is
	// particularly important for linked items as a single query with a large link
	// depth may result in the same item being queried many times as links are
	// resolved and more and more items link to each other. However if required
	// this caching can be turned off using this parameter
	IgnoreCache bool `protobuf:"varint,6,opt,name=ignoreCache,proto3" json:"ignoreCache,omitempty"`
	// A UUID to uniquely identify the query. This should be stored by the
	// requester as it will be needed later if the requester wants to cancel a
	// query. It should be stored as 128 bytes, as opposed to the textual
	// representation
	UUID []byte `protobuf:"bytes,7,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// The deadline for this query. When the deadline elapses, results become
	// irrelevant for the sender and any processing can stop. The deadline gets
	// propagated to all related queries (e.g. for linked items) and processes.
	// Note: there is currently a migration going on from timeouts to durations,
	// so depending on which service is hit, either one is evaluated.
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=deadline,proto3" json:"deadline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_items_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{8}
}

func (x *Query) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Query) GetMethod() QueryMethod {
	if x != nil {
		return x.Method
	}
	return QueryMethod_GET
}

func (x *Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Query) GetRecursionBehaviour() *Query_RecursionBehaviour {
	if x != nil {
		return x.RecursionBehaviour
	}
	return nil
}

func (x *Query) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Query) GetIgnoreCache() bool {
	if x != nil {
		return x.IgnoreCache
	}
	return false
}

func (x *Query) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *Query) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type QueryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ResponseType:
	//
	//	*QueryResponse_NewItem
	//	*QueryResponse_Response
	//	*QueryResponse_Error
	//	*QueryResponse_Edge
	ResponseType  isQueryResponse_ResponseType `protobuf_oneof:"response_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_items_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{9}
}

func (x *QueryResponse) GetResponseType() isQueryResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return nil
}

func (x *QueryResponse) GetNewItem() *Item {
	if x != nil {
		if x, ok := x.ResponseType.(*QueryResponse_NewItem); ok {
			return x.NewItem
		}
	}
	return nil
}

func (x *QueryResponse) GetResponse() *Response {
	if x != nil {
		if x, ok := x.ResponseType.(*QueryResponse_Response); ok {
			return x.Response
		}
	}
	return nil
}

func (x *QueryResponse) GetError() *QueryError {
	if x != nil {
		if x, ok := x.ResponseType.(*QueryResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *QueryResponse) GetEdge() *Edge {
	if x != nil {
		if x, ok := x.ResponseType.(*QueryResponse_Edge); ok {
			return x.Edge
		}
	}
	return nil
}

type isQueryResponse_ResponseType interface {
	isQueryResponse_ResponseType()
}

type QueryResponse_NewItem struct {
	NewItem *Item `protobuf:"bytes,2,opt,name=newItem,proto3,oneof"` // A new item that has been discovered
}

type QueryResponse_Response struct {
	Response *Response `protobuf:"bytes,3,opt,name=response,proto3,oneof"` // Status update
}

type QueryResponse_Error struct {
	Error *QueryError `protobuf:"bytes,4,opt,name=error,proto3,oneof"` // An error has been encountered
}

type QueryResponse_Edge struct {
	Edge *Edge `protobuf:"bytes,5,opt,name=edge,proto3,oneof"` // a link between items/queries
}

func (*QueryResponse_NewItem) isQueryResponse_ResponseType() {}

func (*QueryResponse_Response) isQueryResponse_ResponseType() {}

func (*QueryResponse_Error) isQueryResponse_ResponseType() {}

func (*QueryResponse_Edge) isQueryResponse_ResponseType() {}

// QueryStatus informs the client of status updates of all queries running in this session.
type QueryStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the query
	UUID          []byte             `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Status        QueryStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=QueryStatus_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryStatus) Reset() {
	*x = QueryStatus{}
	mi := &file_items_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatus) ProtoMessage() {}

func (x *QueryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatus.ProtoReflect.Descriptor instead.
func (*QueryStatus) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{10}
}

func (x *QueryStatus) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *QueryStatus) GetStatus() QueryStatus_Status {
	if x != nil {
		return x.Status
	}
	return QueryStatus_UNSPECIFIED
}

// QueryError is sent back when an item query fails
type QueryError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the item query that this response is in relation to (in binary
	// format)
	UUID      []byte               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ErrorType QueryError_ErrorType `protobuf:"varint,2,opt,name=errorType,proto3,enum=QueryError_ErrorType" json:"errorType,omitempty"`
	// The string contents of the error
	ErrorString string `protobuf:"bytes,3,opt,name=errorString,proto3" json:"errorString,omitempty"`
	// The scope from which the error was raised
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// The name of the source which raised the error (if relevant)
	SourceName string `protobuf:"bytes,5,opt,name=sourceName,proto3" json:"sourceName,omitempty"`
	// The type of item that we were looking for at the time of the error
	ItemType string `protobuf:"bytes,6,opt,name=itemType,proto3" json:"itemType,omitempty"`
	// The name of the responder that this error was raised from
	ResponderName string `protobuf:"bytes,7,opt,name=responderName,proto3" json:"responderName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryError) Reset() {
	*x = QueryError{}
	mi := &file_items_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryError) ProtoMessage() {}

func (x *QueryError) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryError.ProtoReflect.Descriptor instead.
func (*QueryError) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{11}
}

func (x *QueryError) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *QueryError) GetErrorType() QueryError_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return QueryError_OTHER
}

func (x *QueryError) GetErrorString() string {
	if x != nil {
		return x.ErrorString
	}
	return ""
}

func (x *QueryError) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *QueryError) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *QueryError) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *QueryError) GetResponderName() string {
	if x != nil {
		return x.ResponderName
	}
	return ""
}

// The message signals that the Query with the corresponding UUID should
// be cancelled. Work should stop immediately, and a final response should be
// sent with a state of CANCELLED to acknowledge that the query has ended due
// to a cancellation
type CancelQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the Query to cancel
	UUID          []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelQuery) Reset() {
	*x = CancelQuery{}
	mi := &file_items_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelQuery) ProtoMessage() {}

func (x *CancelQuery) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelQuery.ProtoReflect.Descriptor instead.
func (*CancelQuery) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{12}
}

func (x *CancelQuery) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

// This requests that the gateway "expands" an item. This involves executing all
// linked item queries within the session and sending the results to the
// client. It is recommended that this be used rather than simply sending each
// linked item request. Using this request type allows the Gateway to save the
// session more intelligently so that it can be bookmarked and used later.
// "Expanding" an item will mean an item always acts the same, even if its
// linked item queries have changed
type Expand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The item that should be expanded
	Item *Reference `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// How many levels of expansion should be run
	LinkDepth uint32 `protobuf:"varint,2,opt,name=linkDepth,proto3" json:"linkDepth,omitempty"`
	// A UUID to uniquely identify the request. This should be stored by the
	// requester as it will be needed later if the requester wants to cancel a
	// request. It should be stored as 128 bytes, as opposed to the textual
	// representation
	UUID []byte `protobuf:"bytes,3,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// The time at which the gateway should stop processing the queries spawned by this request
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expand) Reset() {
	*x = Expand{}
	mi := &file_items_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expand) ProtoMessage() {}

func (x *Expand) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expand.ProtoReflect.Descriptor instead.
func (*Expand) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{13}
}

func (x *Expand) GetItem() *Reference {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *Expand) GetLinkDepth() uint32 {
	if x != nil {
		return x.LinkDepth
	}
	return 0
}

func (x *Expand) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *Expand) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

// Reference to an item
//
// The uniqueness of an item is determined by the combination of:
//
//   - Type
//   - UniqueAttributeValue
//   - Scope
type Reference struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Type                 string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	UniqueAttributeValue string                 `protobuf:"bytes,2,opt,name=uniqueAttributeValue,proto3" json:"uniqueAttributeValue,omitempty"`
	Scope                string                 `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	IsQuery              bool                   `protobuf:"varint,4,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	Query                string                 `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Method               QueryMethod            `protobuf:"varint,6,opt,name=method,proto3,enum=QueryMethod" json:"method,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Reference) Reset() {
	*x = Reference{}
	mi := &file_items_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{14}
}

func (x *Reference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Reference) GetUniqueAttributeValue() string {
	if x != nil {
		return x.UniqueAttributeValue
	}
	return ""
}

func (x *Reference) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Reference) GetIsQuery() bool {
	if x != nil {
		return x.IsQuery
	}
	return false
}

func (x *Reference) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Reference) GetMethod() QueryMethod {
	if x != nil {
		return x.Method
	}
	return QueryMethod_GET
}

// Edge represents a link between two items. The `to` Reference can be a query
// that will be unrolled by the gateway during query processing. Clients are
// guaranteed that edges are only sent after the referenced items.
type Edge struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	From             *Reference             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To               *Reference             `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	BlastPropagation *BlastPropagation      `protobuf:"bytes,3,opt,name=blastPropagation,proto3" json:"blastPropagation,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Edge) Reset() {
	*x = Edge{}
	mi := &file_items_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{15}
}

func (x *Edge) GetFrom() *Reference {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Edge) GetTo() *Reference {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Edge) GetBlastPropagation() *BlastPropagation {
	if x != nil {
		return x.BlastPropagation
	}
	return nil
}

// Defines how this query should behave when finding new items
type Query_RecursionBehaviour struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// How deeply to link items. A value of 0 will mean that items are not linked.
	// To resolve linked items "infinitely" simply set this to a high number, with
	// the highest being 4,294,967,295. While this isn't truly *infinite*, chances
	// are that it is effectively the same, think six degrees of separation etc.
	LinkDepth uint32 `protobuf:"varint,1,opt,name=linkDepth,proto3" json:"linkDepth,omitempty"`
	// set to true to only follow links that propagate configuration change impact
	FollowOnlyBlastPropagation bool `protobuf:"varint,2,opt,name=followOnlyBlastPropagation,proto3" json:"followOnlyBlastPropagation,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Query_RecursionBehaviour) Reset() {
	*x = Query_RecursionBehaviour{}
	mi := &file_items_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query_RecursionBehaviour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_RecursionBehaviour) ProtoMessage() {}

func (x *Query_RecursionBehaviour) ProtoReflect() protoreflect.Message {
	mi := &file_items_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_RecursionBehaviour.ProtoReflect.Descriptor instead.
func (*Query_RecursionBehaviour) Descriptor() ([]byte, []int) {
	return file_items_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Query_RecursionBehaviour) GetLinkDepth() uint32 {
	if x != nil {
		return x.LinkDepth
	}
	return 0
}

func (x *Query_RecursionBehaviour) GetFollowOnlyBlastPropagation() bool {
	if x != nil {
		return x.FollowOnlyBlastPropagation
	}
	return false
}

var File_items_proto protoreflect.FileDescriptor

const file_items_proto_rawDesc = "" +
	"\n" +
	"\vitems.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x0fresponses.proto\"4\n" +
	"\x10BlastPropagation\x12\x0e\n" +
	"\x02in\x18\x01 \x01(\bR\x02in\x12\x10\n" +
	"\x03out\x18\x02 \x01(\bR\x03out\"n\n" +
	"\x0fLinkedItemQuery\x12\x1c\n" +
	"\x05query\x18\x01 \x01(\v2\x06.QueryR\x05query\x12=\n" +
	"\x10blastPropagation\x18\x02 \x01(\v2\x11.BlastPropagationR\x10blastPropagation\"k\n" +
	"\n" +
	"LinkedItem\x12\x1e\n" +
	"\x04item\x18\x01 \x01(\v2\n" +
	".ReferenceR\x04item\x12=\n" +
	"\x10blastPropagation\x18\x02 \x01(\v2\x11.BlastPropagationR\x10blastPropagation\"\xe3\x03\n" +
	"\x04Item\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12(\n" +
	"\x0funiqueAttribute\x18\x02 \x01(\tR\x0funiqueAttribute\x12/\n" +
	"\n" +
	"attributes\x18\x03 \x01(\v2\x0f.ItemAttributesR\n" +
	"attributes\x12%\n" +
	"\bmetadata\x18\x04 \x01(\v2\t.MetadataR\bmetadata\x12\x14\n" +
	"\x05scope\x18\x05 \x01(\tR\x05scope\x12>\n" +
	"\x11linkedItemQueries\x18\x10 \x03(\v2\x10.LinkedItemQueryR\x11linkedItemQueries\x12-\n" +
	"\vlinkedItems\x18\x11 \x03(\v2\v.LinkedItemR\vlinkedItems\x12$\n" +
	"\x06health\x18\x12 \x01(\x0e2\a.HealthH\x00R\x06health\x88\x01\x01\x12#\n" +
	"\x04tags\x18\x13 \x03(\v2\x0f.Item.TagsEntryR\x04tags\x121\n" +
	"\n" +
	"logStreams\x18\x14 \x03(\v2\x11.LogStreamDetailsR\n" +
	"logStreams\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\t\n" +
	"\a_health\"I\n" +
	"\x0eItemAttributes\x127\n" +
	"\n" +
	"attrStruct\x18\x01 \x01(\v2\x17.google.protobuf.StructR\n" +
	"attrStruct\"\xc2\x02\n" +
	"\bMetadata\x12\x1e\n" +
	"\n" +
	"sourceName\x18\x02 \x01(\tR\n" +
	"sourceName\x12(\n" +
	"\vsourceQuery\x18\x03 \x01(\v2\x06.QueryR\vsourceQuery\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12E\n" +
	"\x0esourceDuration\x18\x05 \x01(\v2\x19.google.protobuf.DurationB\x02\x18\x01R\x0esourceDuration\x12S\n" +
	"\x15sourceDurationPerItem\x18\x06 \x01(\v2\x19.google.protobuf.DurationB\x02\x18\x01R\x15sourceDurationPerItem\x12\x16\n" +
	"\x06hidden\x18\a \x01(\bR\x06hidden\"$\n" +
	"\x05Items\x12\x1b\n" +
	"\x05items\x18\x01 \x03(\v2\x05.ItemR\x05items\"R\n" +
	"\x10LogStreamDetails\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05scope\x18\x02 \x01(\tR\x05scope\x12\x14\n" +
	"\x05query\x18\x03 \x01(\tR\x05query\"\xa0\x03\n" +
	"\x05Query\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12$\n" +
	"\x06method\x18\x02 \x01(\x0e2\f.QueryMethodR\x06method\x12\x14\n" +
	"\x05query\x18\x03 \x01(\tR\x05query\x12I\n" +
	"\x12recursionBehaviour\x18\x04 \x01(\v2\x19.Query.RecursionBehaviourR\x12recursionBehaviour\x12\x14\n" +
	"\x05scope\x18\x05 \x01(\tR\x05scope\x12 \n" +
	"\vignoreCache\x18\x06 \x01(\bR\vignoreCache\x12\x12\n" +
	"\x04UUID\x18\a \x01(\fR\x04UUID\x126\n" +
	"\bdeadline\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\bdeadline\x1ar\n" +
	"\x12RecursionBehaviour\x12\x1c\n" +
	"\tlinkDepth\x18\x01 \x01(\rR\tlinkDepth\x12>\n" +
	"\x1afollowOnlyBlastPropagation\x18\x02 \x01(\bR\x1afollowOnlyBlastPropagationJ\x04\b\b\x10\t\"\xae\x01\n" +
	"\rQueryResponse\x12!\n" +
	"\anewItem\x18\x02 \x01(\v2\x05.ItemH\x00R\anewItem\x12'\n" +
	"\bresponse\x18\x03 \x01(\v2\t.ResponseH\x00R\bresponse\x12#\n" +
	"\x05error\x18\x04 \x01(\v2\v.QueryErrorH\x00R\x05error\x12\x1b\n" +
	"\x04edge\x18\x05 \x01(\v2\x05.EdgeH\x00R\x04edgeB\x0f\n" +
	"\rresponse_type\"\xa6\x01\n" +
	"\vQueryStatus\x12\x12\n" +
	"\x04UUID\x18\x01 \x01(\fR\x04UUID\x12+\n" +
	"\x06status\x18\x02 \x01(\x0e2\x13.QueryStatus.StatusR\x06status\"V\n" +
	"\x06Status\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\v\n" +
	"\aSTARTED\x10\x01\x12\r\n" +
	"\tCANCELLED\x10\x03\x12\v\n" +
	"\aERRORED\x10\x04\x12\f\n" +
	"\bFINISHED\x10\x05\"\x04\b\x02\x10\x02\"\xaf\x02\n" +
	"\n" +
	"QueryError\x12\x12\n" +
	"\x04UUID\x18\x01 \x01(\fR\x04UUID\x123\n" +
	"\terrorType\x18\x02 \x01(\x0e2\x15.QueryError.ErrorTypeR\terrorType\x12 \n" +
	"\verrorString\x18\x03 \x01(\tR\verrorString\x12\x14\n" +
	"\x05scope\x18\x04 \x01(\tR\x05scope\x12\x1e\n" +
	"\n" +
	"sourceName\x18\x05 \x01(\tR\n" +
	"sourceName\x12\x1a\n" +
	"\bitemType\x18\x06 \x01(\tR\bitemType\x12$\n" +
	"\rresponderName\x18\a \x01(\tR\rresponderName\">\n" +
	"\tErrorType\x12\t\n" +
	"\x05OTHER\x10\x00\x12\f\n" +
	"\bNOTFOUND\x10\x01\x12\v\n" +
	"\aNOSCOPE\x10\x02\x12\v\n" +
	"\aTIMEOUT\x10\x03\"!\n" +
	"\vCancelQuery\x12\x12\n" +
	"\x04UUID\x18\x01 \x01(\fR\x04UUID\"\x92\x01\n" +
	"\x06Expand\x12\x1e\n" +
	"\x04item\x18\x01 \x01(\v2\n" +
	".ReferenceR\x04item\x12\x1c\n" +
	"\tlinkDepth\x18\x02 \x01(\rR\tlinkDepth\x12\x12\n" +
	"\x04UUID\x18\x03 \x01(\fR\x04UUID\x126\n" +
	"\bdeadline\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bdeadline\"\xbf\x01\n" +
	"\tReference\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x122\n" +
	"\x14uniqueAttributeValue\x18\x02 \x01(\tR\x14uniqueAttributeValue\x12\x14\n" +
	"\x05scope\x18\x03 \x01(\tR\x05scope\x12\x18\n" +
	"\aisQuery\x18\x04 \x01(\bR\aisQuery\x12\x14\n" +
	"\x05query\x18\x05 \x01(\tR\x05query\x12$\n" +
	"\x06method\x18\x06 \x01(\x0e2\f.QueryMethodR\x06method\"\x81\x01\n" +
	"\x04Edge\x12\x1e\n" +
	"\x04from\x18\x01 \x01(\v2\n" +
	".ReferenceR\x04from\x12\x1a\n" +
	"\x02to\x18\x02 \x01(\v2\n" +
	".ReferenceR\x02to\x12=\n" +
	"\x10blastPropagation\x18\x03 \x01(\v2\x11.BlastPropagationR\x10blastPropagation*e\n" +
	"\x06Health\x12\x12\n" +
	"\x0eHEALTH_UNKNOWN\x10\x00\x12\r\n" +
	"\tHEALTH_OK\x10\x01\x12\x12\n" +
	"\x0eHEALTH_WARNING\x10\x02\x12\x10\n" +
	"\fHEALTH_ERROR\x10\x03\x12\x12\n" +
	"\x0eHEALTH_PENDING\x10\x04*,\n" +
	"\vQueryMethod\x12\a\n" +
	"\x03GET\x10\x00\x12\b\n" +
	"\x04LIST\x10\x01\x12\n" +
	"\n" +
	"\x06SEARCH\x10\x02B.Z,github.com/overmindtech/cli/sdp-go;sdpb\x06proto3"

var (
	file_items_proto_rawDescOnce sync.Once
	file_items_proto_rawDescData []byte
)

func file_items_proto_rawDescGZIP() []byte {
	file_items_proto_rawDescOnce.Do(func() {
		file_items_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_items_proto_rawDesc), len(file_items_proto_rawDesc)))
	})
	return file_items_proto_rawDescData
}

var file_items_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_items_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_items_proto_goTypes = []any{
	(Health)(0),                      // 0: Health
	(QueryMethod)(0),                 // 1: QueryMethod
	(QueryStatus_Status)(0),          // 2: QueryStatus.Status
	(QueryError_ErrorType)(0),        // 3: QueryError.ErrorType
	(*BlastPropagation)(nil),         // 4: BlastPropagation
	(*LinkedItemQuery)(nil),          // 5: LinkedItemQuery
	(*LinkedItem)(nil),               // 6: LinkedItem
	(*Item)(nil),                     // 7: Item
	(*ItemAttributes)(nil),           // 8: ItemAttributes
	(*Metadata)(nil),                 // 9: Metadata
	(*Items)(nil),                    // 10: Items
	(*LogStreamDetails)(nil),         // 11: LogStreamDetails
	(*Query)(nil),                    // 12: Query
	(*QueryResponse)(nil),            // 13: QueryResponse
	(*QueryStatus)(nil),              // 14: QueryStatus
	(*QueryError)(nil),               // 15: QueryError
	(*CancelQuery)(nil),              // 16: CancelQuery
	(*Expand)(nil),                   // 17: Expand
	(*Reference)(nil),                // 18: Reference
	(*Edge)(nil),                     // 19: Edge
	nil,                              // 20: Item.TagsEntry
	(*Query_RecursionBehaviour)(nil), // 21: Query.RecursionBehaviour
	(*structpb.Struct)(nil),          // 22: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),    // 23: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),      // 24: google.protobuf.Duration
	(*Response)(nil),                 // 25: Response
}
var file_items_proto_depIdxs = []int32{
	12, // 0: LinkedItemQuery.query:type_name -> Query
	4,  // 1: LinkedItemQuery.blastPropagation:type_name -> BlastPropagation
	18, // 2: LinkedItem.item:type_name -> Reference
	4,  // 3: LinkedItem.blastPropagation:type_name -> BlastPropagation
	8,  // 4: Item.attributes:type_name -> ItemAttributes
	9,  // 5: Item.metadata:type_name -> Metadata
	5,  // 6: Item.linkedItemQueries:type_name -> LinkedItemQuery
	6,  // 7: Item.linkedItems:type_name -> LinkedItem
	0,  // 8: Item.health:type_name -> Health
	20, // 9: Item.tags:type_name -> Item.TagsEntry
	11, // 10: Item.logStreams:type_name -> LogStreamDetails
	22, // 11: ItemAttributes.attrStruct:type_name -> google.protobuf.Struct
	12, // 12: Metadata.sourceQuery:type_name -> Query
	23, // 13: Metadata.timestamp:type_name -> google.protobuf.Timestamp
	24, // 14: Metadata.sourceDuration:type_name -> google.protobuf.Duration
	24, // 15: Metadata.sourceDurationPerItem:type_name -> google.protobuf.Duration
	7,  // 16: Items.items:type_name -> Item
	1,  // 17: Query.method:type_name -> QueryMethod
	21, // 18: Query.recursionBehaviour:type_name -> Query.RecursionBehaviour
	23, // 19: Query.deadline:type_name -> google.protobuf.Timestamp
	7,  // 20: QueryResponse.newItem:type_name -> Item
	25, // 21: QueryResponse.response:type_name -> Response
	15, // 22: QueryResponse.error:type_name -> QueryError
	19, // 23: QueryResponse.edge:type_name -> Edge
	2,  // 24: QueryStatus.status:type_name -> QueryStatus.Status
	3,  // 25: QueryError.errorType:type_name -> QueryError.ErrorType
	18, // 26: Expand.item:type_name -> Reference
	23, // 27: Expand.deadline:type_name -> google.protobuf.Timestamp
	1,  // 28: Reference.method:type_name -> QueryMethod
	18, // 29: Edge.from:type_name -> Reference
	18, // 30: Edge.to:type_name -> Reference
	4,  // 31: Edge.blastPropagation:type_name -> BlastPropagation
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_items_proto_init() }
func file_items_proto_init() {
	if File_items_proto != nil {
		return
	}
	file_responses_proto_init()
	file_items_proto_msgTypes[3].OneofWrappers = []any{}
	file_items_proto_msgTypes[9].OneofWrappers = []any{
		(*QueryResponse_NewItem)(nil),
		(*QueryResponse_Response)(nil),
		(*QueryResponse_Error)(nil),
		(*QueryResponse_Edge)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_items_proto_rawDesc), len(file_items_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_items_proto_goTypes,
		DependencyIndexes: file_items_proto_depIdxs,
		EnumInfos:         file_items_proto_enumTypes,
		MessageInfos:      file_items_proto_msgTypes,
	}.Build()
	File_items_proto = out.File
	file_items_proto_goTypes = nil
	file_items_proto_depIdxs = nil
}
