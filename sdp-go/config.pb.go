// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: config.proto

package sdp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountConfig_BlastRadiusPreset int32

const (
	// Customise advanced limits.
	AccountConfig_CUSTOM AccountConfig_BlastRadiusPreset = 0
	// Runs a shallow scan for dependencies. Reduces time takes to calculate
	// blast radius, but might mean some dependencies are missed
	AccountConfig_QUICK AccountConfig_BlastRadiusPreset = 1
	// An optimised balance between time taken and discovery.
	AccountConfig_DETAILED AccountConfig_BlastRadiusPreset = 2
	// Discovers all possible dependencies, might take a long time and
	// discover items that are less likely to be relevant to a change.
	AccountConfig_FULL AccountConfig_BlastRadiusPreset = 3
)

// Enum value maps for AccountConfig_BlastRadiusPreset.
var (
	AccountConfig_BlastRadiusPreset_name = map[int32]string{
		0: "CUSTOM",
		1: "QUICK",
		2: "DETAILED",
		3: "FULL",
	}
	AccountConfig_BlastRadiusPreset_value = map[string]int32{
		"CUSTOM":   0,
		"QUICK":    1,
		"DETAILED": 2,
		"FULL":     3,
	}
)

func (x AccountConfig_BlastRadiusPreset) Enum() *AccountConfig_BlastRadiusPreset {
	p := new(AccountConfig_BlastRadiusPreset)
	*p = x
	return p
}

func (x AccountConfig_BlastRadiusPreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountConfig_BlastRadiusPreset) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (AccountConfig_BlastRadiusPreset) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x AccountConfig_BlastRadiusPreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountConfig_BlastRadiusPreset.Descriptor instead.
func (AccountConfig_BlastRadiusPreset) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 0}
}

type GetHcpConfigResponse_Status int32

const (
	// The HCP Run Task configuration is active and can be used
	GetHcpConfigResponse_CONFIGURED GetHcpConfigResponse_Status = 0
	// The HCP Run Task configuration is not fully configured and needs to
	// be recreated, this is usually due to the API key being revoked or the
	// user not completing the authorisation process
	GetHcpConfigResponse_ERROR GetHcpConfigResponse_Status = 1
)

// Enum value maps for GetHcpConfigResponse_Status.
var (
	GetHcpConfigResponse_Status_name = map[int32]string{
		0: "CONFIGURED",
		1: "ERROR",
	}
	GetHcpConfigResponse_Status_value = map[string]int32{
		"CONFIGURED": 0,
		"ERROR":      1,
	}
)

func (x GetHcpConfigResponse_Status) Enum() *GetHcpConfigResponse_Status {
	p := new(GetHcpConfigResponse_Status)
	*p = x
	return p
}

func (x GetHcpConfigResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetHcpConfigResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (GetHcpConfigResponse_Status) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x GetHcpConfigResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetHcpConfigResponse_Status.Descriptor instead.
func (GetHcpConfigResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{10, 0}
}

// The config that is used when calculating the blast radius for a change, this
// does not affect manually requested blast radii vie the "Explore" view or the
// API
type BlastRadiusConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of items that can be returned in a single blast radius
	// request. Once a request has hit this limit, all currently running
	// requests will be cancelled and the blast radius returned as-is
	MaxItems int32 `protobuf:"varint,1,opt,name=maxItems,proto3" json:"maxItems,omitempty"`
	// How deeply to link when calculating the blast radius for a change
	LinkDepth     int32 `protobuf:"varint,2,opt,name=linkDepth,proto3" json:"linkDepth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlastRadiusConfig) Reset() {
	*x = BlastRadiusConfig{}
	mi := &file_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlastRadiusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlastRadiusConfig) ProtoMessage() {}

func (x *BlastRadiusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlastRadiusConfig.ProtoReflect.Descriptor instead.
func (*BlastRadiusConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *BlastRadiusConfig) GetMaxItems() int32 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

func (x *BlastRadiusConfig) GetLinkDepth() int32 {
	if x != nil {
		return x.LinkDepth
	}
	return 0
}

// This account config is stored in the `kv.Store` protobuf key-value store in
// the api-server database. This means that as long as we don't have any
// *breaking* changes to the protobuf, we shouldn't need to do a migration. If
// however we do need to change this message in a breaking way, we will need to
// do some kind of a migration (depending on the change)
type AccountConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The preset that we should use when calculating the blast radius for a
	// change. If this is set to "CUSTOM" then the `blastRadius` config should be
	// set
	BlastRadiusPreset AccountConfig_BlastRadiusPreset `protobuf:"varint,2,opt,name=blastRadiusPreset,proto3,enum=config.AccountConfig_BlastRadiusPreset" json:"blastRadiusPreset,omitempty"`
	// The blast radius config for this account, this is only required if the
	// preset is "CUSTOM"
	BlastRadius *BlastRadiusConfig `protobuf:"bytes,1,opt,name=blastRadius,proto3,oneof" json:"blastRadius,omitempty"`
	// If this is set to true, changes that weren't able to be mapped to real
	// infrastructure won't be considered for risk calculations. This usually
	// reduces the number low-quality and low-severity risks, and focuses more
	// on risks that we have additional context for. If you find that Overmind's
	// risks are "too obvious" then this might be a good setting to enable.
	SkipUnmappedChangesForRisks bool `protobuf:"varint,3,opt,name=skipUnmappedChangesForRisks,proto3" json:"skipUnmappedChangesForRisks,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *AccountConfig) Reset() {
	*x = AccountConfig{}
	mi := &file_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountConfig) ProtoMessage() {}

func (x *AccountConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountConfig.ProtoReflect.Descriptor instead.
func (*AccountConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *AccountConfig) GetBlastRadiusPreset() AccountConfig_BlastRadiusPreset {
	if x != nil {
		return x.BlastRadiusPreset
	}
	return AccountConfig_CUSTOM
}

func (x *AccountConfig) GetBlastRadius() *BlastRadiusConfig {
	if x != nil {
		return x.BlastRadius
	}
	return nil
}

func (x *AccountConfig) GetSkipUnmappedChangesForRisks() bool {
	if x != nil {
		return x.SkipUnmappedChangesForRisks
	}
	return false
}

type GetAccountConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountConfigRequest) Reset() {
	*x = GetAccountConfigRequest{}
	mi := &file_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountConfigRequest) ProtoMessage() {}

func (x *GetAccountConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountConfigRequest.ProtoReflect.Descriptor instead.
func (*GetAccountConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

type GetAccountConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *AccountConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountConfigResponse) Reset() {
	*x = GetAccountConfigResponse{}
	mi := &file_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountConfigResponse) ProtoMessage() {}

func (x *GetAccountConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountConfigResponse.ProtoReflect.Descriptor instead.
func (*GetAccountConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *GetAccountConfigResponse) GetConfig() *AccountConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Updates the account config for the user's account.
type UpdateAccountConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *AccountConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAccountConfigRequest) Reset() {
	*x = UpdateAccountConfigRequest{}
	mi := &file_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccountConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountConfigRequest) ProtoMessage() {}

func (x *UpdateAccountConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAccountConfigRequest) GetConfig() *AccountConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateAccountConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *AccountConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAccountConfigResponse) Reset() {
	*x = UpdateAccountConfigResponse{}
	mi := &file_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccountConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountConfigResponse) ProtoMessage() {}

func (x *UpdateAccountConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateAccountConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAccountConfigResponse) GetConfig() *AccountConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateHcpConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL that the user should be redirected to after the whole process is
	// over. This should be a page in the frontend, probably the HCP Terraform
	// Integration page.
	FinalFrontendRedirect string `protobuf:"bytes,1,opt,name=finalFrontendRedirect,proto3" json:"finalFrontendRedirect,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CreateHcpConfigRequest) Reset() {
	*x = CreateHcpConfigRequest{}
	mi := &file_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHcpConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHcpConfigRequest) ProtoMessage() {}

func (x *CreateHcpConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHcpConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateHcpConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *CreateHcpConfigRequest) GetFinalFrontendRedirect() string {
	if x != nil {
		return x.FinalFrontendRedirect
	}
	return ""
}

type CreateHcpConfigResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The configuration of the HCP Run Task that was created
	Config *HcpConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The API Key response for the API key that backs this integration. This
	// API will have been created but not yet authorised, the user must still be
	// redirected to the authorizeURL to complete the process.
	ApiKey        *CreateAPIKeyResponse `protobuf:"bytes,2,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHcpConfigResponse) Reset() {
	*x = CreateHcpConfigResponse{}
	mi := &file_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHcpConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHcpConfigResponse) ProtoMessage() {}

func (x *CreateHcpConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHcpConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateHcpConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *CreateHcpConfigResponse) GetConfig() *HcpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateHcpConfigResponse) GetApiKey() *CreateAPIKeyResponse {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type HcpConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the Endpoint URL for the HCP Run Task configuration
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// the HMAC secret for the HCP Run Task configuration
	Secret        string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HcpConfig) Reset() {
	*x = HcpConfig{}
	mi := &file_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HcpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HcpConfig) ProtoMessage() {}

func (x *HcpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HcpConfig.ProtoReflect.Descriptor instead.
func (*HcpConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *HcpConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *HcpConfig) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type GetHcpConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHcpConfigRequest) Reset() {
	*x = GetHcpConfigRequest{}
	mi := &file_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHcpConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHcpConfigRequest) ProtoMessage() {}

func (x *GetHcpConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHcpConfigRequest.ProtoReflect.Descriptor instead.
func (*GetHcpConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{9}
}

type GetHcpConfigResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Config        *HcpConfig                  `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Status        GetHcpConfigResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=config.GetHcpConfigResponse_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHcpConfigResponse) Reset() {
	*x = GetHcpConfigResponse{}
	mi := &file_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHcpConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHcpConfigResponse) ProtoMessage() {}

func (x *GetHcpConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHcpConfigResponse.ProtoReflect.Descriptor instead.
func (*GetHcpConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{10}
}

func (x *GetHcpConfigResponse) GetConfig() *HcpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetHcpConfigResponse) GetStatus() GetHcpConfigResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetHcpConfigResponse_CONFIGURED
}

type DeleteHcpConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHcpConfigRequest) Reset() {
	*x = DeleteHcpConfigRequest{}
	mi := &file_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHcpConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHcpConfigRequest) ProtoMessage() {}

func (x *DeleteHcpConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHcpConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteHcpConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{11}
}

type DeleteHcpConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHcpConfigResponse) Reset() {
	*x = DeleteHcpConfigResponse{}
	mi := &file_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHcpConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHcpConfigResponse) ProtoMessage() {}

func (x *DeleteHcpConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHcpConfigResponse.ProtoReflect.Descriptor instead.
func (*DeleteHcpConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{12}
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0d, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x11, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x22, 0xbe, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x11, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x11, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x0b, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x69, 0x73, 0x6b,
	0x73, 0x22, 0x42, 0x0a, 0x11, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x03, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x49, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4b, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x7b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x63, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x06,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x22, 0x3f, 0x0a, 0x09, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x63, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x63,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x63, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x23, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x63, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc0, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x64,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x64, 0x70, 0x2d, 0x67, 0x6f, 0x3b, 0x73, 0x64, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData []byte
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)))
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_config_proto_goTypes = []any{
	(AccountConfig_BlastRadiusPreset)(0), // 0: config.AccountConfig.BlastRadiusPreset
	(GetHcpConfigResponse_Status)(0),     // 1: config.GetHcpConfigResponse.Status
	(*BlastRadiusConfig)(nil),            // 2: config.BlastRadiusConfig
	(*AccountConfig)(nil),                // 3: config.AccountConfig
	(*GetAccountConfigRequest)(nil),      // 4: config.GetAccountConfigRequest
	(*GetAccountConfigResponse)(nil),     // 5: config.GetAccountConfigResponse
	(*UpdateAccountConfigRequest)(nil),   // 6: config.UpdateAccountConfigRequest
	(*UpdateAccountConfigResponse)(nil),  // 7: config.UpdateAccountConfigResponse
	(*CreateHcpConfigRequest)(nil),       // 8: config.CreateHcpConfigRequest
	(*CreateHcpConfigResponse)(nil),      // 9: config.CreateHcpConfigResponse
	(*HcpConfig)(nil),                    // 10: config.HcpConfig
	(*GetHcpConfigRequest)(nil),          // 11: config.GetHcpConfigRequest
	(*GetHcpConfigResponse)(nil),         // 12: config.GetHcpConfigResponse
	(*DeleteHcpConfigRequest)(nil),       // 13: config.DeleteHcpConfigRequest
	(*DeleteHcpConfigResponse)(nil),      // 14: config.DeleteHcpConfigResponse
	(*CreateAPIKeyResponse)(nil),         // 15: apikeys.CreateAPIKeyResponse
}
var file_config_proto_depIdxs = []int32{
	0,  // 0: config.AccountConfig.blastRadiusPreset:type_name -> config.AccountConfig.BlastRadiusPreset
	2,  // 1: config.AccountConfig.blastRadius:type_name -> config.BlastRadiusConfig
	3,  // 2: config.GetAccountConfigResponse.config:type_name -> config.AccountConfig
	3,  // 3: config.UpdateAccountConfigRequest.config:type_name -> config.AccountConfig
	3,  // 4: config.UpdateAccountConfigResponse.config:type_name -> config.AccountConfig
	10, // 5: config.CreateHcpConfigResponse.config:type_name -> config.HcpConfig
	15, // 6: config.CreateHcpConfigResponse.apiKey:type_name -> apikeys.CreateAPIKeyResponse
	10, // 7: config.GetHcpConfigResponse.config:type_name -> config.HcpConfig
	1,  // 8: config.GetHcpConfigResponse.status:type_name -> config.GetHcpConfigResponse.Status
	4,  // 9: config.ConfigurationService.GetAccountConfig:input_type -> config.GetAccountConfigRequest
	6,  // 10: config.ConfigurationService.UpdateAccountConfig:input_type -> config.UpdateAccountConfigRequest
	8,  // 11: config.ConfigurationService.CreateHcpConfig:input_type -> config.CreateHcpConfigRequest
	11, // 12: config.ConfigurationService.GetHcpConfig:input_type -> config.GetHcpConfigRequest
	13, // 13: config.ConfigurationService.DeleteHcpConfig:input_type -> config.DeleteHcpConfigRequest
	5,  // 14: config.ConfigurationService.GetAccountConfig:output_type -> config.GetAccountConfigResponse
	7,  // 15: config.ConfigurationService.UpdateAccountConfig:output_type -> config.UpdateAccountConfigResponse
	9,  // 16: config.ConfigurationService.CreateHcpConfig:output_type -> config.CreateHcpConfigResponse
	12, // 17: config.ConfigurationService.GetHcpConfig:output_type -> config.GetHcpConfigResponse
	14, // 18: config.ConfigurationService.DeleteHcpConfig:output_type -> config.DeleteHcpConfigResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	file_apikeys_proto_init()
	file_config_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
